
lcd dispaly 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c1c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000de0  08000de0  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000de0  08000de0  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  08000de0  08000de0  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000de0  08000de0  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000de0  08000de0  00001de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000de4  08000de4  00001de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000de8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000df4  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000df4  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000328b  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bed  00000000  00000000  000052c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000390  00000000  00000000  00005eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000289  00000000  00000000  00006248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f90d  00000000  00000000  000064d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000414c  00000000  00000000  00025dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c185a  00000000  00000000  00029f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb784  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c68  00000000  00000000  000eb7c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000ec430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000dc8 	.word	0x08000dc8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08000dc8 	.word	0x08000dc8

08000204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	6039      	str	r1, [r7, #0]
 800020e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	db0a      	blt.n	800022e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	490c      	ldr	r1, [pc, #48]	@ (8000250 <__NVIC_SetPriority+0x4c>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800022c:	e00a      	b.n	8000244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4908      	ldr	r1, [pc, #32]	@ (8000254 <__NVIC_SetPriority+0x50>)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	3b04      	subs	r3, #4
 800023c:	0112      	lsls	r2, r2, #4
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	440b      	add	r3, r1
 8000242:	761a      	strb	r2, [r3, #24]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e100 	.word	0xe000e100
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	3b01      	subs	r3, #1
 8000264:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000268:	d301      	bcc.n	800026e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800026a:	2301      	movs	r3, #1
 800026c:	e00f      	b.n	800028e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800026e:	4a0a      	ldr	r2, [pc, #40]	@ (8000298 <SysTick_Config+0x40>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	3b01      	subs	r3, #1
 8000274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000276:	210f      	movs	r1, #15
 8000278:	f04f 30ff 	mov.w	r0, #4294967295
 800027c:	f7ff ffc2 	bl	8000204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000280:	4b05      	ldr	r3, [pc, #20]	@ (8000298 <SysTick_Config+0x40>)
 8000282:	2200      	movs	r2, #0
 8000284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000286:	4b04      	ldr	r3, [pc, #16]	@ (8000298 <SysTick_Config+0x40>)
 8000288:	2207      	movs	r2, #7
 800028a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800028c:	2300      	movs	r3, #0
}
 800028e:	4618      	mov	r0, r3
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	e000e010 	.word	0xe000e010

0800029c <Display_Number>:
#include "main.h"

// Function to display numbers 0-9 using GPIO Set/Reset
void Display_Number(uint8_t num) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
    // Reset all segments first
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // A
 80002a6:	2200      	movs	r2, #0
 80002a8:	2101      	movs	r1, #1
 80002aa:	48a0      	ldr	r0, [pc, #640]	@ (800052c <Display_Number+0x290>)
 80002ac:	f000 fd4e 	bl	8000d4c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // B
 80002b0:	2200      	movs	r2, #0
 80002b2:	2102      	movs	r1, #2
 80002b4:	489d      	ldr	r0, [pc, #628]	@ (800052c <Display_Number+0x290>)
 80002b6:	f000 fd49 	bl	8000d4c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // C
 80002ba:	2200      	movs	r2, #0
 80002bc:	2104      	movs	r1, #4
 80002be:	489b      	ldr	r0, [pc, #620]	@ (800052c <Display_Number+0x290>)
 80002c0:	f000 fd44 	bl	8000d4c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // D
 80002c4:	2200      	movs	r2, #0
 80002c6:	2108      	movs	r1, #8
 80002c8:	4898      	ldr	r0, [pc, #608]	@ (800052c <Display_Number+0x290>)
 80002ca:	f000 fd3f 	bl	8000d4c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // E
 80002ce:	2200      	movs	r2, #0
 80002d0:	2110      	movs	r1, #16
 80002d2:	4896      	ldr	r0, [pc, #600]	@ (800052c <Display_Number+0x290>)
 80002d4:	f000 fd3a 	bl	8000d4c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // F
 80002d8:	2200      	movs	r2, #0
 80002da:	2120      	movs	r1, #32
 80002dc:	4893      	ldr	r0, [pc, #588]	@ (800052c <Display_Number+0x290>)
 80002de:	f000 fd35 	bl	8000d4c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // G
 80002e2:	2200      	movs	r2, #0
 80002e4:	2140      	movs	r1, #64	@ 0x40
 80002e6:	4891      	ldr	r0, [pc, #580]	@ (800052c <Display_Number+0x290>)
 80002e8:	f000 fd30 	bl	8000d4c <HAL_GPIO_WritePin>

    // Set required segments based on number
    switch (num) {
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	2b09      	cmp	r3, #9
 80002f0:	f200 8117 	bhi.w	8000522 <Display_Number+0x286>
 80002f4:	a201      	add	r2, pc, #4	@ (adr r2, 80002fc <Display_Number+0x60>)
 80002f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002fa:	bf00      	nop
 80002fc:	08000325 	.word	0x08000325
 8000300:	08000363 	.word	0x08000363
 8000304:	08000379 	.word	0x08000379
 8000308:	080003ad 	.word	0x080003ad
 800030c:	080003e1 	.word	0x080003e1
 8000310:	0800040b 	.word	0x0800040b
 8000314:	0800043f 	.word	0x0800043f
 8000318:	0800047d 	.word	0x0800047d
 800031c:	0800049d 	.word	0x0800049d
 8000320:	080004e5 	.word	0x080004e5
        case 0:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000324:	2201      	movs	r2, #1
 8000326:	2101      	movs	r1, #1
 8000328:	4880      	ldr	r0, [pc, #512]	@ (800052c <Display_Number+0x290>)
 800032a:	f000 fd0f 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800032e:	2201      	movs	r2, #1
 8000330:	2102      	movs	r1, #2
 8000332:	487e      	ldr	r0, [pc, #504]	@ (800052c <Display_Number+0x290>)
 8000334:	f000 fd0a 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000338:	2201      	movs	r2, #1
 800033a:	2104      	movs	r1, #4
 800033c:	487b      	ldr	r0, [pc, #492]	@ (800052c <Display_Number+0x290>)
 800033e:	f000 fd05 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000342:	2201      	movs	r2, #1
 8000344:	2108      	movs	r1, #8
 8000346:	4879      	ldr	r0, [pc, #484]	@ (800052c <Display_Number+0x290>)
 8000348:	f000 fd00 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800034c:	2201      	movs	r2, #1
 800034e:	2110      	movs	r1, #16
 8000350:	4876      	ldr	r0, [pc, #472]	@ (800052c <Display_Number+0x290>)
 8000352:	f000 fcfb 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000356:	2201      	movs	r2, #1
 8000358:	2120      	movs	r1, #32
 800035a:	4874      	ldr	r0, [pc, #464]	@ (800052c <Display_Number+0x290>)
 800035c:	f000 fcf6 	bl	8000d4c <HAL_GPIO_WritePin>
            break;
 8000360:	e0df      	b.n	8000522 <Display_Number+0x286>
        case 1:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000362:	2201      	movs	r2, #1
 8000364:	2102      	movs	r1, #2
 8000366:	4871      	ldr	r0, [pc, #452]	@ (800052c <Display_Number+0x290>)
 8000368:	f000 fcf0 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800036c:	2201      	movs	r2, #1
 800036e:	2104      	movs	r1, #4
 8000370:	486e      	ldr	r0, [pc, #440]	@ (800052c <Display_Number+0x290>)
 8000372:	f000 fceb 	bl	8000d4c <HAL_GPIO_WritePin>
            break;
 8000376:	e0d4      	b.n	8000522 <Display_Number+0x286>
        case 2:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000378:	2201      	movs	r2, #1
 800037a:	2101      	movs	r1, #1
 800037c:	486b      	ldr	r0, [pc, #428]	@ (800052c <Display_Number+0x290>)
 800037e:	f000 fce5 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000382:	2201      	movs	r2, #1
 8000384:	2102      	movs	r1, #2
 8000386:	4869      	ldr	r0, [pc, #420]	@ (800052c <Display_Number+0x290>)
 8000388:	f000 fce0 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	2108      	movs	r1, #8
 8000390:	4866      	ldr	r0, [pc, #408]	@ (800052c <Display_Number+0x290>)
 8000392:	f000 fcdb 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000396:	2201      	movs	r2, #1
 8000398:	2110      	movs	r1, #16
 800039a:	4864      	ldr	r0, [pc, #400]	@ (800052c <Display_Number+0x290>)
 800039c:	f000 fcd6 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2140      	movs	r1, #64	@ 0x40
 80003a4:	4861      	ldr	r0, [pc, #388]	@ (800052c <Display_Number+0x290>)
 80003a6:	f000 fcd1 	bl	8000d4c <HAL_GPIO_WritePin>
            break;
 80003aa:	e0ba      	b.n	8000522 <Display_Number+0x286>
        case 3:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2101      	movs	r1, #1
 80003b0:	485e      	ldr	r0, [pc, #376]	@ (800052c <Display_Number+0x290>)
 80003b2:	f000 fccb 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2102      	movs	r1, #2
 80003ba:	485c      	ldr	r0, [pc, #368]	@ (800052c <Display_Number+0x290>)
 80003bc:	f000 fcc6 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2104      	movs	r1, #4
 80003c4:	4859      	ldr	r0, [pc, #356]	@ (800052c <Display_Number+0x290>)
 80003c6:	f000 fcc1 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80003ca:	2201      	movs	r2, #1
 80003cc:	2108      	movs	r1, #8
 80003ce:	4857      	ldr	r0, [pc, #348]	@ (800052c <Display_Number+0x290>)
 80003d0:	f000 fcbc 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80003d4:	2201      	movs	r2, #1
 80003d6:	2140      	movs	r1, #64	@ 0x40
 80003d8:	4854      	ldr	r0, [pc, #336]	@ (800052c <Display_Number+0x290>)
 80003da:	f000 fcb7 	bl	8000d4c <HAL_GPIO_WritePin>
            break;
 80003de:	e0a0      	b.n	8000522 <Display_Number+0x286>
        case 4:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80003e0:	2201      	movs	r2, #1
 80003e2:	2102      	movs	r1, #2
 80003e4:	4851      	ldr	r0, [pc, #324]	@ (800052c <Display_Number+0x290>)
 80003e6:	f000 fcb1 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	2104      	movs	r1, #4
 80003ee:	484f      	ldr	r0, [pc, #316]	@ (800052c <Display_Number+0x290>)
 80003f0:	f000 fcac 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80003f4:	2201      	movs	r2, #1
 80003f6:	2120      	movs	r1, #32
 80003f8:	484c      	ldr	r0, [pc, #304]	@ (800052c <Display_Number+0x290>)
 80003fa:	f000 fca7 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80003fe:	2201      	movs	r2, #1
 8000400:	2140      	movs	r1, #64	@ 0x40
 8000402:	484a      	ldr	r0, [pc, #296]	@ (800052c <Display_Number+0x290>)
 8000404:	f000 fca2 	bl	8000d4c <HAL_GPIO_WritePin>
            break;
 8000408:	e08b      	b.n	8000522 <Display_Number+0x286>
        case 5:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800040a:	2201      	movs	r2, #1
 800040c:	2101      	movs	r1, #1
 800040e:	4847      	ldr	r0, [pc, #284]	@ (800052c <Display_Number+0x290>)
 8000410:	f000 fc9c 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000414:	2201      	movs	r2, #1
 8000416:	2104      	movs	r1, #4
 8000418:	4844      	ldr	r0, [pc, #272]	@ (800052c <Display_Number+0x290>)
 800041a:	f000 fc97 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	2108      	movs	r1, #8
 8000422:	4842      	ldr	r0, [pc, #264]	@ (800052c <Display_Number+0x290>)
 8000424:	f000 fc92 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000428:	2201      	movs	r2, #1
 800042a:	2120      	movs	r1, #32
 800042c:	483f      	ldr	r0, [pc, #252]	@ (800052c <Display_Number+0x290>)
 800042e:	f000 fc8d 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000432:	2201      	movs	r2, #1
 8000434:	2140      	movs	r1, #64	@ 0x40
 8000436:	483d      	ldr	r0, [pc, #244]	@ (800052c <Display_Number+0x290>)
 8000438:	f000 fc88 	bl	8000d4c <HAL_GPIO_WritePin>
            break;
 800043c:	e071      	b.n	8000522 <Display_Number+0x286>
        case 6:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800043e:	2201      	movs	r2, #1
 8000440:	2101      	movs	r1, #1
 8000442:	483a      	ldr	r0, [pc, #232]	@ (800052c <Display_Number+0x290>)
 8000444:	f000 fc82 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000448:	2201      	movs	r2, #1
 800044a:	2104      	movs	r1, #4
 800044c:	4837      	ldr	r0, [pc, #220]	@ (800052c <Display_Number+0x290>)
 800044e:	f000 fc7d 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000452:	2201      	movs	r2, #1
 8000454:	2108      	movs	r1, #8
 8000456:	4835      	ldr	r0, [pc, #212]	@ (800052c <Display_Number+0x290>)
 8000458:	f000 fc78 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800045c:	2201      	movs	r2, #1
 800045e:	2110      	movs	r1, #16
 8000460:	4832      	ldr	r0, [pc, #200]	@ (800052c <Display_Number+0x290>)
 8000462:	f000 fc73 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000466:	2201      	movs	r2, #1
 8000468:	2120      	movs	r1, #32
 800046a:	4830      	ldr	r0, [pc, #192]	@ (800052c <Display_Number+0x290>)
 800046c:	f000 fc6e 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2140      	movs	r1, #64	@ 0x40
 8000474:	482d      	ldr	r0, [pc, #180]	@ (800052c <Display_Number+0x290>)
 8000476:	f000 fc69 	bl	8000d4c <HAL_GPIO_WritePin>
            break;
 800047a:	e052      	b.n	8000522 <Display_Number+0x286>
        case 7:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800047c:	2201      	movs	r2, #1
 800047e:	2101      	movs	r1, #1
 8000480:	482a      	ldr	r0, [pc, #168]	@ (800052c <Display_Number+0x290>)
 8000482:	f000 fc63 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000486:	2201      	movs	r2, #1
 8000488:	2102      	movs	r1, #2
 800048a:	4828      	ldr	r0, [pc, #160]	@ (800052c <Display_Number+0x290>)
 800048c:	f000 fc5e 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000490:	2201      	movs	r2, #1
 8000492:	2104      	movs	r1, #4
 8000494:	4825      	ldr	r0, [pc, #148]	@ (800052c <Display_Number+0x290>)
 8000496:	f000 fc59 	bl	8000d4c <HAL_GPIO_WritePin>
            break;
 800049a:	e042      	b.n	8000522 <Display_Number+0x286>
        case 8:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800049c:	2201      	movs	r2, #1
 800049e:	2101      	movs	r1, #1
 80004a0:	4822      	ldr	r0, [pc, #136]	@ (800052c <Display_Number+0x290>)
 80004a2:	f000 fc53 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	2102      	movs	r1, #2
 80004aa:	4820      	ldr	r0, [pc, #128]	@ (800052c <Display_Number+0x290>)
 80004ac:	f000 fc4e 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80004b0:	2201      	movs	r2, #1
 80004b2:	2104      	movs	r1, #4
 80004b4:	481d      	ldr	r0, [pc, #116]	@ (800052c <Display_Number+0x290>)
 80004b6:	f000 fc49 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80004ba:	2201      	movs	r2, #1
 80004bc:	2108      	movs	r1, #8
 80004be:	481b      	ldr	r0, [pc, #108]	@ (800052c <Display_Number+0x290>)
 80004c0:	f000 fc44 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2110      	movs	r1, #16
 80004c8:	4818      	ldr	r0, [pc, #96]	@ (800052c <Display_Number+0x290>)
 80004ca:	f000 fc3f 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80004ce:	2201      	movs	r2, #1
 80004d0:	2120      	movs	r1, #32
 80004d2:	4816      	ldr	r0, [pc, #88]	@ (800052c <Display_Number+0x290>)
 80004d4:	f000 fc3a 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	2140      	movs	r1, #64	@ 0x40
 80004dc:	4813      	ldr	r0, [pc, #76]	@ (800052c <Display_Number+0x290>)
 80004de:	f000 fc35 	bl	8000d4c <HAL_GPIO_WritePin>
            break;
 80004e2:	e01e      	b.n	8000522 <Display_Number+0x286>
        case 9:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80004e4:	2201      	movs	r2, #1
 80004e6:	2101      	movs	r1, #1
 80004e8:	4810      	ldr	r0, [pc, #64]	@ (800052c <Display_Number+0x290>)
 80004ea:	f000 fc2f 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80004ee:	2201      	movs	r2, #1
 80004f0:	2102      	movs	r1, #2
 80004f2:	480e      	ldr	r0, [pc, #56]	@ (800052c <Display_Number+0x290>)
 80004f4:	f000 fc2a 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2104      	movs	r1, #4
 80004fc:	480b      	ldr	r0, [pc, #44]	@ (800052c <Display_Number+0x290>)
 80004fe:	f000 fc25 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000502:	2201      	movs	r2, #1
 8000504:	2108      	movs	r1, #8
 8000506:	4809      	ldr	r0, [pc, #36]	@ (800052c <Display_Number+0x290>)
 8000508:	f000 fc20 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800050c:	2201      	movs	r2, #1
 800050e:	2120      	movs	r1, #32
 8000510:	4806      	ldr	r0, [pc, #24]	@ (800052c <Display_Number+0x290>)
 8000512:	f000 fc1b 	bl	8000d4c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000516:	2201      	movs	r2, #1
 8000518:	2140      	movs	r1, #64	@ 0x40
 800051a:	4804      	ldr	r0, [pc, #16]	@ (800052c <Display_Number+0x290>)
 800051c:	f000 fc16 	bl	8000d4c <HAL_GPIO_WritePin>
            break;
 8000520:	bf00      	nop
    }
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40020400 	.word	0x40020400

08000530 <MX_GPIO_Init>:

// GPIO Initialization (PB0 - PB6 for 7-Segment)
void MX_GPIO_Init(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE(); // Enable GPIOB Clock
 8000536:	2300      	movs	r3, #0
 8000538:	603b      	str	r3, [r7, #0]
 800053a:	4b14      	ldr	r3, [pc, #80]	@ (800058c <MX_GPIO_Init+0x5c>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	4a13      	ldr	r2, [pc, #76]	@ (800058c <MX_GPIO_Init+0x5c>)
 8000540:	f043 0302 	orr.w	r3, r3, #2
 8000544:	6313      	str	r3, [r2, #48]	@ 0x30
 8000546:	4b11      	ldr	r3, [pc, #68]	@ (800058c <MX_GPIO_Init+0x5c>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	f003 0302 	and.w	r3, r3, #2
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

    // Configure PB0 - PB6 as output
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |
 8000560:	237f      	movs	r3, #127	@ 0x7f
 8000562:	607b      	str	r3, [r7, #4]
                          GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000564:	2301      	movs	r3, #1
 8000566:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056c:	2300      	movs	r3, #0
 800056e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	4619      	mov	r1, r3
 8000574:	4806      	ldr	r0, [pc, #24]	@ (8000590 <MX_GPIO_Init+0x60>)
 8000576:	f000 fa55 	bl	8000a24 <HAL_GPIO_Init>

    // Turn off all segments initially
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |
 800057a:	2200      	movs	r2, #0
 800057c:	217f      	movs	r1, #127	@ 0x7f
 800057e:	4804      	ldr	r0, [pc, #16]	@ (8000590 <MX_GPIO_Init+0x60>)
 8000580:	f000 fbe4 	bl	8000d4c <HAL_GPIO_WritePin>
                             GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6, GPIO_PIN_RESET);
}
 8000584:	bf00      	nop
 8000586:	3718      	adds	r7, #24
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40023800 	.word	0x40023800
 8000590:	40020400 	.word	0x40020400

08000594 <SystemClock_Config>:

// System Clock Configuration
void SystemClock_Config(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
    // Set SysTick timer for 1ms tick
    SysTick_Config(SystemCoreClock / 1000);
 8000598:	4b05      	ldr	r3, [pc, #20]	@ (80005b0 <SystemClock_Config+0x1c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a05      	ldr	r2, [pc, #20]	@ (80005b4 <SystemClock_Config+0x20>)
 800059e:	fba2 2303 	umull	r2, r3, r2, r3
 80005a2:	099b      	lsrs	r3, r3, #6
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fe57 	bl	8000258 <SysTick_Config>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000000 	.word	0x20000000
 80005b4:	10624dd3 	.word	0x10624dd3

080005b8 <main>:

// Main Function
int main(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
    HAL_Init();         // Initialize HAL
 80005be:	f000 f8b5 	bl	800072c <HAL_Init>
    SystemClock_Config(); // Configure System Clock
 80005c2:	f7ff ffe7 	bl	8000594 <SystemClock_Config>
    MX_GPIO_Init();     // Initialize GPIO
 80005c6:	f7ff ffb3 	bl	8000530 <MX_GPIO_Init>

    uint8_t counter = 0; // Start counting from 0
 80005ca:	2300      	movs	r3, #0
 80005cc:	71fb      	strb	r3, [r7, #7]

    while (1) {
        Display_Number(counter);  // Show current number
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fe63 	bl	800029c <Display_Number>
        HAL_Delay(1000);          // Wait for 1 second
 80005d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005da:	f000 f919 	bl	8000810 <HAL_Delay>
        counter = (counter + 1) % 10; // Cycle 0-9
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	1c5a      	adds	r2, r3, #1
 80005e2:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <main+0x48>)
 80005e4:	fb83 1302 	smull	r1, r3, r3, r2
 80005e8:	1099      	asrs	r1, r3, #2
 80005ea:	17d3      	asrs	r3, r2, #31
 80005ec:	1ac9      	subs	r1, r1, r3
 80005ee:	460b      	mov	r3, r1
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	440b      	add	r3, r1
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	1ad1      	subs	r1, r2, r3
 80005f8:	460b      	mov	r3, r1
 80005fa:	71fb      	strb	r3, [r7, #7]
        Display_Number(counter);  // Show current number
 80005fc:	bf00      	nop
 80005fe:	e7e6      	b.n	80005ce <main+0x16>
 8000600:	66666667 	.word	0x66666667

08000604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	4b10      	ldr	r3, [pc, #64]	@ (8000650 <HAL_MspInit+0x4c>)
 8000610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000612:	4a0f      	ldr	r2, [pc, #60]	@ (8000650 <HAL_MspInit+0x4c>)
 8000614:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000618:	6453      	str	r3, [r2, #68]	@ 0x44
 800061a:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <HAL_MspInit+0x4c>)
 800061c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800061e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <HAL_MspInit+0x4c>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062e:	4a08      	ldr	r2, [pc, #32]	@ (8000650 <HAL_MspInit+0x4c>)
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000634:	6413      	str	r3, [r2, #64]	@ 0x40
 8000636:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <HAL_MspInit+0x4c>)
 8000638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000642:	2007      	movs	r0, #7
 8000644:	f000 f9ba 	bl	80009bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40023800 	.word	0x40023800

08000654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <NMI_Handler+0x4>

0800065c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <HardFault_Handler+0x4>

08000664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <MemManage_Handler+0x4>

0800066c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <BusFault_Handler+0x4>

08000674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <UsageFault_Handler+0x4>

0800067c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006aa:	f000 f891 	bl	80007d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006b8:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <SystemInit+0x20>)
 80006ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006be:	4a05      	ldr	r2, [pc, #20]	@ (80006d4 <SystemInit+0x20>)
 80006c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80006d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000710 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80006dc:	f7ff ffea 	bl	80006b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006e0:	480c      	ldr	r0, [pc, #48]	@ (8000714 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006e2:	490d      	ldr	r1, [pc, #52]	@ (8000718 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006e4:	4a0d      	ldr	r2, [pc, #52]	@ (800071c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e8:	e002      	b.n	80006f0 <LoopCopyDataInit>

080006ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ee:	3304      	adds	r3, #4

080006f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f4:	d3f9      	bcc.n	80006ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000720 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000724 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006fc:	e001      	b.n	8000702 <LoopFillZerobss>

080006fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000700:	3204      	adds	r2, #4

08000702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000704:	d3fb      	bcc.n	80006fe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000706:	f000 fb3b 	bl	8000d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800070a:	f7ff ff55 	bl	80005b8 <main>
  bx  lr    
 800070e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000710:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000718:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800071c:	08000de8 	.word	0x08000de8
  ldr r2, =_sbss
 8000720:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000724:	2000002c 	.word	0x2000002c

08000728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000728:	e7fe      	b.n	8000728 <ADC_IRQHandler>
	...

0800072c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <HAL_Init+0x40>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a0d      	ldr	r2, [pc, #52]	@ (800076c <HAL_Init+0x40>)
 8000736:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800073a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800073c:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <HAL_Init+0x40>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a0a      	ldr	r2, [pc, #40]	@ (800076c <HAL_Init+0x40>)
 8000742:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000746:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000748:	4b08      	ldr	r3, [pc, #32]	@ (800076c <HAL_Init+0x40>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a07      	ldr	r2, [pc, #28]	@ (800076c <HAL_Init+0x40>)
 800074e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000752:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000754:	2003      	movs	r0, #3
 8000756:	f000 f931 	bl	80009bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800075a:	2000      	movs	r0, #0
 800075c:	f000 f808 	bl	8000770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000760:	f7ff ff50 	bl	8000604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023c00 	.word	0x40023c00

08000770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <HAL_InitTick+0x54>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <HAL_InitTick+0x58>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4619      	mov	r1, r3
 8000782:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000786:	fbb3 f3f1 	udiv	r3, r3, r1
 800078a:	fbb2 f3f3 	udiv	r3, r2, r3
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f93b 	bl	8000a0a <HAL_SYSTICK_Config>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	e00e      	b.n	80007bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b0f      	cmp	r3, #15
 80007a2:	d80a      	bhi.n	80007ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a4:	2200      	movs	r2, #0
 80007a6:	6879      	ldr	r1, [r7, #4]
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ac:	f000 f911 	bl	80009d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b0:	4a06      	ldr	r2, [pc, #24]	@ (80007cc <HAL_InitTick+0x5c>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e000      	b.n	80007bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000000 	.word	0x20000000
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000004 	.word	0x20000004

080007d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <HAL_IncTick+0x20>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <HAL_IncTick+0x24>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4413      	add	r3, r2
 80007e0:	4a04      	ldr	r2, [pc, #16]	@ (80007f4 <HAL_IncTick+0x24>)
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	20000008 	.word	0x20000008
 80007f4:	20000028 	.word	0x20000028

080007f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return uwTick;
 80007fc:	4b03      	ldr	r3, [pc, #12]	@ (800080c <HAL_GetTick+0x14>)
 80007fe:	681b      	ldr	r3, [r3, #0]
}
 8000800:	4618      	mov	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000028 	.word	0x20000028

08000810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000818:	f7ff ffee 	bl	80007f8 <HAL_GetTick>
 800081c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000828:	d005      	beq.n	8000836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800082a:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <HAL_Delay+0x44>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	461a      	mov	r2, r3
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	4413      	add	r3, r2
 8000834:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000836:	bf00      	nop
 8000838:	f7ff ffde 	bl	80007f8 <HAL_GetTick>
 800083c:	4602      	mov	r2, r0
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	429a      	cmp	r2, r3
 8000846:	d8f7      	bhi.n	8000838 <HAL_Delay+0x28>
  {
  }
}
 8000848:	bf00      	nop
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000008 	.word	0x20000008

08000858 <__NVIC_SetPriorityGrouping>:
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <__NVIC_SetPriorityGrouping+0x44>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000874:	4013      	ands	r3, r2
 8000876:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000880:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800088a:	4a04      	ldr	r2, [pc, #16]	@ (800089c <__NVIC_SetPriorityGrouping+0x44>)
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	60d3      	str	r3, [r2, #12]
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <__NVIC_GetPriorityGrouping>:
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a4:	4b04      	ldr	r3, [pc, #16]	@ (80008b8 <__NVIC_GetPriorityGrouping+0x18>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	0a1b      	lsrs	r3, r3, #8
 80008aa:	f003 0307 	and.w	r3, r3, #7
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <__NVIC_SetPriority>:
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	db0a      	blt.n	80008e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	490c      	ldr	r1, [pc, #48]	@ (8000908 <__NVIC_SetPriority+0x4c>)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	0112      	lsls	r2, r2, #4
 80008dc:	b2d2      	uxtb	r2, r2
 80008de:	440b      	add	r3, r1
 80008e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80008e4:	e00a      	b.n	80008fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4908      	ldr	r1, [pc, #32]	@ (800090c <__NVIC_SetPriority+0x50>)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	3b04      	subs	r3, #4
 80008f4:	0112      	lsls	r2, r2, #4
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	440b      	add	r3, r1
 80008fa:	761a      	strb	r2, [r3, #24]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000e100 	.word	0xe000e100
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <NVIC_EncodePriority>:
{
 8000910:	b480      	push	{r7}
 8000912:	b089      	sub	sp, #36	@ 0x24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	f1c3 0307 	rsb	r3, r3, #7
 800092a:	2b04      	cmp	r3, #4
 800092c:	bf28      	it	cs
 800092e:	2304      	movcs	r3, #4
 8000930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	3304      	adds	r3, #4
 8000936:	2b06      	cmp	r3, #6
 8000938:	d902      	bls.n	8000940 <NVIC_EncodePriority+0x30>
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3b03      	subs	r3, #3
 800093e:	e000      	b.n	8000942 <NVIC_EncodePriority+0x32>
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	f04f 32ff 	mov.w	r2, #4294967295
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43da      	mvns	r2, r3
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	401a      	ands	r2, r3
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000958:	f04f 31ff 	mov.w	r1, #4294967295
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	fa01 f303 	lsl.w	r3, r1, r3
 8000962:	43d9      	mvns	r1, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	4313      	orrs	r3, r2
}
 800096a:	4618      	mov	r0, r3
 800096c:	3724      	adds	r7, #36	@ 0x24
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <SysTick_Config>:
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3b01      	subs	r3, #1
 8000984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000988:	d301      	bcc.n	800098e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800098a:	2301      	movs	r3, #1
 800098c:	e00f      	b.n	80009ae <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800098e:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <SysTick_Config+0x40>)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000996:	210f      	movs	r1, #15
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	f7ff ff8e 	bl	80008bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a0:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <SysTick_Config+0x40>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a6:	4b04      	ldr	r3, [pc, #16]	@ (80009b8 <SysTick_Config+0x40>)
 80009a8:	2207      	movs	r2, #7
 80009aa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	e000e010 	.word	0xe000e010

080009bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff ff47 	bl	8000858 <__NVIC_SetPriorityGrouping>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b086      	sub	sp, #24
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4603      	mov	r3, r0
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
 80009de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e4:	f7ff ff5c 	bl	80008a0 <__NVIC_GetPriorityGrouping>
 80009e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	68b9      	ldr	r1, [r7, #8]
 80009ee:	6978      	ldr	r0, [r7, #20]
 80009f0:	f7ff ff8e 	bl	8000910 <NVIC_EncodePriority>
 80009f4:	4602      	mov	r2, r0
 80009f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fa:	4611      	mov	r1, r2
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff5d 	bl	80008bc <__NVIC_SetPriority>
}
 8000a02:	bf00      	nop
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ffb0 	bl	8000978 <SysTick_Config>
 8000a18:	4603      	mov	r3, r0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b089      	sub	sp, #36	@ 0x24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
 8000a3e:	e165      	b.n	8000d0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000a40:	2201      	movs	r2, #1
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	697a      	ldr	r2, [r7, #20]
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	f040 8154 	bne.w	8000d06 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f003 0303 	and.w	r3, r3, #3
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d005      	beq.n	8000a76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d130      	bne.n	8000ad8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	2203      	movs	r2, #3
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	68da      	ldr	r2, [r3, #12]
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	69ba      	ldr	r2, [r7, #24]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	69ba      	ldr	r2, [r7, #24]
 8000aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aac:	2201      	movs	r2, #1
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	091b      	lsrs	r3, r3, #4
 8000ac2:	f003 0201 	and.w	r2, r3, #1
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f003 0303 	and.w	r3, r3, #3
 8000ae0:	2b03      	cmp	r3, #3
 8000ae2:	d017      	beq.n	8000b14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	2203      	movs	r2, #3
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	43db      	mvns	r3, r3
 8000af6:	69ba      	ldr	r2, [r7, #24]
 8000af8:	4013      	ands	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	689a      	ldr	r2, [r3, #8]
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	69ba      	ldr	r2, [r7, #24]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f003 0303 	and.w	r3, r3, #3
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d123      	bne.n	8000b68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	08da      	lsrs	r2, r3, #3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3208      	adds	r2, #8
 8000b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	f003 0307 	and.w	r3, r3, #7
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	220f      	movs	r2, #15
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4013      	ands	r3, r2
 8000b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	691a      	ldr	r2, [r3, #16]
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	08da      	lsrs	r2, r3, #3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3208      	adds	r2, #8
 8000b62:	69b9      	ldr	r1, [r7, #24]
 8000b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	2203      	movs	r2, #3
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	69ba      	ldr	r2, [r7, #24]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 0203 	and.w	r2, r3, #3
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	f000 80ae 	beq.w	8000d06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b5d      	ldr	r3, [pc, #372]	@ (8000d24 <HAL_GPIO_Init+0x300>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb2:	4a5c      	ldr	r2, [pc, #368]	@ (8000d24 <HAL_GPIO_Init+0x300>)
 8000bb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bba:	4b5a      	ldr	r3, [pc, #360]	@ (8000d24 <HAL_GPIO_Init+0x300>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bc6:	4a58      	ldr	r2, [pc, #352]	@ (8000d28 <HAL_GPIO_Init+0x304>)
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	089b      	lsrs	r3, r3, #2
 8000bcc:	3302      	adds	r3, #2
 8000bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f003 0303 	and.w	r3, r3, #3
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	220f      	movs	r2, #15
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4013      	ands	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a4f      	ldr	r2, [pc, #316]	@ (8000d2c <HAL_GPIO_Init+0x308>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d025      	beq.n	8000c3e <HAL_GPIO_Init+0x21a>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a4e      	ldr	r2, [pc, #312]	@ (8000d30 <HAL_GPIO_Init+0x30c>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d01f      	beq.n	8000c3a <HAL_GPIO_Init+0x216>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a4d      	ldr	r2, [pc, #308]	@ (8000d34 <HAL_GPIO_Init+0x310>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d019      	beq.n	8000c36 <HAL_GPIO_Init+0x212>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a4c      	ldr	r2, [pc, #304]	@ (8000d38 <HAL_GPIO_Init+0x314>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d013      	beq.n	8000c32 <HAL_GPIO_Init+0x20e>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a4b      	ldr	r2, [pc, #300]	@ (8000d3c <HAL_GPIO_Init+0x318>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d00d      	beq.n	8000c2e <HAL_GPIO_Init+0x20a>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a4a      	ldr	r2, [pc, #296]	@ (8000d40 <HAL_GPIO_Init+0x31c>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d007      	beq.n	8000c2a <HAL_GPIO_Init+0x206>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a49      	ldr	r2, [pc, #292]	@ (8000d44 <HAL_GPIO_Init+0x320>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d101      	bne.n	8000c26 <HAL_GPIO_Init+0x202>
 8000c22:	2306      	movs	r3, #6
 8000c24:	e00c      	b.n	8000c40 <HAL_GPIO_Init+0x21c>
 8000c26:	2307      	movs	r3, #7
 8000c28:	e00a      	b.n	8000c40 <HAL_GPIO_Init+0x21c>
 8000c2a:	2305      	movs	r3, #5
 8000c2c:	e008      	b.n	8000c40 <HAL_GPIO_Init+0x21c>
 8000c2e:	2304      	movs	r3, #4
 8000c30:	e006      	b.n	8000c40 <HAL_GPIO_Init+0x21c>
 8000c32:	2303      	movs	r3, #3
 8000c34:	e004      	b.n	8000c40 <HAL_GPIO_Init+0x21c>
 8000c36:	2302      	movs	r3, #2
 8000c38:	e002      	b.n	8000c40 <HAL_GPIO_Init+0x21c>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e000      	b.n	8000c40 <HAL_GPIO_Init+0x21c>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	69fa      	ldr	r2, [r7, #28]
 8000c42:	f002 0203 	and.w	r2, r2, #3
 8000c46:	0092      	lsls	r2, r2, #2
 8000c48:	4093      	lsls	r3, r2
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c50:	4935      	ldr	r1, [pc, #212]	@ (8000d28 <HAL_GPIO_Init+0x304>)
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	089b      	lsrs	r3, r3, #2
 8000c56:	3302      	adds	r3, #2
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c5e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d48 <HAL_GPIO_Init+0x324>)
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d003      	beq.n	8000c82 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c82:	4a31      	ldr	r2, [pc, #196]	@ (8000d48 <HAL_GPIO_Init+0x324>)
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c88:	4b2f      	ldr	r3, [pc, #188]	@ (8000d48 <HAL_GPIO_Init+0x324>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d003      	beq.n	8000cac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000cac:	4a26      	ldr	r2, [pc, #152]	@ (8000d48 <HAL_GPIO_Init+0x324>)
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cb2:	4b25      	ldr	r3, [pc, #148]	@ (8000d48 <HAL_GPIO_Init+0x324>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d003      	beq.n	8000cd6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000cd6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d48 <HAL_GPIO_Init+0x324>)
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <HAL_GPIO_Init+0x324>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d00:	4a11      	ldr	r2, [pc, #68]	@ (8000d48 <HAL_GPIO_Init+0x324>)
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	61fb      	str	r3, [r7, #28]
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	2b0f      	cmp	r3, #15
 8000d10:	f67f ae96 	bls.w	8000a40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	3724      	adds	r7, #36	@ 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40013800 	.word	0x40013800
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	40020400 	.word	0x40020400
 8000d34:	40020800 	.word	0x40020800
 8000d38:	40020c00 	.word	0x40020c00
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40021400 	.word	0x40021400
 8000d44:	40021800 	.word	0x40021800
 8000d48:	40013c00 	.word	0x40013c00

08000d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	807b      	strh	r3, [r7, #2]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d5c:	787b      	ldrb	r3, [r7, #1]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d62:	887a      	ldrh	r2, [r7, #2]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000d68:	e003      	b.n	8000d72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d6a:	887b      	ldrh	r3, [r7, #2]
 8000d6c:	041a      	lsls	r2, r3, #16
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	619a      	str	r2, [r3, #24]
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <__libc_init_array>:
 8000d80:	b570      	push	{r4, r5, r6, lr}
 8000d82:	4d0d      	ldr	r5, [pc, #52]	@ (8000db8 <__libc_init_array+0x38>)
 8000d84:	4c0d      	ldr	r4, [pc, #52]	@ (8000dbc <__libc_init_array+0x3c>)
 8000d86:	1b64      	subs	r4, r4, r5
 8000d88:	10a4      	asrs	r4, r4, #2
 8000d8a:	2600      	movs	r6, #0
 8000d8c:	42a6      	cmp	r6, r4
 8000d8e:	d109      	bne.n	8000da4 <__libc_init_array+0x24>
 8000d90:	4d0b      	ldr	r5, [pc, #44]	@ (8000dc0 <__libc_init_array+0x40>)
 8000d92:	4c0c      	ldr	r4, [pc, #48]	@ (8000dc4 <__libc_init_array+0x44>)
 8000d94:	f000 f818 	bl	8000dc8 <_init>
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	10a4      	asrs	r4, r4, #2
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	42a6      	cmp	r6, r4
 8000da0:	d105      	bne.n	8000dae <__libc_init_array+0x2e>
 8000da2:	bd70      	pop	{r4, r5, r6, pc}
 8000da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000da8:	4798      	blx	r3
 8000daa:	3601      	adds	r6, #1
 8000dac:	e7ee      	b.n	8000d8c <__libc_init_array+0xc>
 8000dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8000db2:	4798      	blx	r3
 8000db4:	3601      	adds	r6, #1
 8000db6:	e7f2      	b.n	8000d9e <__libc_init_array+0x1e>
 8000db8:	08000de0 	.word	0x08000de0
 8000dbc:	08000de0 	.word	0x08000de0
 8000dc0:	08000de0 	.word	0x08000de0
 8000dc4:	08000de4 	.word	0x08000de4

08000dc8 <_init>:
 8000dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dca:	bf00      	nop
 8000dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dce:	bc08      	pop	{r3}
 8000dd0:	469e      	mov	lr, r3
 8000dd2:	4770      	bx	lr

08000dd4 <_fini>:
 8000dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dd6:	bf00      	nop
 8000dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dda:	bc08      	pop	{r3}
 8000ddc:	469e      	mov	lr, r3
 8000dde:	4770      	bx	lr
