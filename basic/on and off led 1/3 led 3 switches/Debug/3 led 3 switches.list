
3 led 3 switches.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004a4  080004a4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004a4  080004a4  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080004a4  080004a4  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004a4  080004a4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004a4  080004a4  000014a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004a8  080004a8  000014a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004ac  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004b0  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004b0  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001369  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004da  00000000  00000000  0000339d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  00003878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000146  00000000  00000000  00003a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6c0  00000000  00000000  00003b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021d2  00000000  00000000  0002324e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c31d5  00000000  00000000  00025420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e85f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000570  00000000  00000000  000e8638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000e8ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800048c 	.word	0x0800048c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	0800048c 	.word	0x0800048c

08000204 <delay_ms>:
#include "stm32f4xx.h"

void delay_ms(uint32_t ms) {
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms * 4000; i++) {
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
 8000210:	e003      	b.n	800021a <delay_ms+0x16>
        __NOP(); // No Operation (CPU idle)
 8000212:	bf00      	nop
    for (uint32_t i = 0; i < ms * 4000; i++) {
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	3301      	adds	r3, #1
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000220:	fb02 f303 	mul.w	r3, r2, r3
 8000224:	68fa      	ldr	r2, [r7, #12]
 8000226:	429a      	cmp	r2, r3
 8000228:	d3f3      	bcc.n	8000212 <delay_ms+0xe>
    }
}
 800022a:	bf00      	nop
 800022c:	bf00      	nop
 800022e:	3714      	adds	r7, #20
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr

08000238 <GPIO_Init>:

void GPIO_Init(void) {
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
    // Enable GPIOA, GPIOB, and GPIOC clocks
    RCC->AHB1ENR |= (1 << 0) | (1 << 1) | (1 << 2);
 800023c:	4b1d      	ldr	r3, [pc, #116]	@ (80002b4 <GPIO_Init+0x7c>)
 800023e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000240:	4a1c      	ldr	r2, [pc, #112]	@ (80002b4 <GPIO_Init+0x7c>)
 8000242:	f043 0307 	orr.w	r3, r3, #7
 8000246:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA7, PA8, and PA9 as output (MODER: 01)
    GPIOA->MODER |= (1 << (7 * 2)) | (1 << (8 * 2)) | (1 << (9 * 2));
 8000248:	4b1b      	ldr	r3, [pc, #108]	@ (80002b8 <GPIO_Init+0x80>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a1a      	ldr	r2, [pc, #104]	@ (80002b8 <GPIO_Init+0x80>)
 800024e:	f443 23a8 	orr.w	r3, r3, #344064	@ 0x54000
 8000252:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~((1 << (7 * 2 + 1)) | (1 << (8 * 2 + 1)) | (1 << (9 * 2 + 1)));
 8000254:	4b18      	ldr	r3, [pc, #96]	@ (80002b8 <GPIO_Init+0x80>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a17      	ldr	r2, [pc, #92]	@ (80002b8 <GPIO_Init+0x80>)
 800025a:	f423 2328 	bic.w	r3, r3, #688128	@ 0xa8000
 800025e:	6013      	str	r3, [r2, #0]

    // Set PB8, PB9, and PC9 as input (MODER: 00)
    GPIOB->MODER &= ~((1 << (8 * 2)) | (1 << (9 * 2)));
 8000260:	4b16      	ldr	r3, [pc, #88]	@ (80002bc <GPIO_Init+0x84>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a15      	ldr	r2, [pc, #84]	@ (80002bc <GPIO_Init+0x84>)
 8000266:	f423 23a0 	bic.w	r3, r3, #327680	@ 0x50000
 800026a:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(1 << (9 * 2));
 800026c:	4b14      	ldr	r3, [pc, #80]	@ (80002c0 <GPIO_Init+0x88>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a13      	ldr	r2, [pc, #76]	@ (80002c0 <GPIO_Init+0x88>)
 8000272:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000276:	6013      	str	r3, [r2, #0]

    // Enable pull-up resistors for PB8, PB9, and PC9
    GPIOB->PUPDR |= (1 << (8 * 2)) | (1 << (9 * 2));
 8000278:	4b10      	ldr	r3, [pc, #64]	@ (80002bc <GPIO_Init+0x84>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	4a0f      	ldr	r2, [pc, #60]	@ (80002bc <GPIO_Init+0x84>)
 800027e:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000282:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR &= ~((1 << (8 * 2 + 1)) | (1 << (9 * 2 + 1)));
 8000284:	4b0d      	ldr	r3, [pc, #52]	@ (80002bc <GPIO_Init+0x84>)
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	4a0c      	ldr	r2, [pc, #48]	@ (80002bc <GPIO_Init+0x84>)
 800028a:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 800028e:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR |= (1 << (9 * 2));
 8000290:	4b0b      	ldr	r3, [pc, #44]	@ (80002c0 <GPIO_Init+0x88>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	4a0a      	ldr	r2, [pc, #40]	@ (80002c0 <GPIO_Init+0x88>)
 8000296:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800029a:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR &= ~(1 << (9 * 2 + 1));
 800029c:	4b08      	ldr	r3, [pc, #32]	@ (80002c0 <GPIO_Init+0x88>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	4a07      	ldr	r2, [pc, #28]	@ (80002c0 <GPIO_Init+0x88>)
 80002a2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80002a6:	60d3      	str	r3, [r2, #12]
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020000 	.word	0x40020000
 80002bc:	40020400 	.word	0x40020400
 80002c0:	40020800 	.word	0x40020800

080002c4 <main>:

int main(void) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
    GPIO_Init();
 80002c8:	f7ff ffb6 	bl	8000238 <GPIO_Init>

    while (1) {
        // Check PB8 (Switch 1)
        if (!(GPIOB->IDR & (1 << 8))) {
 80002cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000338 <main+0x74>)
 80002ce:	691b      	ldr	r3, [r3, #16]
 80002d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d10a      	bne.n	80002ee <main+0x2a>
            GPIOA->BSRR = (1 << 7); // Turn on LED1 (PA7)
 80002d8:	4b18      	ldr	r3, [pc, #96]	@ (800033c <main+0x78>)
 80002da:	2280      	movs	r2, #128	@ 0x80
 80002dc:	619a      	str	r2, [r3, #24]
            delay_ms(500);
 80002de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002e2:	f7ff ff8f 	bl	8000204 <delay_ms>
            GPIOA->BSRR = (1 << (7 + 16)); // Turn off LED1 (PA7)
 80002e6:	4b15      	ldr	r3, [pc, #84]	@ (800033c <main+0x78>)
 80002e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80002ec:	619a      	str	r2, [r3, #24]
        }

        // Check PB9 (Switch 2)
        if (!(GPIOB->IDR & (1 << 9))) {
 80002ee:	4b12      	ldr	r3, [pc, #72]	@ (8000338 <main+0x74>)
 80002f0:	691b      	ldr	r3, [r3, #16]
 80002f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d10b      	bne.n	8000312 <main+0x4e>
            GPIOA->BSRR = (1 << 8); // Turn on LED2 (PA8)
 80002fa:	4b10      	ldr	r3, [pc, #64]	@ (800033c <main+0x78>)
 80002fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000300:	619a      	str	r2, [r3, #24]
            delay_ms(500);
 8000302:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000306:	f7ff ff7d 	bl	8000204 <delay_ms>
            GPIOA->BSRR = (1 << (8 + 16)); // Turn off LED2 (PA8)
 800030a:	4b0c      	ldr	r3, [pc, #48]	@ (800033c <main+0x78>)
 800030c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000310:	619a      	str	r2, [r3, #24]
        }

        // Check PC9 (Switch 3)
        if (!(GPIOC->IDR & (1 << 9))) {
 8000312:	4b0b      	ldr	r3, [pc, #44]	@ (8000340 <main+0x7c>)
 8000314:	691b      	ldr	r3, [r3, #16]
 8000316:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800031a:	2b00      	cmp	r3, #0
 800031c:	d1d6      	bne.n	80002cc <main+0x8>
            GPIOA->BSRR = (1 << 9); // Turn on LED3 (PA9)
 800031e:	4b07      	ldr	r3, [pc, #28]	@ (800033c <main+0x78>)
 8000320:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000324:	619a      	str	r2, [r3, #24]
            delay_ms(500);
 8000326:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800032a:	f7ff ff6b 	bl	8000204 <delay_ms>
            GPIOA->BSRR = (1 << (9 + 16)); // Turn off LED3 (PA9)
 800032e:	4b03      	ldr	r3, [pc, #12]	@ (800033c <main+0x78>)
 8000330:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000334:	619a      	str	r2, [r3, #24]
        if (!(GPIOB->IDR & (1 << 8))) {
 8000336:	e7c9      	b.n	80002cc <main+0x8>
 8000338:	40020400 	.word	0x40020400
 800033c:	40020000 	.word	0x40020000
 8000340:	40020800 	.word	0x40020800

08000344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000348:	bf00      	nop
 800034a:	e7fd      	b.n	8000348 <NMI_Handler+0x4>

0800034c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000350:	bf00      	nop
 8000352:	e7fd      	b.n	8000350 <HardFault_Handler+0x4>

08000354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000358:	bf00      	nop
 800035a:	e7fd      	b.n	8000358 <MemManage_Handler+0x4>

0800035c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000360:	bf00      	nop
 8000362:	e7fd      	b.n	8000360 <BusFault_Handler+0x4>

08000364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000368:	bf00      	nop
 800036a:	e7fd      	b.n	8000368 <UsageFault_Handler+0x4>

0800036c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800037e:	bf00      	nop
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800039a:	f000 f83f 	bl	800041c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
	...

080003a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003a8:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <SystemInit+0x20>)
 80003aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003ae:	4a05      	ldr	r2, [pc, #20]	@ (80003c4 <SystemInit+0x20>)
 80003b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	e000ed00 	.word	0xe000ed00

080003c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000400 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003cc:	f7ff ffea 	bl	80003a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003d0:	480c      	ldr	r0, [pc, #48]	@ (8000404 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003d2:	490d      	ldr	r1, [pc, #52]	@ (8000408 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003d4:	4a0d      	ldr	r2, [pc, #52]	@ (800040c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d8:	e002      	b.n	80003e0 <LoopCopyDataInit>

080003da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003de:	3304      	adds	r3, #4

080003e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e4:	d3f9      	bcc.n	80003da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000410 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000414 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ec:	e001      	b.n	80003f2 <LoopFillZerobss>

080003ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f0:	3204      	adds	r2, #4

080003f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f4:	d3fb      	bcc.n	80003ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80003f6:	f000 f825 	bl	8000444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003fa:	f7ff ff63 	bl	80002c4 <main>
  bx  lr    
 80003fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000400:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000408:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800040c:	080004ac 	.word	0x080004ac
  ldr r2, =_sbss
 8000410:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000414:	20000024 	.word	0x20000024

08000418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000418:	e7fe      	b.n	8000418 <ADC_IRQHandler>
	...

0800041c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000420:	4b06      	ldr	r3, [pc, #24]	@ (800043c <HAL_IncTick+0x20>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	461a      	mov	r2, r3
 8000426:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <HAL_IncTick+0x24>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4413      	add	r3, r2
 800042c:	4a04      	ldr	r2, [pc, #16]	@ (8000440 <HAL_IncTick+0x24>)
 800042e:	6013      	str	r3, [r2, #0]
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	20000000 	.word	0x20000000
 8000440:	20000020 	.word	0x20000020

08000444 <__libc_init_array>:
 8000444:	b570      	push	{r4, r5, r6, lr}
 8000446:	4d0d      	ldr	r5, [pc, #52]	@ (800047c <__libc_init_array+0x38>)
 8000448:	4c0d      	ldr	r4, [pc, #52]	@ (8000480 <__libc_init_array+0x3c>)
 800044a:	1b64      	subs	r4, r4, r5
 800044c:	10a4      	asrs	r4, r4, #2
 800044e:	2600      	movs	r6, #0
 8000450:	42a6      	cmp	r6, r4
 8000452:	d109      	bne.n	8000468 <__libc_init_array+0x24>
 8000454:	4d0b      	ldr	r5, [pc, #44]	@ (8000484 <__libc_init_array+0x40>)
 8000456:	4c0c      	ldr	r4, [pc, #48]	@ (8000488 <__libc_init_array+0x44>)
 8000458:	f000 f818 	bl	800048c <_init>
 800045c:	1b64      	subs	r4, r4, r5
 800045e:	10a4      	asrs	r4, r4, #2
 8000460:	2600      	movs	r6, #0
 8000462:	42a6      	cmp	r6, r4
 8000464:	d105      	bne.n	8000472 <__libc_init_array+0x2e>
 8000466:	bd70      	pop	{r4, r5, r6, pc}
 8000468:	f855 3b04 	ldr.w	r3, [r5], #4
 800046c:	4798      	blx	r3
 800046e:	3601      	adds	r6, #1
 8000470:	e7ee      	b.n	8000450 <__libc_init_array+0xc>
 8000472:	f855 3b04 	ldr.w	r3, [r5], #4
 8000476:	4798      	blx	r3
 8000478:	3601      	adds	r6, #1
 800047a:	e7f2      	b.n	8000462 <__libc_init_array+0x1e>
 800047c:	080004a4 	.word	0x080004a4
 8000480:	080004a4 	.word	0x080004a4
 8000484:	080004a4 	.word	0x080004a4
 8000488:	080004a8 	.word	0x080004a8

0800048c <_init>:
 800048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048e:	bf00      	nop
 8000490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000492:	bc08      	pop	{r3}
 8000494:	469e      	mov	lr, r3
 8000496:	4770      	bx	lr

08000498 <_fini>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	bf00      	nop
 800049c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049e:	bc08      	pop	{r3}
 80004a0:	469e      	mov	lr, r3
 80004a2:	4770      	bx	lr
