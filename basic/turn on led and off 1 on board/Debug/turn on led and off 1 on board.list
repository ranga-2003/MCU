
turn on led and off 1 on board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000024c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000410  08000410  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000410  08000410  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000410  08000410  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000410  08000410  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000410  08000410  00001410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000414  08000414  00001414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000418  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800041c  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800041c  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001331  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000496  00000000  00000000  00003365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  00003800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000013e  00000000  00000000  000039c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f3e3  00000000  00000000  00003b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002103  00000000  00000000  00022ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c12b7  00000000  00000000  00024fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e62a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000548  00000000  00000000  000e62e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000e6830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003f8 	.word	0x080003f8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080003f8 	.word	0x080003f8

08000204 <main>:
#include "stm32f4xx.h"  // Include header for STM32F4 series

void GPIO_Config(void);

int main(void) {
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
    GPIO_Config();  // Configure GPIOs
 8000208:	f000 f814 	bl	8000234 <GPIO_Config>

    while (1) {
        if (GPIOC->IDR & GPIO_IDR_ID9) {  // Check if switch (PC9) is pressed
 800020c:	4b07      	ldr	r3, [pc, #28]	@ (800022c <main+0x28>)
 800020e:	691b      	ldr	r3, [r3, #16]
 8000210:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000214:	2b00      	cmp	r3, #0
 8000216:	d003      	beq.n	8000220 <main+0x1c>
            GPIOA->BSRR = GPIO_BSRR_BS5;  // Turn on LED (PA5)
 8000218:	4b05      	ldr	r3, [pc, #20]	@ (8000230 <main+0x2c>)
 800021a:	2220      	movs	r2, #32
 800021c:	619a      	str	r2, [r3, #24]
 800021e:	e7f5      	b.n	800020c <main+0x8>
        } else {
            GPIOA->BSRR = GPIO_BSRR_BR5;  // Turn off LED (PA5)
 8000220:	4b03      	ldr	r3, [pc, #12]	@ (8000230 <main+0x2c>)
 8000222:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000226:	619a      	str	r2, [r3, #24]
        if (GPIOC->IDR & GPIO_IDR_ID9) {  // Check if switch (PC9) is pressed
 8000228:	e7f0      	b.n	800020c <main+0x8>
 800022a:	bf00      	nop
 800022c:	40020800 	.word	0x40020800
 8000230:	40020000 	.word	0x40020000

08000234 <GPIO_Config>:
        }
    }
}

void GPIO_Config(void) {
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
    // Enable clocks for GPIOA and GPIOC
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 8000238:	4b1a      	ldr	r3, [pc, #104]	@ (80002a4 <GPIO_Config+0x70>)
 800023a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800023c:	4a19      	ldr	r2, [pc, #100]	@ (80002a4 <GPIO_Config+0x70>)
 800023e:	f043 0305 	orr.w	r3, r3, #5
 8000242:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure PA5 as output
    GPIOA->MODER &= ~(GPIO_MODER_MODE5); // Clear mode bits for PA5
 8000244:	4b18      	ldr	r3, [pc, #96]	@ (80002a8 <GPIO_Config+0x74>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a17      	ldr	r2, [pc, #92]	@ (80002a8 <GPIO_Config+0x74>)
 800024a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800024e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODE5_0;  // Set PA5 as output
 8000250:	4b15      	ldr	r3, [pc, #84]	@ (80002a8 <GPIO_Config+0x74>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a14      	ldr	r2, [pc, #80]	@ (80002a8 <GPIO_Config+0x74>)
 8000256:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800025a:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;   // Push-pull mode
 800025c:	4b12      	ldr	r3, [pc, #72]	@ (80002a8 <GPIO_Config+0x74>)
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	4a11      	ldr	r2, [pc, #68]	@ (80002a8 <GPIO_Config+0x74>)
 8000262:	f023 0320 	bic.w	r3, r3, #32
 8000266:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5; // High speed
 8000268:	4b0f      	ldr	r3, [pc, #60]	@ (80002a8 <GPIO_Config+0x74>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	4a0e      	ldr	r2, [pc, #56]	@ (80002a8 <GPIO_Config+0x74>)
 800026e:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000272:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD5;   // No pull-up, pull-down
 8000274:	4b0c      	ldr	r3, [pc, #48]	@ (80002a8 <GPIO_Config+0x74>)
 8000276:	68db      	ldr	r3, [r3, #12]
 8000278:	4a0b      	ldr	r2, [pc, #44]	@ (80002a8 <GPIO_Config+0x74>)
 800027a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800027e:	60d3      	str	r3, [r2, #12]

    // Configure PC9 as input
    GPIOC->MODER &= ~(GPIO_MODER_MODE9); // Set PC9 as input
 8000280:	4b0a      	ldr	r3, [pc, #40]	@ (80002ac <GPIO_Config+0x78>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a09      	ldr	r2, [pc, #36]	@ (80002ac <GPIO_Config+0x78>)
 8000286:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800028a:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR |= GPIO_PUPDR_PUPD9_0;  // Enable pull-up resistor for PC9
 800028c:	4b07      	ldr	r3, [pc, #28]	@ (80002ac <GPIO_Config+0x78>)
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	4a06      	ldr	r2, [pc, #24]	@ (80002ac <GPIO_Config+0x78>)
 8000292:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000296:	60d3      	str	r3, [r2, #12]
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40023800 	.word	0x40023800
 80002a8:	40020000 	.word	0x40020000
 80002ac:	40020800 	.word	0x40020800

080002b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002b4:	bf00      	nop
 80002b6:	e7fd      	b.n	80002b4 <NMI_Handler+0x4>

080002b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002bc:	bf00      	nop
 80002be:	e7fd      	b.n	80002bc <HardFault_Handler+0x4>

080002c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002c4:	bf00      	nop
 80002c6:	e7fd      	b.n	80002c4 <MemManage_Handler+0x4>

080002c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002cc:	bf00      	nop
 80002ce:	e7fd      	b.n	80002cc <BusFault_Handler+0x4>

080002d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002d4:	bf00      	nop
 80002d6:	e7fd      	b.n	80002d4 <UsageFault_Handler+0x4>

080002d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr

080002e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr

08000302 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000302:	b580      	push	{r7, lr}
 8000304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000306:	f000 f83f 	bl	8000388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000314:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <SystemInit+0x20>)
 8000316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800031a:	4a05      	ldr	r2, [pc, #20]	@ (8000330 <SystemInit+0x20>)
 800031c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000320:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	e000ed00 	.word	0xe000ed00

08000334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000334:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800036c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000338:	f7ff ffea 	bl	8000310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800033c:	480c      	ldr	r0, [pc, #48]	@ (8000370 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800033e:	490d      	ldr	r1, [pc, #52]	@ (8000374 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000340:	4a0d      	ldr	r2, [pc, #52]	@ (8000378 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000344:	e002      	b.n	800034c <LoopCopyDataInit>

08000346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034a:	3304      	adds	r3, #4

0800034c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800034c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000350:	d3f9      	bcc.n	8000346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000352:	4a0a      	ldr	r2, [pc, #40]	@ (800037c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000354:	4c0a      	ldr	r4, [pc, #40]	@ (8000380 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000358:	e001      	b.n	800035e <LoopFillZerobss>

0800035a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800035c:	3204      	adds	r2, #4

0800035e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000360:	d3fb      	bcc.n	800035a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000362:	f000 f825 	bl	80003b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000366:	f7ff ff4d 	bl	8000204 <main>
  bx  lr    
 800036a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800036c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000374:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000378:	08000418 	.word	0x08000418
  ldr r2, =_sbss
 800037c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000380:	20000024 	.word	0x20000024

08000384 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000384:	e7fe      	b.n	8000384 <ADC_IRQHandler>
	...

08000388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800038c:	4b06      	ldr	r3, [pc, #24]	@ (80003a8 <HAL_IncTick+0x20>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	461a      	mov	r2, r3
 8000392:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <HAL_IncTick+0x24>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4413      	add	r3, r2
 8000398:	4a04      	ldr	r2, [pc, #16]	@ (80003ac <HAL_IncTick+0x24>)
 800039a:	6013      	str	r3, [r2, #0]
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	20000000 	.word	0x20000000
 80003ac:	20000020 	.word	0x20000020

080003b0 <__libc_init_array>:
 80003b0:	b570      	push	{r4, r5, r6, lr}
 80003b2:	4d0d      	ldr	r5, [pc, #52]	@ (80003e8 <__libc_init_array+0x38>)
 80003b4:	4c0d      	ldr	r4, [pc, #52]	@ (80003ec <__libc_init_array+0x3c>)
 80003b6:	1b64      	subs	r4, r4, r5
 80003b8:	10a4      	asrs	r4, r4, #2
 80003ba:	2600      	movs	r6, #0
 80003bc:	42a6      	cmp	r6, r4
 80003be:	d109      	bne.n	80003d4 <__libc_init_array+0x24>
 80003c0:	4d0b      	ldr	r5, [pc, #44]	@ (80003f0 <__libc_init_array+0x40>)
 80003c2:	4c0c      	ldr	r4, [pc, #48]	@ (80003f4 <__libc_init_array+0x44>)
 80003c4:	f000 f818 	bl	80003f8 <_init>
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	10a4      	asrs	r4, r4, #2
 80003cc:	2600      	movs	r6, #0
 80003ce:	42a6      	cmp	r6, r4
 80003d0:	d105      	bne.n	80003de <__libc_init_array+0x2e>
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d8:	4798      	blx	r3
 80003da:	3601      	adds	r6, #1
 80003dc:	e7ee      	b.n	80003bc <__libc_init_array+0xc>
 80003de:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e2:	4798      	blx	r3
 80003e4:	3601      	adds	r6, #1
 80003e6:	e7f2      	b.n	80003ce <__libc_init_array+0x1e>
 80003e8:	08000410 	.word	0x08000410
 80003ec:	08000410 	.word	0x08000410
 80003f0:	08000410 	.word	0x08000410
 80003f4:	08000414 	.word	0x08000414

080003f8 <_init>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr

08000404 <_fini>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr
