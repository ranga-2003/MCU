
switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000290  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000454  08000454  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000454  08000454  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000454  08000454  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000454  08000454  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000454  08000454  00001454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000458  08000458  00001458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800045c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000460  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000460  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000139a  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004d4  00000000  00000000  000033ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  000038a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000144  00000000  00000000  00003a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f3e3  00000000  00000000  00003bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002144  00000000  00000000  00022f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c12c7  00000000  00000000  000250e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e63aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000574  00000000  00000000  000e63f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000038  00000000  00000000  000e6964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800043c 	.word	0x0800043c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	0800043c 	.word	0x0800043c

08000204 <main>:

void GPIO_Init(void);
void Delay(uint32_t time);

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
    GPIO_Init();
 800020a:	f000 f835 	bl	8000278 <GPIO_Init>
    uint8_t buttonState = 0, prevButtonState = 0;
 800020e:	2300      	movs	r3, #0
 8000210:	717b      	strb	r3, [r7, #5]
 8000212:	2300      	movs	r3, #0
 8000214:	71fb      	strb	r3, [r7, #7]
    uint8_t ledState = 0;
 8000216:	2300      	movs	r3, #0
 8000218:	71bb      	strb	r3, [r7, #6]

    while (1)
    {
        buttonState = (GPIOC->IDR & GPIO_IDR_ID9) ? 1 : 0;
 800021a:	4b14      	ldr	r3, [pc, #80]	@ (800026c <main+0x68>)
 800021c:	691b      	ldr	r3, [r3, #16]
 800021e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000222:	2b00      	cmp	r3, #0
 8000224:	bf14      	ite	ne
 8000226:	2301      	movne	r3, #1
 8000228:	2300      	moveq	r3, #0
 800022a:	b2db      	uxtb	r3, r3
 800022c:	717b      	strb	r3, [r7, #5]

        if (buttonState && !prevButtonState) // Detect rising edge
 800022e:	797b      	ldrb	r3, [r7, #5]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d015      	beq.n	8000260 <main+0x5c>
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d112      	bne.n	8000260 <main+0x5c>
        {
            ledState = !ledState;
 800023a:	79bb      	ldrb	r3, [r7, #6]
 800023c:	2b00      	cmp	r3, #0
 800023e:	bf0c      	ite	eq
 8000240:	2301      	moveq	r3, #1
 8000242:	2300      	movne	r3, #0
 8000244:	b2db      	uxtb	r3, r3
 8000246:	71bb      	strb	r3, [r7, #6]
            if (ledState)
 8000248:	79bb      	ldrb	r3, [r7, #6]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d004      	beq.n	8000258 <main+0x54>
                GPIOA->BSRR = GPIO_BSRR_BS8; // Turn on LED
 800024e:	4b08      	ldr	r3, [pc, #32]	@ (8000270 <main+0x6c>)
 8000250:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000254:	619a      	str	r2, [r3, #24]
 8000256:	e003      	b.n	8000260 <main+0x5c>
            else
                GPIOA->BSRR = GPIO_BSRR_BR8; // Turn off LED
 8000258:	4b05      	ldr	r3, [pc, #20]	@ (8000270 <main+0x6c>)
 800025a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800025e:	619a      	str	r2, [r3, #24]
        }

        prevButtonState = buttonState;
 8000260:	797b      	ldrb	r3, [r7, #5]
 8000262:	71fb      	strb	r3, [r7, #7]
        Delay(100000); // Debounce delay
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <main+0x70>)
 8000266:	f000 f833 	bl	80002d0 <Delay>
        buttonState = (GPIOC->IDR & GPIO_IDR_ID9) ? 1 : 0;
 800026a:	e7d6      	b.n	800021a <main+0x16>
 800026c:	40020800 	.word	0x40020800
 8000270:	40020000 	.word	0x40020000
 8000274:	000186a0 	.word	0x000186a0

08000278 <GPIO_Init>:
    }
}

void GPIO_Init(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN; // Enable GPIOA & GPIOC clock
 800027c:	4b11      	ldr	r3, [pc, #68]	@ (80002c4 <GPIO_Init+0x4c>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000280:	4a10      	ldr	r2, [pc, #64]	@ (80002c4 <GPIO_Init+0x4c>)
 8000282:	f043 0305 	orr.w	r3, r3, #5
 8000286:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure PA8 as output
    GPIOA->MODER &= ~(GPIO_MODER_MODER8);
 8000288:	4b0f      	ldr	r3, [pc, #60]	@ (80002c8 <GPIO_Init+0x50>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a0e      	ldr	r2, [pc, #56]	@ (80002c8 <GPIO_Init+0x50>)
 800028e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000292:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODER8_0;
 8000294:	4b0c      	ldr	r3, [pc, #48]	@ (80002c8 <GPIO_Init+0x50>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a0b      	ldr	r2, [pc, #44]	@ (80002c8 <GPIO_Init+0x50>)
 800029a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800029e:	6013      	str	r3, [r2, #0]

    // Configure PC9 as input
    GPIOC->MODER &= ~(GPIO_MODER_MODER9);
 80002a0:	4b0a      	ldr	r3, [pc, #40]	@ (80002cc <GPIO_Init+0x54>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a09      	ldr	r2, [pc, #36]	@ (80002cc <GPIO_Init+0x54>)
 80002a6:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80002aa:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR |= GPIO_PUPDR_PUPDR9_0; // Enable pull-up resistor
 80002ac:	4b07      	ldr	r3, [pc, #28]	@ (80002cc <GPIO_Init+0x54>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	4a06      	ldr	r2, [pc, #24]	@ (80002cc <GPIO_Init+0x54>)
 80002b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002b6:	60d3      	str	r3, [r2, #12]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020000 	.word	0x40020000
 80002cc:	40020800 	.word	0x40020800

080002d0 <Delay>:

void Delay(uint32_t time)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
    while (time--) __NOP(); // Simple delay loop
 80002d8:	e000      	b.n	80002dc <Delay+0xc>
 80002da:	bf00      	nop
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	1e5a      	subs	r2, r3, #1
 80002e0:	607a      	str	r2, [r7, #4]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d1f9      	bne.n	80002da <Delay+0xa>
}
 80002e6:	bf00      	nop
 80002e8:	bf00      	nop
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002f8:	bf00      	nop
 80002fa:	e7fd      	b.n	80002f8 <NMI_Handler+0x4>

080002fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000300:	bf00      	nop
 8000302:	e7fd      	b.n	8000300 <HardFault_Handler+0x4>

08000304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000308:	bf00      	nop
 800030a:	e7fd      	b.n	8000308 <MemManage_Handler+0x4>

0800030c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000310:	bf00      	nop
 8000312:	e7fd      	b.n	8000310 <BusFault_Handler+0x4>

08000314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000318:	bf00      	nop
 800031a:	e7fd      	b.n	8000318 <UsageFault_Handler+0x4>

0800031c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr

0800032a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800032a:	b480      	push	{r7}
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800032e:	bf00      	nop
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr

08000346 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000346:	b580      	push	{r7, lr}
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800034a:	f000 f83f 	bl	80003cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
	...

08000354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000358:	4b06      	ldr	r3, [pc, #24]	@ (8000374 <SystemInit+0x20>)
 800035a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800035e:	4a05      	ldr	r2, [pc, #20]	@ (8000374 <SystemInit+0x20>)
 8000360:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000364:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	e000ed00 	.word	0xe000ed00

08000378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000378:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800037c:	f7ff ffea 	bl	8000354 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000380:	480c      	ldr	r0, [pc, #48]	@ (80003b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000382:	490d      	ldr	r1, [pc, #52]	@ (80003b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000384:	4a0d      	ldr	r2, [pc, #52]	@ (80003bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000388:	e002      	b.n	8000390 <LoopCopyDataInit>

0800038a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800038c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038e:	3304      	adds	r3, #4

08000390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000394:	d3f9      	bcc.n	800038a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000396:	4a0a      	ldr	r2, [pc, #40]	@ (80003c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000398:	4c0a      	ldr	r4, [pc, #40]	@ (80003c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800039c:	e001      	b.n	80003a2 <LoopFillZerobss>

0800039e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a0:	3204      	adds	r2, #4

080003a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a4:	d3fb      	bcc.n	800039e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80003a6:	f000 f825 	bl	80003f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003aa:	f7ff ff2b 	bl	8000204 <main>
  bx  lr    
 80003ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003bc:	0800045c 	.word	0x0800045c
  ldr r2, =_sbss
 80003c0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003c4:	20000024 	.word	0x20000024

080003c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003c8:	e7fe      	b.n	80003c8 <ADC_IRQHandler>
	...

080003cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003d0:	4b06      	ldr	r3, [pc, #24]	@ (80003ec <HAL_IncTick+0x20>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	461a      	mov	r2, r3
 80003d6:	4b06      	ldr	r3, [pc, #24]	@ (80003f0 <HAL_IncTick+0x24>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4413      	add	r3, r2
 80003dc:	4a04      	ldr	r2, [pc, #16]	@ (80003f0 <HAL_IncTick+0x24>)
 80003de:	6013      	str	r3, [r2, #0]
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	20000000 	.word	0x20000000
 80003f0:	20000020 	.word	0x20000020

080003f4 <__libc_init_array>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	4d0d      	ldr	r5, [pc, #52]	@ (800042c <__libc_init_array+0x38>)
 80003f8:	4c0d      	ldr	r4, [pc, #52]	@ (8000430 <__libc_init_array+0x3c>)
 80003fa:	1b64      	subs	r4, r4, r5
 80003fc:	10a4      	asrs	r4, r4, #2
 80003fe:	2600      	movs	r6, #0
 8000400:	42a6      	cmp	r6, r4
 8000402:	d109      	bne.n	8000418 <__libc_init_array+0x24>
 8000404:	4d0b      	ldr	r5, [pc, #44]	@ (8000434 <__libc_init_array+0x40>)
 8000406:	4c0c      	ldr	r4, [pc, #48]	@ (8000438 <__libc_init_array+0x44>)
 8000408:	f000 f818 	bl	800043c <_init>
 800040c:	1b64      	subs	r4, r4, r5
 800040e:	10a4      	asrs	r4, r4, #2
 8000410:	2600      	movs	r6, #0
 8000412:	42a6      	cmp	r6, r4
 8000414:	d105      	bne.n	8000422 <__libc_init_array+0x2e>
 8000416:	bd70      	pop	{r4, r5, r6, pc}
 8000418:	f855 3b04 	ldr.w	r3, [r5], #4
 800041c:	4798      	blx	r3
 800041e:	3601      	adds	r6, #1
 8000420:	e7ee      	b.n	8000400 <__libc_init_array+0xc>
 8000422:	f855 3b04 	ldr.w	r3, [r5], #4
 8000426:	4798      	blx	r3
 8000428:	3601      	adds	r6, #1
 800042a:	e7f2      	b.n	8000412 <__libc_init_array+0x1e>
 800042c:	08000454 	.word	0x08000454
 8000430:	08000454 	.word	0x08000454
 8000434:	08000454 	.word	0x08000454
 8000438:	08000458 	.word	0x08000458

0800043c <_init>:
 800043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043e:	bf00      	nop
 8000440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000442:	bc08      	pop	{r3}
 8000444:	469e      	mov	lr, r3
 8000446:	4770      	bx	lr

08000448 <_fini>:
 8000448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044a:	bf00      	nop
 800044c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044e:	bc08      	pop	{r3}
 8000450:	469e      	mov	lr, r3
 8000452:	4770      	bx	lr
