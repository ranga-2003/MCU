
keypad 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001954  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001b24  08001b24  00002b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b68  08001b68  00003074  2**0
                  CONTENTS
  4 .ARM          00000008  08001b68  08001b68  00002b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001b70  08001b70  00003074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b70  08001b70  00002b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001b74  08001b74  00002b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08001b78  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000074  08001bec  00003074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08001bec  000031e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003db6  00000000  00000000  000030a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ec3  00000000  00000000  00006e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000450  00000000  00000000  00007d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000311  00000000  00000000  00008170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021646  00000000  00000000  00008481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000511b  00000000  00000000  00029ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9321  00000000  00000000  0002ebe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7f03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016cc  00000000  00000000  000f7f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003a  00000000  00000000  000f9614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001b0c 	.word	0x08001b0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08001b0c 	.word	0x08001b0c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <Keypad_Init>:
    {'7', '8', '9'},
    {'*', '0', '#'}
};

// Function to initialize GPIO for Keypad
void Keypad_Init(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b6:	f107 030c 	add.w	r3, r7, #12
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]

    // Enable GPIO clock
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c6:	2300      	movs	r3, #0
 80002c8:	60bb      	str	r3, [r7, #8]
 80002ca:	4b1c      	ldr	r3, [pc, #112]	@ (800033c <Keypad_Init+0x8c>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ce:	4a1b      	ldr	r2, [pc, #108]	@ (800033c <Keypad_Init+0x8c>)
 80002d0:	f043 0302 	orr.w	r3, r3, #2
 80002d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80002d6:	4b19      	ldr	r3, [pc, #100]	@ (800033c <Keypad_Init+0x8c>)
 80002d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002da:	f003 0302 	and.w	r3, r3, #2
 80002de:	60bb      	str	r3, [r7, #8]
 80002e0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e2:	2300      	movs	r3, #0
 80002e4:	607b      	str	r3, [r7, #4]
 80002e6:	4b15      	ldr	r3, [pc, #84]	@ (800033c <Keypad_Init+0x8c>)
 80002e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ea:	4a14      	ldr	r2, [pc, #80]	@ (800033c <Keypad_Init+0x8c>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80002f2:	4b12      	ldr	r3, [pc, #72]	@ (800033c <Keypad_Init+0x8c>)
 80002f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	607b      	str	r3, [r7, #4]
 80002fc:	687b      	ldr	r3, [r7, #4]

    // Configure row pins as output (Push-pull)
    GPIO_InitStruct.Pin = ROW1_PIN | ROW2_PIN | ROW3_PIN | ROW4_PIN;
 80002fe:	230f      	movs	r3, #15
 8000300:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000302:	2301      	movs	r3, #1
 8000304:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000306:	2300      	movs	r3, #0
 8000308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800030a:	2302      	movs	r3, #2
 800030c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(ROW_GPIO_PORT, &GPIO_InitStruct);
 800030e:	f107 030c 	add.w	r3, r7, #12
 8000312:	4619      	mov	r1, r3
 8000314:	480a      	ldr	r0, [pc, #40]	@ (8000340 <Keypad_Init+0x90>)
 8000316:	f000 fb03 	bl	8000920 <HAL_GPIO_Init>

    // Configure column pins as input with pull-up
    GPIO_InitStruct.Pin = COL1_PIN | COL2_PIN | COL3_PIN;
 800031a:	2370      	movs	r3, #112	@ 0x70
 800031c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800031e:	2300      	movs	r3, #0
 8000320:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000322:	2301      	movs	r3, #1
 8000324:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(COL_GPIO_PORT, &GPIO_InitStruct);
 8000326:	f107 030c 	add.w	r3, r7, #12
 800032a:	4619      	mov	r1, r3
 800032c:	4805      	ldr	r0, [pc, #20]	@ (8000344 <Keypad_Init+0x94>)
 800032e:	f000 faf7 	bl	8000920 <HAL_GPIO_Init>
}
 8000332:	bf00      	nop
 8000334:	3720      	adds	r7, #32
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40023800 	.word	0x40023800
 8000340:	40020400 	.word	0x40020400
 8000344:	40020000 	.word	0x40020000

08000348 <Keypad_Scan>:

// Function to scan keypad and check if a key is pressed
char Keypad_Scan(void) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
    for (int row = 0; row < 4; row++) {
 800034e:	2300      	movs	r3, #0
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	e03f      	b.n	80003d4 <Keypad_Scan+0x8c>
        // Drive the row LOW
        HAL_GPIO_WritePin(ROW_GPIO_PORT, ROW1_PIN, GPIO_PIN_SET);
 8000354:	2201      	movs	r2, #1
 8000356:	2101      	movs	r1, #1
 8000358:	4822      	ldr	r0, [pc, #136]	@ (80003e4 <Keypad_Scan+0x9c>)
 800035a:	f000 fc8d 	bl	8000c78 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(ROW_GPIO_PORT, ROW2_PIN, GPIO_PIN_SET);
 800035e:	2201      	movs	r2, #1
 8000360:	2102      	movs	r1, #2
 8000362:	4820      	ldr	r0, [pc, #128]	@ (80003e4 <Keypad_Scan+0x9c>)
 8000364:	f000 fc88 	bl	8000c78 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(ROW_GPIO_PORT, ROW3_PIN, GPIO_PIN_SET);
 8000368:	2201      	movs	r2, #1
 800036a:	2104      	movs	r1, #4
 800036c:	481d      	ldr	r0, [pc, #116]	@ (80003e4 <Keypad_Scan+0x9c>)
 800036e:	f000 fc83 	bl	8000c78 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(ROW_GPIO_PORT, ROW4_PIN, GPIO_PIN_SET);
 8000372:	2201      	movs	r2, #1
 8000374:	2108      	movs	r1, #8
 8000376:	481b      	ldr	r0, [pc, #108]	@ (80003e4 <Keypad_Scan+0x9c>)
 8000378:	f000 fc7e 	bl	8000c78 <HAL_GPIO_WritePin>

        // Set the current row LOW
        HAL_GPIO_WritePin(ROW_GPIO_PORT, (1 << row), GPIO_PIN_RESET);
 800037c:	2201      	movs	r2, #1
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	fa02 f303 	lsl.w	r3, r2, r3
 8000384:	b29b      	uxth	r3, r3
 8000386:	2200      	movs	r2, #0
 8000388:	4619      	mov	r1, r3
 800038a:	4816      	ldr	r0, [pc, #88]	@ (80003e4 <Keypad_Scan+0x9c>)
 800038c:	f000 fc74 	bl	8000c78 <HAL_GPIO_WritePin>

        // Check columns for LOW input
        for (int col = 0; col < 3; col++) {
 8000390:	2300      	movs	r3, #0
 8000392:	603b      	str	r3, [r7, #0]
 8000394:	e018      	b.n	80003c8 <Keypad_Scan+0x80>
            if (HAL_GPIO_ReadPin(COL_GPIO_PORT, (1 << col)) == GPIO_PIN_RESET) {
 8000396:	2201      	movs	r2, #1
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	fa02 f303 	lsl.w	r3, r2, r3
 800039e:	b29b      	uxth	r3, r3
 80003a0:	4619      	mov	r1, r3
 80003a2:	4811      	ldr	r0, [pc, #68]	@ (80003e8 <Keypad_Scan+0xa0>)
 80003a4:	f000 fc50 	bl	8000c48 <HAL_GPIO_ReadPin>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d109      	bne.n	80003c2 <Keypad_Scan+0x7a>
                // Key is pressed, return corresponding key
                return keys[row][col];
 80003ae:	490f      	ldr	r1, [pc, #60]	@ (80003ec <Keypad_Scan+0xa4>)
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	4613      	mov	r3, r2
 80003b4:	005b      	lsls	r3, r3, #1
 80003b6:	4413      	add	r3, r2
 80003b8:	18ca      	adds	r2, r1, r3
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	4413      	add	r3, r2
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	e00c      	b.n	80003dc <Keypad_Scan+0x94>
        for (int col = 0; col < 3; col++) {
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	3301      	adds	r3, #1
 80003c6:	603b      	str	r3, [r7, #0]
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	2b02      	cmp	r3, #2
 80003cc:	dde3      	ble.n	8000396 <Keypad_Scan+0x4e>
    for (int row = 0; row < 4; row++) {
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3301      	adds	r3, #1
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2b03      	cmp	r3, #3
 80003d8:	ddbc      	ble.n	8000354 <Keypad_Scan+0xc>
            }
        }
    }
    return 0;  // No key pressed
 80003da:	2300      	movs	r3, #0
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40020400 	.word	0x40020400
 80003e8:	40020000 	.word	0x40020000
 80003ec:	20000000 	.word	0x20000000

080003f0 <main>:

int main(void) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
    // HAL Initialization
    HAL_Init();
 80003f6:	f000 f947 	bl	8000688 <HAL_Init>

    // Initialize Keypad
    Keypad_Init();
 80003fa:	f7ff ff59 	bl	80002b0 <Keypad_Init>

    char pressedKey;

    while (1) {
        // Scan for key press
        pressedKey = Keypad_Scan();
 80003fe:	f7ff ffa3 	bl	8000348 <Keypad_Scan>
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]

        if (pressedKey != 0) {
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0f8      	beq.n	80003fe <main+0xe>
            // Print "Key pressed" when a key is detected
            printf("Key pressed: %c\n", pressedKey);
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	4619      	mov	r1, r3
 8000410:	4801      	ldr	r0, [pc, #4]	@ (8000418 <main+0x28>)
 8000412:	f000 fd0d 	bl	8000e30 <iprintf>
        pressedKey = Keypad_Scan();
 8000416:	e7f2      	b.n	80003fe <main+0xe>
 8000418:	08001b24 	.word	0x08001b24

0800041c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000422:	2300      	movs	r3, #0
 8000424:	607b      	str	r3, [r7, #4]
 8000426:	4b10      	ldr	r3, [pc, #64]	@ (8000468 <HAL_MspInit+0x4c>)
 8000428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800042a:	4a0f      	ldr	r2, [pc, #60]	@ (8000468 <HAL_MspInit+0x4c>)
 800042c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000430:	6453      	str	r3, [r2, #68]	@ 0x44
 8000432:	4b0d      	ldr	r3, [pc, #52]	@ (8000468 <HAL_MspInit+0x4c>)
 8000434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043e:	2300      	movs	r3, #0
 8000440:	603b      	str	r3, [r7, #0]
 8000442:	4b09      	ldr	r3, [pc, #36]	@ (8000468 <HAL_MspInit+0x4c>)
 8000444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000446:	4a08      	ldr	r2, [pc, #32]	@ (8000468 <HAL_MspInit+0x4c>)
 8000448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800044c:	6413      	str	r3, [r2, #64]	@ 0x40
 800044e:	4b06      	ldr	r3, [pc, #24]	@ (8000468 <HAL_MspInit+0x4c>)
 8000450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800045a:	2007      	movs	r0, #7
 800045c:	f000 fa2c 	bl	80008b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000460:	bf00      	nop
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40023800 	.word	0x40023800

0800046c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <NMI_Handler+0x4>

08000474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <HardFault_Handler+0x4>

0800047c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <MemManage_Handler+0x4>

08000484 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <BusFault_Handler+0x4>

0800048c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <UsageFault_Handler+0x4>

08000494 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr

080004a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c2:	f000 f933 	bl	800072c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}

080004ca <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	b086      	sub	sp, #24
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	60f8      	str	r0, [r7, #12]
 80004d2:	60b9      	str	r1, [r7, #8]
 80004d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]
 80004da:	e00a      	b.n	80004f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004dc:	f3af 8000 	nop.w
 80004e0:	4601      	mov	r1, r0
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	1c5a      	adds	r2, r3, #1
 80004e6:	60ba      	str	r2, [r7, #8]
 80004e8:	b2ca      	uxtb	r2, r1
 80004ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	3301      	adds	r3, #1
 80004f0:	617b      	str	r3, [r7, #20]
 80004f2:	697a      	ldr	r2, [r7, #20]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	dbf0      	blt.n	80004dc <_read+0x12>
  }

  return len;
 80004fa:	687b      	ldr	r3, [r7, #4]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3718      	adds	r7, #24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	e009      	b.n	800052a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	1c5a      	adds	r2, r3, #1
 800051a:	60ba      	str	r2, [r7, #8]
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	4618      	mov	r0, r3
 8000520:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	3301      	adds	r3, #1
 8000528:	617b      	str	r3, [r7, #20]
 800052a:	697a      	ldr	r2, [r7, #20]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	429a      	cmp	r2, r3
 8000530:	dbf1      	blt.n	8000516 <_write+0x12>
  }
  return len;
 8000532:	687b      	ldr	r3, [r7, #4]
}
 8000534:	4618      	mov	r0, r3
 8000536:	3718      	adds	r7, #24
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <_close>:

int _close(int file)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000544:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000564:	605a      	str	r2, [r3, #4]
  return 0;
 8000566:	2300      	movs	r3, #0
}
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <_isatty>:

int _isatty(int file)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800057c:	2301      	movs	r3, #1
}
 800057e:	4618      	mov	r0, r3
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr

0800058a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800058a:	b480      	push	{r7}
 800058c:	b085      	sub	sp, #20
 800058e:	af00      	add	r7, sp, #0
 8000590:	60f8      	str	r0, [r7, #12]
 8000592:	60b9      	str	r1, [r7, #8]
 8000594:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000596:	2300      	movs	r3, #0
}
 8000598:	4618      	mov	r0, r3
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005ac:	4a14      	ldr	r2, [pc, #80]	@ (8000600 <_sbrk+0x5c>)
 80005ae:	4b15      	ldr	r3, [pc, #84]	@ (8000604 <_sbrk+0x60>)
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b8:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <_sbrk+0x64>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d102      	bne.n	80005c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005c0:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <_sbrk+0x64>)
 80005c2:	4a12      	ldr	r2, [pc, #72]	@ (800060c <_sbrk+0x68>)
 80005c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <_sbrk+0x64>)
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4413      	add	r3, r2
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d207      	bcs.n	80005e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d4:	f000 fcd0 	bl	8000f78 <__errno>
 80005d8:	4603      	mov	r3, r0
 80005da:	220c      	movs	r2, #12
 80005dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	e009      	b.n	80005f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <_sbrk+0x64>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ea:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <_sbrk+0x64>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	4a05      	ldr	r2, [pc, #20]	@ (8000608 <_sbrk+0x64>)
 80005f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005f6:	68fb      	ldr	r3, [r7, #12]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3718      	adds	r7, #24
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20020000 	.word	0x20020000
 8000604:	00000400 	.word	0x00000400
 8000608:	20000090 	.word	0x20000090
 800060c:	200001e8 	.word	0x200001e8

08000610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <SystemInit+0x20>)
 8000616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800061a:	4a05      	ldr	r2, [pc, #20]	@ (8000630 <SystemInit+0x20>)
 800061c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000620:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000634:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800066c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000638:	f7ff ffea 	bl	8000610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800063c:	480c      	ldr	r0, [pc, #48]	@ (8000670 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800063e:	490d      	ldr	r1, [pc, #52]	@ (8000674 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000640:	4a0d      	ldr	r2, [pc, #52]	@ (8000678 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000644:	e002      	b.n	800064c <LoopCopyDataInit>

08000646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064a:	3304      	adds	r3, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800064c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000650:	d3f9      	bcc.n	8000646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000652:	4a0a      	ldr	r2, [pc, #40]	@ (800067c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000654:	4c0a      	ldr	r4, [pc, #40]	@ (8000680 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000658:	e001      	b.n	800065e <LoopFillZerobss>

0800065a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800065c:	3204      	adds	r2, #4

0800065e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000660:	d3fb      	bcc.n	800065a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000662:	f000 fc8f 	bl	8000f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000666:	f7ff fec3 	bl	80003f0 <main>
  bx  lr    
 800066a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800066c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000674:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000678:	08001b78 	.word	0x08001b78
  ldr r2, =_sbss
 800067c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000680:	200001e4 	.word	0x200001e4

08000684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000684:	e7fe      	b.n	8000684 <ADC_IRQHandler>
	...

08000688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800068c:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <HAL_Init+0x40>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a0d      	ldr	r2, [pc, #52]	@ (80006c8 <HAL_Init+0x40>)
 8000692:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000696:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000698:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <HAL_Init+0x40>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a0a      	ldr	r2, [pc, #40]	@ (80006c8 <HAL_Init+0x40>)
 800069e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a4:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <HAL_Init+0x40>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a07      	ldr	r2, [pc, #28]	@ (80006c8 <HAL_Init+0x40>)
 80006aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 f901 	bl	80008b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006b6:	2000      	movs	r0, #0
 80006b8:	f000 f808 	bl	80006cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006bc:	f7ff feae 	bl	800041c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023c00 	.word	0x40023c00

080006cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <HAL_InitTick+0x54>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <HAL_InitTick+0x58>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4619      	mov	r1, r3
 80006de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f90b 	bl	8000906 <HAL_SYSTICK_Config>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e00e      	b.n	8000718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2b0f      	cmp	r3, #15
 80006fe:	d80a      	bhi.n	8000716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000700:	2200      	movs	r2, #0
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	f04f 30ff 	mov.w	r0, #4294967295
 8000708:	f000 f8e1 	bl	80008ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800070c:	4a06      	ldr	r2, [pc, #24]	@ (8000728 <HAL_InitTick+0x5c>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000712:	2300      	movs	r3, #0
 8000714:	e000      	b.n	8000718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
}
 8000718:	4618      	mov	r0, r3
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000000c 	.word	0x2000000c
 8000724:	20000014 	.word	0x20000014
 8000728:	20000010 	.word	0x20000010

0800072c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <HAL_IncTick+0x20>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <HAL_IncTick+0x24>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4413      	add	r3, r2
 800073c:	4a04      	ldr	r2, [pc, #16]	@ (8000750 <HAL_IncTick+0x24>)
 800073e:	6013      	str	r3, [r2, #0]
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20000014 	.word	0x20000014
 8000750:	20000094 	.word	0x20000094

08000754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800077c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000786:	4a04      	ldr	r2, [pc, #16]	@ (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	60d3      	str	r3, [r2, #12]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a0:	4b04      	ldr	r3, [pc, #16]	@ (80007b4 <__NVIC_GetPriorityGrouping+0x18>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	f003 0307 	and.w	r3, r3, #7
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db0a      	blt.n	80007e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	490c      	ldr	r1, [pc, #48]	@ (8000804 <__NVIC_SetPriority+0x4c>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	0112      	lsls	r2, r2, #4
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	440b      	add	r3, r1
 80007dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e0:	e00a      	b.n	80007f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4908      	ldr	r1, [pc, #32]	@ (8000808 <__NVIC_SetPriority+0x50>)
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	f003 030f 	and.w	r3, r3, #15
 80007ee:	3b04      	subs	r3, #4
 80007f0:	0112      	lsls	r2, r2, #4
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	440b      	add	r3, r1
 80007f6:	761a      	strb	r2, [r3, #24]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000e100 	.word	0xe000e100
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	@ 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	f1c3 0307 	rsb	r3, r3, #7
 8000826:	2b04      	cmp	r3, #4
 8000828:	bf28      	it	cs
 800082a:	2304      	movcs	r3, #4
 800082c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3304      	adds	r3, #4
 8000832:	2b06      	cmp	r3, #6
 8000834:	d902      	bls.n	800083c <NVIC_EncodePriority+0x30>
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3b03      	subs	r3, #3
 800083a:	e000      	b.n	800083e <NVIC_EncodePriority+0x32>
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000840:	f04f 32ff 	mov.w	r2, #4294967295
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43da      	mvns	r2, r3
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	401a      	ands	r2, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000854:	f04f 31ff 	mov.w	r1, #4294967295
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	43d9      	mvns	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000864:	4313      	orrs	r3, r2
         );
}
 8000866:	4618      	mov	r0, r3
 8000868:	3724      	adds	r7, #36	@ 0x24
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
	...

08000874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000884:	d301      	bcc.n	800088a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000886:	2301      	movs	r3, #1
 8000888:	e00f      	b.n	80008aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800088a:	4a0a      	ldr	r2, [pc, #40]	@ (80008b4 <SysTick_Config+0x40>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3b01      	subs	r3, #1
 8000890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000892:	210f      	movs	r1, #15
 8000894:	f04f 30ff 	mov.w	r0, #4294967295
 8000898:	f7ff ff8e 	bl	80007b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800089c:	4b05      	ldr	r3, [pc, #20]	@ (80008b4 <SysTick_Config+0x40>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a2:	4b04      	ldr	r3, [pc, #16]	@ (80008b4 <SysTick_Config+0x40>)
 80008a4:	2207      	movs	r2, #7
 80008a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	e000e010 	.word	0xe000e010

080008b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff ff47 	bl	8000754 <__NVIC_SetPriorityGrouping>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b086      	sub	sp, #24
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008e0:	f7ff ff5c 	bl	800079c <__NVIC_GetPriorityGrouping>
 80008e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	68b9      	ldr	r1, [r7, #8]
 80008ea:	6978      	ldr	r0, [r7, #20]
 80008ec:	f7ff ff8e 	bl	800080c <NVIC_EncodePriority>
 80008f0:	4602      	mov	r2, r0
 80008f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f6:	4611      	mov	r1, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff5d 	bl	80007b8 <__NVIC_SetPriority>
}
 80008fe:	bf00      	nop
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ffb0 	bl	8000874 <SysTick_Config>
 8000914:	4603      	mov	r3, r0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000920:	b480      	push	{r7}
 8000922:	b089      	sub	sp, #36	@ 0x24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
 800093a:	e165      	b.n	8000c08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800093c:	2201      	movs	r2, #1
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	697a      	ldr	r2, [r7, #20]
 800094c:	4013      	ands	r3, r2
 800094e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	429a      	cmp	r2, r3
 8000956:	f040 8154 	bne.w	8000c02 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f003 0303 	and.w	r3, r3, #3
 8000962:	2b01      	cmp	r3, #1
 8000964:	d005      	beq.n	8000972 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800096e:	2b02      	cmp	r3, #2
 8000970:	d130      	bne.n	80009d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	2203      	movs	r2, #3
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	4013      	ands	r3, r2
 8000988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	68da      	ldr	r2, [r3, #12]
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	69ba      	ldr	r2, [r7, #24]
 8000998:	4313      	orrs	r3, r2
 800099a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	69ba      	ldr	r2, [r7, #24]
 80009a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009a8:	2201      	movs	r2, #1
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	69ba      	ldr	r2, [r7, #24]
 80009b4:	4013      	ands	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	091b      	lsrs	r3, r3, #4
 80009be:	f003 0201 	and.w	r2, r3, #1
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	69ba      	ldr	r2, [r7, #24]
 80009d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f003 0303 	and.w	r3, r3, #3
 80009dc:	2b03      	cmp	r3, #3
 80009de:	d017      	beq.n	8000a10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	2203      	movs	r2, #3
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	43db      	mvns	r3, r3
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	4013      	ands	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	689a      	ldr	r2, [r3, #8]
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f003 0303 	and.w	r3, r3, #3
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d123      	bne.n	8000a64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	08da      	lsrs	r2, r3, #3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3208      	adds	r2, #8
 8000a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	f003 0307 	and.w	r3, r3, #7
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	220f      	movs	r2, #15
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	69ba      	ldr	r2, [r7, #24]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	691a      	ldr	r2, [r3, #16]
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	08da      	lsrs	r2, r3, #3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	3208      	adds	r2, #8
 8000a5e:	69b9      	ldr	r1, [r7, #24]
 8000a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	2203      	movs	r2, #3
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f003 0203 	and.w	r2, r3, #3
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	f000 80ae 	beq.w	8000c02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b5d      	ldr	r3, [pc, #372]	@ (8000c20 <HAL_GPIO_Init+0x300>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	4a5c      	ldr	r2, [pc, #368]	@ (8000c20 <HAL_GPIO_Init+0x300>)
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ab6:	4b5a      	ldr	r3, [pc, #360]	@ (8000c20 <HAL_GPIO_Init+0x300>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ac2:	4a58      	ldr	r2, [pc, #352]	@ (8000c24 <HAL_GPIO_Init+0x304>)
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	089b      	lsrs	r3, r3, #2
 8000ac8:	3302      	adds	r3, #2
 8000aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	f003 0303 	and.w	r3, r3, #3
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	220f      	movs	r2, #15
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a4f      	ldr	r2, [pc, #316]	@ (8000c28 <HAL_GPIO_Init+0x308>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d025      	beq.n	8000b3a <HAL_GPIO_Init+0x21a>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a4e      	ldr	r2, [pc, #312]	@ (8000c2c <HAL_GPIO_Init+0x30c>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d01f      	beq.n	8000b36 <HAL_GPIO_Init+0x216>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a4d      	ldr	r2, [pc, #308]	@ (8000c30 <HAL_GPIO_Init+0x310>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d019      	beq.n	8000b32 <HAL_GPIO_Init+0x212>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a4c      	ldr	r2, [pc, #304]	@ (8000c34 <HAL_GPIO_Init+0x314>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d013      	beq.n	8000b2e <HAL_GPIO_Init+0x20e>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a4b      	ldr	r2, [pc, #300]	@ (8000c38 <HAL_GPIO_Init+0x318>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d00d      	beq.n	8000b2a <HAL_GPIO_Init+0x20a>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a4a      	ldr	r2, [pc, #296]	@ (8000c3c <HAL_GPIO_Init+0x31c>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d007      	beq.n	8000b26 <HAL_GPIO_Init+0x206>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a49      	ldr	r2, [pc, #292]	@ (8000c40 <HAL_GPIO_Init+0x320>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d101      	bne.n	8000b22 <HAL_GPIO_Init+0x202>
 8000b1e:	2306      	movs	r3, #6
 8000b20:	e00c      	b.n	8000b3c <HAL_GPIO_Init+0x21c>
 8000b22:	2307      	movs	r3, #7
 8000b24:	e00a      	b.n	8000b3c <HAL_GPIO_Init+0x21c>
 8000b26:	2305      	movs	r3, #5
 8000b28:	e008      	b.n	8000b3c <HAL_GPIO_Init+0x21c>
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e006      	b.n	8000b3c <HAL_GPIO_Init+0x21c>
 8000b2e:	2303      	movs	r3, #3
 8000b30:	e004      	b.n	8000b3c <HAL_GPIO_Init+0x21c>
 8000b32:	2302      	movs	r3, #2
 8000b34:	e002      	b.n	8000b3c <HAL_GPIO_Init+0x21c>
 8000b36:	2301      	movs	r3, #1
 8000b38:	e000      	b.n	8000b3c <HAL_GPIO_Init+0x21c>
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	69fa      	ldr	r2, [r7, #28]
 8000b3e:	f002 0203 	and.w	r2, r2, #3
 8000b42:	0092      	lsls	r2, r2, #2
 8000b44:	4093      	lsls	r3, r2
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b4c:	4935      	ldr	r1, [pc, #212]	@ (8000c24 <HAL_GPIO_Init+0x304>)
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	089b      	lsrs	r3, r3, #2
 8000b52:	3302      	adds	r3, #2
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b5a:	4b3a      	ldr	r3, [pc, #232]	@ (8000c44 <HAL_GPIO_Init+0x324>)
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	43db      	mvns	r3, r3
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	4013      	ands	r3, r2
 8000b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000b76:	69ba      	ldr	r2, [r7, #24]
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b7e:	4a31      	ldr	r2, [pc, #196]	@ (8000c44 <HAL_GPIO_Init+0x324>)
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b84:	4b2f      	ldr	r3, [pc, #188]	@ (8000c44 <HAL_GPIO_Init+0x324>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	69ba      	ldr	r2, [r7, #24]
 8000b90:	4013      	ands	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ba8:	4a26      	ldr	r2, [pc, #152]	@ (8000c44 <HAL_GPIO_Init+0x324>)
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000bae:	4b25      	ldr	r3, [pc, #148]	@ (8000c44 <HAL_GPIO_Init+0x324>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d003      	beq.n	8000bd2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000bca:	69ba      	ldr	r2, [r7, #24]
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c44 <HAL_GPIO_Init+0x324>)
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c44 <HAL_GPIO_Init+0x324>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	43db      	mvns	r3, r3
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4013      	ands	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000bfc:	4a11      	ldr	r2, [pc, #68]	@ (8000c44 <HAL_GPIO_Init+0x324>)
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3301      	adds	r3, #1
 8000c06:	61fb      	str	r3, [r7, #28]
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	2b0f      	cmp	r3, #15
 8000c0c:	f67f ae96 	bls.w	800093c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	3724      	adds	r7, #36	@ 0x24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40013800 	.word	0x40013800
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40020400 	.word	0x40020400
 8000c30:	40020800 	.word	0x40020800
 8000c34:	40020c00 	.word	0x40020c00
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40021400 	.word	0x40021400
 8000c40:	40021800 	.word	0x40021800
 8000c44:	40013c00 	.word	0x40013c00

08000c48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	691a      	ldr	r2, [r3, #16]
 8000c58:	887b      	ldrh	r3, [r7, #2]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d002      	beq.n	8000c66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	e001      	b.n	8000c6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c66:	2300      	movs	r3, #0
 8000c68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	807b      	strh	r3, [r7, #2]
 8000c84:	4613      	mov	r3, r2
 8000c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c88:	787b      	ldrb	r3, [r7, #1]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c8e:	887a      	ldrh	r2, [r7, #2]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c94:	e003      	b.n	8000c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c96:	887b      	ldrh	r3, [r7, #2]
 8000c98:	041a      	lsls	r2, r3, #16
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	619a      	str	r2, [r3, #24]
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
	...

08000cac <std>:
 8000cac:	2300      	movs	r3, #0
 8000cae:	b510      	push	{r4, lr}
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	e9c0 3300 	strd	r3, r3, [r0]
 8000cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000cba:	6083      	str	r3, [r0, #8]
 8000cbc:	8181      	strh	r1, [r0, #12]
 8000cbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8000cc0:	81c2      	strh	r2, [r0, #14]
 8000cc2:	6183      	str	r3, [r0, #24]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	2208      	movs	r2, #8
 8000cc8:	305c      	adds	r0, #92	@ 0x5c
 8000cca:	f000 f906 	bl	8000eda <memset>
 8000cce:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <std+0x58>)
 8000cd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d08 <std+0x5c>)
 8000cd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d0c <std+0x60>)
 8000cd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000cda:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <std+0x64>)
 8000cdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8000cde:	4b0d      	ldr	r3, [pc, #52]	@ (8000d14 <std+0x68>)
 8000ce0:	6224      	str	r4, [r4, #32]
 8000ce2:	429c      	cmp	r4, r3
 8000ce4:	d006      	beq.n	8000cf4 <std+0x48>
 8000ce6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000cea:	4294      	cmp	r4, r2
 8000cec:	d002      	beq.n	8000cf4 <std+0x48>
 8000cee:	33d0      	adds	r3, #208	@ 0xd0
 8000cf0:	429c      	cmp	r4, r3
 8000cf2:	d105      	bne.n	8000d00 <std+0x54>
 8000cf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000cfc:	f000 b966 	b.w	8000fcc <__retarget_lock_init_recursive>
 8000d00:	bd10      	pop	{r4, pc}
 8000d02:	bf00      	nop
 8000d04:	08000e55 	.word	0x08000e55
 8000d08:	08000e77 	.word	0x08000e77
 8000d0c:	08000eaf 	.word	0x08000eaf
 8000d10:	08000ed3 	.word	0x08000ed3
 8000d14:	20000098 	.word	0x20000098

08000d18 <stdio_exit_handler>:
 8000d18:	4a02      	ldr	r2, [pc, #8]	@ (8000d24 <stdio_exit_handler+0xc>)
 8000d1a:	4903      	ldr	r1, [pc, #12]	@ (8000d28 <stdio_exit_handler+0x10>)
 8000d1c:	4803      	ldr	r0, [pc, #12]	@ (8000d2c <stdio_exit_handler+0x14>)
 8000d1e:	f000 b869 	b.w	8000df4 <_fwalk_sglue>
 8000d22:	bf00      	nop
 8000d24:	20000018 	.word	0x20000018
 8000d28:	0800186d 	.word	0x0800186d
 8000d2c:	20000028 	.word	0x20000028

08000d30 <cleanup_stdio>:
 8000d30:	6841      	ldr	r1, [r0, #4]
 8000d32:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <cleanup_stdio+0x34>)
 8000d34:	4299      	cmp	r1, r3
 8000d36:	b510      	push	{r4, lr}
 8000d38:	4604      	mov	r4, r0
 8000d3a:	d001      	beq.n	8000d40 <cleanup_stdio+0x10>
 8000d3c:	f000 fd96 	bl	800186c <_fflush_r>
 8000d40:	68a1      	ldr	r1, [r4, #8]
 8000d42:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <cleanup_stdio+0x38>)
 8000d44:	4299      	cmp	r1, r3
 8000d46:	d002      	beq.n	8000d4e <cleanup_stdio+0x1e>
 8000d48:	4620      	mov	r0, r4
 8000d4a:	f000 fd8f 	bl	800186c <_fflush_r>
 8000d4e:	68e1      	ldr	r1, [r4, #12]
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <cleanup_stdio+0x3c>)
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d004      	beq.n	8000d60 <cleanup_stdio+0x30>
 8000d56:	4620      	mov	r0, r4
 8000d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d5c:	f000 bd86 	b.w	800186c <_fflush_r>
 8000d60:	bd10      	pop	{r4, pc}
 8000d62:	bf00      	nop
 8000d64:	20000098 	.word	0x20000098
 8000d68:	20000100 	.word	0x20000100
 8000d6c:	20000168 	.word	0x20000168

08000d70 <global_stdio_init.part.0>:
 8000d70:	b510      	push	{r4, lr}
 8000d72:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <global_stdio_init.part.0+0x30>)
 8000d74:	4c0b      	ldr	r4, [pc, #44]	@ (8000da4 <global_stdio_init.part.0+0x34>)
 8000d76:	4a0c      	ldr	r2, [pc, #48]	@ (8000da8 <global_stdio_init.part.0+0x38>)
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2104      	movs	r1, #4
 8000d80:	f7ff ff94 	bl	8000cac <std>
 8000d84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2109      	movs	r1, #9
 8000d8c:	f7ff ff8e 	bl	8000cac <std>
 8000d90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000d94:	2202      	movs	r2, #2
 8000d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d9a:	2112      	movs	r1, #18
 8000d9c:	f7ff bf86 	b.w	8000cac <std>
 8000da0:	200001d0 	.word	0x200001d0
 8000da4:	20000098 	.word	0x20000098
 8000da8:	08000d19 	.word	0x08000d19

08000dac <__sfp_lock_acquire>:
 8000dac:	4801      	ldr	r0, [pc, #4]	@ (8000db4 <__sfp_lock_acquire+0x8>)
 8000dae:	f000 b90e 	b.w	8000fce <__retarget_lock_acquire_recursive>
 8000db2:	bf00      	nop
 8000db4:	200001d9 	.word	0x200001d9

08000db8 <__sfp_lock_release>:
 8000db8:	4801      	ldr	r0, [pc, #4]	@ (8000dc0 <__sfp_lock_release+0x8>)
 8000dba:	f000 b909 	b.w	8000fd0 <__retarget_lock_release_recursive>
 8000dbe:	bf00      	nop
 8000dc0:	200001d9 	.word	0x200001d9

08000dc4 <__sinit>:
 8000dc4:	b510      	push	{r4, lr}
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	f7ff fff0 	bl	8000dac <__sfp_lock_acquire>
 8000dcc:	6a23      	ldr	r3, [r4, #32]
 8000dce:	b11b      	cbz	r3, 8000dd8 <__sinit+0x14>
 8000dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dd4:	f7ff bff0 	b.w	8000db8 <__sfp_lock_release>
 8000dd8:	4b04      	ldr	r3, [pc, #16]	@ (8000dec <__sinit+0x28>)
 8000dda:	6223      	str	r3, [r4, #32]
 8000ddc:	4b04      	ldr	r3, [pc, #16]	@ (8000df0 <__sinit+0x2c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1f5      	bne.n	8000dd0 <__sinit+0xc>
 8000de4:	f7ff ffc4 	bl	8000d70 <global_stdio_init.part.0>
 8000de8:	e7f2      	b.n	8000dd0 <__sinit+0xc>
 8000dea:	bf00      	nop
 8000dec:	08000d31 	.word	0x08000d31
 8000df0:	200001d0 	.word	0x200001d0

08000df4 <_fwalk_sglue>:
 8000df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000df8:	4607      	mov	r7, r0
 8000dfa:	4688      	mov	r8, r1
 8000dfc:	4614      	mov	r4, r2
 8000dfe:	2600      	movs	r6, #0
 8000e00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e04:	f1b9 0901 	subs.w	r9, r9, #1
 8000e08:	d505      	bpl.n	8000e16 <_fwalk_sglue+0x22>
 8000e0a:	6824      	ldr	r4, [r4, #0]
 8000e0c:	2c00      	cmp	r4, #0
 8000e0e:	d1f7      	bne.n	8000e00 <_fwalk_sglue+0xc>
 8000e10:	4630      	mov	r0, r6
 8000e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e16:	89ab      	ldrh	r3, [r5, #12]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d907      	bls.n	8000e2c <_fwalk_sglue+0x38>
 8000e1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e20:	3301      	adds	r3, #1
 8000e22:	d003      	beq.n	8000e2c <_fwalk_sglue+0x38>
 8000e24:	4629      	mov	r1, r5
 8000e26:	4638      	mov	r0, r7
 8000e28:	47c0      	blx	r8
 8000e2a:	4306      	orrs	r6, r0
 8000e2c:	3568      	adds	r5, #104	@ 0x68
 8000e2e:	e7e9      	b.n	8000e04 <_fwalk_sglue+0x10>

08000e30 <iprintf>:
 8000e30:	b40f      	push	{r0, r1, r2, r3}
 8000e32:	b507      	push	{r0, r1, r2, lr}
 8000e34:	4906      	ldr	r1, [pc, #24]	@ (8000e50 <iprintf+0x20>)
 8000e36:	ab04      	add	r3, sp, #16
 8000e38:	6808      	ldr	r0, [r1, #0]
 8000e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e3e:	6881      	ldr	r1, [r0, #8]
 8000e40:	9301      	str	r3, [sp, #4]
 8000e42:	f000 f9e9 	bl	8001218 <_vfiprintf_r>
 8000e46:	b003      	add	sp, #12
 8000e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8000e4c:	b004      	add	sp, #16
 8000e4e:	4770      	bx	lr
 8000e50:	20000024 	.word	0x20000024

08000e54 <__sread>:
 8000e54:	b510      	push	{r4, lr}
 8000e56:	460c      	mov	r4, r1
 8000e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e5c:	f000 f868 	bl	8000f30 <_read_r>
 8000e60:	2800      	cmp	r0, #0
 8000e62:	bfab      	itete	ge
 8000e64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000e66:	89a3      	ldrhlt	r3, [r4, #12]
 8000e68:	181b      	addge	r3, r3, r0
 8000e6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000e6e:	bfac      	ite	ge
 8000e70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000e72:	81a3      	strhlt	r3, [r4, #12]
 8000e74:	bd10      	pop	{r4, pc}

08000e76 <__swrite>:
 8000e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e7a:	461f      	mov	r7, r3
 8000e7c:	898b      	ldrh	r3, [r1, #12]
 8000e7e:	05db      	lsls	r3, r3, #23
 8000e80:	4605      	mov	r5, r0
 8000e82:	460c      	mov	r4, r1
 8000e84:	4616      	mov	r6, r2
 8000e86:	d505      	bpl.n	8000e94 <__swrite+0x1e>
 8000e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f000 f83c 	bl	8000f0c <_lseek_r>
 8000e94:	89a3      	ldrh	r3, [r4, #12]
 8000e96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e9e:	81a3      	strh	r3, [r4, #12]
 8000ea0:	4632      	mov	r2, r6
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000eaa:	f000 b853 	b.w	8000f54 <_write_r>

08000eae <__sseek>:
 8000eae:	b510      	push	{r4, lr}
 8000eb0:	460c      	mov	r4, r1
 8000eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000eb6:	f000 f829 	bl	8000f0c <_lseek_r>
 8000eba:	1c43      	adds	r3, r0, #1
 8000ebc:	89a3      	ldrh	r3, [r4, #12]
 8000ebe:	bf15      	itete	ne
 8000ec0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000ec2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000ec6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000eca:	81a3      	strheq	r3, [r4, #12]
 8000ecc:	bf18      	it	ne
 8000ece:	81a3      	strhne	r3, [r4, #12]
 8000ed0:	bd10      	pop	{r4, pc}

08000ed2 <__sclose>:
 8000ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ed6:	f000 b809 	b.w	8000eec <_close_r>

08000eda <memset>:
 8000eda:	4402      	add	r2, r0
 8000edc:	4603      	mov	r3, r0
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d100      	bne.n	8000ee4 <memset+0xa>
 8000ee2:	4770      	bx	lr
 8000ee4:	f803 1b01 	strb.w	r1, [r3], #1
 8000ee8:	e7f9      	b.n	8000ede <memset+0x4>
	...

08000eec <_close_r>:
 8000eec:	b538      	push	{r3, r4, r5, lr}
 8000eee:	4d06      	ldr	r5, [pc, #24]	@ (8000f08 <_close_r+0x1c>)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	602b      	str	r3, [r5, #0]
 8000ef8:	f7ff fb20 	bl	800053c <_close>
 8000efc:	1c43      	adds	r3, r0, #1
 8000efe:	d102      	bne.n	8000f06 <_close_r+0x1a>
 8000f00:	682b      	ldr	r3, [r5, #0]
 8000f02:	b103      	cbz	r3, 8000f06 <_close_r+0x1a>
 8000f04:	6023      	str	r3, [r4, #0]
 8000f06:	bd38      	pop	{r3, r4, r5, pc}
 8000f08:	200001d4 	.word	0x200001d4

08000f0c <_lseek_r>:
 8000f0c:	b538      	push	{r3, r4, r5, lr}
 8000f0e:	4d07      	ldr	r5, [pc, #28]	@ (8000f2c <_lseek_r+0x20>)
 8000f10:	4604      	mov	r4, r0
 8000f12:	4608      	mov	r0, r1
 8000f14:	4611      	mov	r1, r2
 8000f16:	2200      	movs	r2, #0
 8000f18:	602a      	str	r2, [r5, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	f7ff fb35 	bl	800058a <_lseek>
 8000f20:	1c43      	adds	r3, r0, #1
 8000f22:	d102      	bne.n	8000f2a <_lseek_r+0x1e>
 8000f24:	682b      	ldr	r3, [r5, #0]
 8000f26:	b103      	cbz	r3, 8000f2a <_lseek_r+0x1e>
 8000f28:	6023      	str	r3, [r4, #0]
 8000f2a:	bd38      	pop	{r3, r4, r5, pc}
 8000f2c:	200001d4 	.word	0x200001d4

08000f30 <_read_r>:
 8000f30:	b538      	push	{r3, r4, r5, lr}
 8000f32:	4d07      	ldr	r5, [pc, #28]	@ (8000f50 <_read_r+0x20>)
 8000f34:	4604      	mov	r4, r0
 8000f36:	4608      	mov	r0, r1
 8000f38:	4611      	mov	r1, r2
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	602a      	str	r2, [r5, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	f7ff fac3 	bl	80004ca <_read>
 8000f44:	1c43      	adds	r3, r0, #1
 8000f46:	d102      	bne.n	8000f4e <_read_r+0x1e>
 8000f48:	682b      	ldr	r3, [r5, #0]
 8000f4a:	b103      	cbz	r3, 8000f4e <_read_r+0x1e>
 8000f4c:	6023      	str	r3, [r4, #0]
 8000f4e:	bd38      	pop	{r3, r4, r5, pc}
 8000f50:	200001d4 	.word	0x200001d4

08000f54 <_write_r>:
 8000f54:	b538      	push	{r3, r4, r5, lr}
 8000f56:	4d07      	ldr	r5, [pc, #28]	@ (8000f74 <_write_r+0x20>)
 8000f58:	4604      	mov	r4, r0
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	2200      	movs	r2, #0
 8000f60:	602a      	str	r2, [r5, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	f7ff face 	bl	8000504 <_write>
 8000f68:	1c43      	adds	r3, r0, #1
 8000f6a:	d102      	bne.n	8000f72 <_write_r+0x1e>
 8000f6c:	682b      	ldr	r3, [r5, #0]
 8000f6e:	b103      	cbz	r3, 8000f72 <_write_r+0x1e>
 8000f70:	6023      	str	r3, [r4, #0]
 8000f72:	bd38      	pop	{r3, r4, r5, pc}
 8000f74:	200001d4 	.word	0x200001d4

08000f78 <__errno>:
 8000f78:	4b01      	ldr	r3, [pc, #4]	@ (8000f80 <__errno+0x8>)
 8000f7a:	6818      	ldr	r0, [r3, #0]
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000024 	.word	0x20000024

08000f84 <__libc_init_array>:
 8000f84:	b570      	push	{r4, r5, r6, lr}
 8000f86:	4d0d      	ldr	r5, [pc, #52]	@ (8000fbc <__libc_init_array+0x38>)
 8000f88:	4c0d      	ldr	r4, [pc, #52]	@ (8000fc0 <__libc_init_array+0x3c>)
 8000f8a:	1b64      	subs	r4, r4, r5
 8000f8c:	10a4      	asrs	r4, r4, #2
 8000f8e:	2600      	movs	r6, #0
 8000f90:	42a6      	cmp	r6, r4
 8000f92:	d109      	bne.n	8000fa8 <__libc_init_array+0x24>
 8000f94:	4d0b      	ldr	r5, [pc, #44]	@ (8000fc4 <__libc_init_array+0x40>)
 8000f96:	4c0c      	ldr	r4, [pc, #48]	@ (8000fc8 <__libc_init_array+0x44>)
 8000f98:	f000 fdb8 	bl	8001b0c <_init>
 8000f9c:	1b64      	subs	r4, r4, r5
 8000f9e:	10a4      	asrs	r4, r4, #2
 8000fa0:	2600      	movs	r6, #0
 8000fa2:	42a6      	cmp	r6, r4
 8000fa4:	d105      	bne.n	8000fb2 <__libc_init_array+0x2e>
 8000fa6:	bd70      	pop	{r4, r5, r6, pc}
 8000fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fac:	4798      	blx	r3
 8000fae:	3601      	adds	r6, #1
 8000fb0:	e7ee      	b.n	8000f90 <__libc_init_array+0xc>
 8000fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fb6:	4798      	blx	r3
 8000fb8:	3601      	adds	r6, #1
 8000fba:	e7f2      	b.n	8000fa2 <__libc_init_array+0x1e>
 8000fbc:	08001b70 	.word	0x08001b70
 8000fc0:	08001b70 	.word	0x08001b70
 8000fc4:	08001b70 	.word	0x08001b70
 8000fc8:	08001b74 	.word	0x08001b74

08000fcc <__retarget_lock_init_recursive>:
 8000fcc:	4770      	bx	lr

08000fce <__retarget_lock_acquire_recursive>:
 8000fce:	4770      	bx	lr

08000fd0 <__retarget_lock_release_recursive>:
 8000fd0:	4770      	bx	lr
	...

08000fd4 <_free_r>:
 8000fd4:	b538      	push	{r3, r4, r5, lr}
 8000fd6:	4605      	mov	r5, r0
 8000fd8:	2900      	cmp	r1, #0
 8000fda:	d041      	beq.n	8001060 <_free_r+0x8c>
 8000fdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fe0:	1f0c      	subs	r4, r1, #4
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	bfb8      	it	lt
 8000fe6:	18e4      	addlt	r4, r4, r3
 8000fe8:	f000 f8e0 	bl	80011ac <__malloc_lock>
 8000fec:	4a1d      	ldr	r2, [pc, #116]	@ (8001064 <_free_r+0x90>)
 8000fee:	6813      	ldr	r3, [r2, #0]
 8000ff0:	b933      	cbnz	r3, 8001000 <_free_r+0x2c>
 8000ff2:	6063      	str	r3, [r4, #4]
 8000ff4:	6014      	str	r4, [r2, #0]
 8000ff6:	4628      	mov	r0, r5
 8000ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ffc:	f000 b8dc 	b.w	80011b8 <__malloc_unlock>
 8001000:	42a3      	cmp	r3, r4
 8001002:	d908      	bls.n	8001016 <_free_r+0x42>
 8001004:	6820      	ldr	r0, [r4, #0]
 8001006:	1821      	adds	r1, r4, r0
 8001008:	428b      	cmp	r3, r1
 800100a:	bf01      	itttt	eq
 800100c:	6819      	ldreq	r1, [r3, #0]
 800100e:	685b      	ldreq	r3, [r3, #4]
 8001010:	1809      	addeq	r1, r1, r0
 8001012:	6021      	streq	r1, [r4, #0]
 8001014:	e7ed      	b.n	8000ff2 <_free_r+0x1e>
 8001016:	461a      	mov	r2, r3
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	b10b      	cbz	r3, 8001020 <_free_r+0x4c>
 800101c:	42a3      	cmp	r3, r4
 800101e:	d9fa      	bls.n	8001016 <_free_r+0x42>
 8001020:	6811      	ldr	r1, [r2, #0]
 8001022:	1850      	adds	r0, r2, r1
 8001024:	42a0      	cmp	r0, r4
 8001026:	d10b      	bne.n	8001040 <_free_r+0x6c>
 8001028:	6820      	ldr	r0, [r4, #0]
 800102a:	4401      	add	r1, r0
 800102c:	1850      	adds	r0, r2, r1
 800102e:	4283      	cmp	r3, r0
 8001030:	6011      	str	r1, [r2, #0]
 8001032:	d1e0      	bne.n	8000ff6 <_free_r+0x22>
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	6053      	str	r3, [r2, #4]
 800103a:	4408      	add	r0, r1
 800103c:	6010      	str	r0, [r2, #0]
 800103e:	e7da      	b.n	8000ff6 <_free_r+0x22>
 8001040:	d902      	bls.n	8001048 <_free_r+0x74>
 8001042:	230c      	movs	r3, #12
 8001044:	602b      	str	r3, [r5, #0]
 8001046:	e7d6      	b.n	8000ff6 <_free_r+0x22>
 8001048:	6820      	ldr	r0, [r4, #0]
 800104a:	1821      	adds	r1, r4, r0
 800104c:	428b      	cmp	r3, r1
 800104e:	bf04      	itt	eq
 8001050:	6819      	ldreq	r1, [r3, #0]
 8001052:	685b      	ldreq	r3, [r3, #4]
 8001054:	6063      	str	r3, [r4, #4]
 8001056:	bf04      	itt	eq
 8001058:	1809      	addeq	r1, r1, r0
 800105a:	6021      	streq	r1, [r4, #0]
 800105c:	6054      	str	r4, [r2, #4]
 800105e:	e7ca      	b.n	8000ff6 <_free_r+0x22>
 8001060:	bd38      	pop	{r3, r4, r5, pc}
 8001062:	bf00      	nop
 8001064:	200001e0 	.word	0x200001e0

08001068 <sbrk_aligned>:
 8001068:	b570      	push	{r4, r5, r6, lr}
 800106a:	4e0f      	ldr	r6, [pc, #60]	@ (80010a8 <sbrk_aligned+0x40>)
 800106c:	460c      	mov	r4, r1
 800106e:	6831      	ldr	r1, [r6, #0]
 8001070:	4605      	mov	r5, r0
 8001072:	b911      	cbnz	r1, 800107a <sbrk_aligned+0x12>
 8001074:	f000 fcb6 	bl	80019e4 <_sbrk_r>
 8001078:	6030      	str	r0, [r6, #0]
 800107a:	4621      	mov	r1, r4
 800107c:	4628      	mov	r0, r5
 800107e:	f000 fcb1 	bl	80019e4 <_sbrk_r>
 8001082:	1c43      	adds	r3, r0, #1
 8001084:	d103      	bne.n	800108e <sbrk_aligned+0x26>
 8001086:	f04f 34ff 	mov.w	r4, #4294967295
 800108a:	4620      	mov	r0, r4
 800108c:	bd70      	pop	{r4, r5, r6, pc}
 800108e:	1cc4      	adds	r4, r0, #3
 8001090:	f024 0403 	bic.w	r4, r4, #3
 8001094:	42a0      	cmp	r0, r4
 8001096:	d0f8      	beq.n	800108a <sbrk_aligned+0x22>
 8001098:	1a21      	subs	r1, r4, r0
 800109a:	4628      	mov	r0, r5
 800109c:	f000 fca2 	bl	80019e4 <_sbrk_r>
 80010a0:	3001      	adds	r0, #1
 80010a2:	d1f2      	bne.n	800108a <sbrk_aligned+0x22>
 80010a4:	e7ef      	b.n	8001086 <sbrk_aligned+0x1e>
 80010a6:	bf00      	nop
 80010a8:	200001dc 	.word	0x200001dc

080010ac <_malloc_r>:
 80010ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010b0:	1ccd      	adds	r5, r1, #3
 80010b2:	f025 0503 	bic.w	r5, r5, #3
 80010b6:	3508      	adds	r5, #8
 80010b8:	2d0c      	cmp	r5, #12
 80010ba:	bf38      	it	cc
 80010bc:	250c      	movcc	r5, #12
 80010be:	2d00      	cmp	r5, #0
 80010c0:	4606      	mov	r6, r0
 80010c2:	db01      	blt.n	80010c8 <_malloc_r+0x1c>
 80010c4:	42a9      	cmp	r1, r5
 80010c6:	d904      	bls.n	80010d2 <_malloc_r+0x26>
 80010c8:	230c      	movs	r3, #12
 80010ca:	6033      	str	r3, [r6, #0]
 80010cc:	2000      	movs	r0, #0
 80010ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80011a8 <_malloc_r+0xfc>
 80010d6:	f000 f869 	bl	80011ac <__malloc_lock>
 80010da:	f8d8 3000 	ldr.w	r3, [r8]
 80010de:	461c      	mov	r4, r3
 80010e0:	bb44      	cbnz	r4, 8001134 <_malloc_r+0x88>
 80010e2:	4629      	mov	r1, r5
 80010e4:	4630      	mov	r0, r6
 80010e6:	f7ff ffbf 	bl	8001068 <sbrk_aligned>
 80010ea:	1c43      	adds	r3, r0, #1
 80010ec:	4604      	mov	r4, r0
 80010ee:	d158      	bne.n	80011a2 <_malloc_r+0xf6>
 80010f0:	f8d8 4000 	ldr.w	r4, [r8]
 80010f4:	4627      	mov	r7, r4
 80010f6:	2f00      	cmp	r7, #0
 80010f8:	d143      	bne.n	8001182 <_malloc_r+0xd6>
 80010fa:	2c00      	cmp	r4, #0
 80010fc:	d04b      	beq.n	8001196 <_malloc_r+0xea>
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	4639      	mov	r1, r7
 8001102:	4630      	mov	r0, r6
 8001104:	eb04 0903 	add.w	r9, r4, r3
 8001108:	f000 fc6c 	bl	80019e4 <_sbrk_r>
 800110c:	4581      	cmp	r9, r0
 800110e:	d142      	bne.n	8001196 <_malloc_r+0xea>
 8001110:	6821      	ldr	r1, [r4, #0]
 8001112:	1a6d      	subs	r5, r5, r1
 8001114:	4629      	mov	r1, r5
 8001116:	4630      	mov	r0, r6
 8001118:	f7ff ffa6 	bl	8001068 <sbrk_aligned>
 800111c:	3001      	adds	r0, #1
 800111e:	d03a      	beq.n	8001196 <_malloc_r+0xea>
 8001120:	6823      	ldr	r3, [r4, #0]
 8001122:	442b      	add	r3, r5
 8001124:	6023      	str	r3, [r4, #0]
 8001126:	f8d8 3000 	ldr.w	r3, [r8]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	bb62      	cbnz	r2, 8001188 <_malloc_r+0xdc>
 800112e:	f8c8 7000 	str.w	r7, [r8]
 8001132:	e00f      	b.n	8001154 <_malloc_r+0xa8>
 8001134:	6822      	ldr	r2, [r4, #0]
 8001136:	1b52      	subs	r2, r2, r5
 8001138:	d420      	bmi.n	800117c <_malloc_r+0xd0>
 800113a:	2a0b      	cmp	r2, #11
 800113c:	d917      	bls.n	800116e <_malloc_r+0xc2>
 800113e:	1961      	adds	r1, r4, r5
 8001140:	42a3      	cmp	r3, r4
 8001142:	6025      	str	r5, [r4, #0]
 8001144:	bf18      	it	ne
 8001146:	6059      	strne	r1, [r3, #4]
 8001148:	6863      	ldr	r3, [r4, #4]
 800114a:	bf08      	it	eq
 800114c:	f8c8 1000 	streq.w	r1, [r8]
 8001150:	5162      	str	r2, [r4, r5]
 8001152:	604b      	str	r3, [r1, #4]
 8001154:	4630      	mov	r0, r6
 8001156:	f000 f82f 	bl	80011b8 <__malloc_unlock>
 800115a:	f104 000b 	add.w	r0, r4, #11
 800115e:	1d23      	adds	r3, r4, #4
 8001160:	f020 0007 	bic.w	r0, r0, #7
 8001164:	1ac2      	subs	r2, r0, r3
 8001166:	bf1c      	itt	ne
 8001168:	1a1b      	subne	r3, r3, r0
 800116a:	50a3      	strne	r3, [r4, r2]
 800116c:	e7af      	b.n	80010ce <_malloc_r+0x22>
 800116e:	6862      	ldr	r2, [r4, #4]
 8001170:	42a3      	cmp	r3, r4
 8001172:	bf0c      	ite	eq
 8001174:	f8c8 2000 	streq.w	r2, [r8]
 8001178:	605a      	strne	r2, [r3, #4]
 800117a:	e7eb      	b.n	8001154 <_malloc_r+0xa8>
 800117c:	4623      	mov	r3, r4
 800117e:	6864      	ldr	r4, [r4, #4]
 8001180:	e7ae      	b.n	80010e0 <_malloc_r+0x34>
 8001182:	463c      	mov	r4, r7
 8001184:	687f      	ldr	r7, [r7, #4]
 8001186:	e7b6      	b.n	80010f6 <_malloc_r+0x4a>
 8001188:	461a      	mov	r2, r3
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	42a3      	cmp	r3, r4
 800118e:	d1fb      	bne.n	8001188 <_malloc_r+0xdc>
 8001190:	2300      	movs	r3, #0
 8001192:	6053      	str	r3, [r2, #4]
 8001194:	e7de      	b.n	8001154 <_malloc_r+0xa8>
 8001196:	230c      	movs	r3, #12
 8001198:	6033      	str	r3, [r6, #0]
 800119a:	4630      	mov	r0, r6
 800119c:	f000 f80c 	bl	80011b8 <__malloc_unlock>
 80011a0:	e794      	b.n	80010cc <_malloc_r+0x20>
 80011a2:	6005      	str	r5, [r0, #0]
 80011a4:	e7d6      	b.n	8001154 <_malloc_r+0xa8>
 80011a6:	bf00      	nop
 80011a8:	200001e0 	.word	0x200001e0

080011ac <__malloc_lock>:
 80011ac:	4801      	ldr	r0, [pc, #4]	@ (80011b4 <__malloc_lock+0x8>)
 80011ae:	f7ff bf0e 	b.w	8000fce <__retarget_lock_acquire_recursive>
 80011b2:	bf00      	nop
 80011b4:	200001d8 	.word	0x200001d8

080011b8 <__malloc_unlock>:
 80011b8:	4801      	ldr	r0, [pc, #4]	@ (80011c0 <__malloc_unlock+0x8>)
 80011ba:	f7ff bf09 	b.w	8000fd0 <__retarget_lock_release_recursive>
 80011be:	bf00      	nop
 80011c0:	200001d8 	.word	0x200001d8

080011c4 <__sfputc_r>:
 80011c4:	6893      	ldr	r3, [r2, #8]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	b410      	push	{r4}
 80011cc:	6093      	str	r3, [r2, #8]
 80011ce:	da08      	bge.n	80011e2 <__sfputc_r+0x1e>
 80011d0:	6994      	ldr	r4, [r2, #24]
 80011d2:	42a3      	cmp	r3, r4
 80011d4:	db01      	blt.n	80011da <__sfputc_r+0x16>
 80011d6:	290a      	cmp	r1, #10
 80011d8:	d103      	bne.n	80011e2 <__sfputc_r+0x1e>
 80011da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011de:	f000 bb6d 	b.w	80018bc <__swbuf_r>
 80011e2:	6813      	ldr	r3, [r2, #0]
 80011e4:	1c58      	adds	r0, r3, #1
 80011e6:	6010      	str	r0, [r2, #0]
 80011e8:	7019      	strb	r1, [r3, #0]
 80011ea:	4608      	mov	r0, r1
 80011ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <__sfputs_r>:
 80011f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011f4:	4606      	mov	r6, r0
 80011f6:	460f      	mov	r7, r1
 80011f8:	4614      	mov	r4, r2
 80011fa:	18d5      	adds	r5, r2, r3
 80011fc:	42ac      	cmp	r4, r5
 80011fe:	d101      	bne.n	8001204 <__sfputs_r+0x12>
 8001200:	2000      	movs	r0, #0
 8001202:	e007      	b.n	8001214 <__sfputs_r+0x22>
 8001204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001208:	463a      	mov	r2, r7
 800120a:	4630      	mov	r0, r6
 800120c:	f7ff ffda 	bl	80011c4 <__sfputc_r>
 8001210:	1c43      	adds	r3, r0, #1
 8001212:	d1f3      	bne.n	80011fc <__sfputs_r+0xa>
 8001214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001218 <_vfiprintf_r>:
 8001218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800121c:	460d      	mov	r5, r1
 800121e:	b09d      	sub	sp, #116	@ 0x74
 8001220:	4614      	mov	r4, r2
 8001222:	4698      	mov	r8, r3
 8001224:	4606      	mov	r6, r0
 8001226:	b118      	cbz	r0, 8001230 <_vfiprintf_r+0x18>
 8001228:	6a03      	ldr	r3, [r0, #32]
 800122a:	b90b      	cbnz	r3, 8001230 <_vfiprintf_r+0x18>
 800122c:	f7ff fdca 	bl	8000dc4 <__sinit>
 8001230:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001232:	07d9      	lsls	r1, r3, #31
 8001234:	d405      	bmi.n	8001242 <_vfiprintf_r+0x2a>
 8001236:	89ab      	ldrh	r3, [r5, #12]
 8001238:	059a      	lsls	r2, r3, #22
 800123a:	d402      	bmi.n	8001242 <_vfiprintf_r+0x2a>
 800123c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800123e:	f7ff fec6 	bl	8000fce <__retarget_lock_acquire_recursive>
 8001242:	89ab      	ldrh	r3, [r5, #12]
 8001244:	071b      	lsls	r3, r3, #28
 8001246:	d501      	bpl.n	800124c <_vfiprintf_r+0x34>
 8001248:	692b      	ldr	r3, [r5, #16]
 800124a:	b99b      	cbnz	r3, 8001274 <_vfiprintf_r+0x5c>
 800124c:	4629      	mov	r1, r5
 800124e:	4630      	mov	r0, r6
 8001250:	f000 fb72 	bl	8001938 <__swsetup_r>
 8001254:	b170      	cbz	r0, 8001274 <_vfiprintf_r+0x5c>
 8001256:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001258:	07dc      	lsls	r4, r3, #31
 800125a:	d504      	bpl.n	8001266 <_vfiprintf_r+0x4e>
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	b01d      	add	sp, #116	@ 0x74
 8001262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001266:	89ab      	ldrh	r3, [r5, #12]
 8001268:	0598      	lsls	r0, r3, #22
 800126a:	d4f7      	bmi.n	800125c <_vfiprintf_r+0x44>
 800126c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800126e:	f7ff feaf 	bl	8000fd0 <__retarget_lock_release_recursive>
 8001272:	e7f3      	b.n	800125c <_vfiprintf_r+0x44>
 8001274:	2300      	movs	r3, #0
 8001276:	9309      	str	r3, [sp, #36]	@ 0x24
 8001278:	2320      	movs	r3, #32
 800127a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800127e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001282:	2330      	movs	r3, #48	@ 0x30
 8001284:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001434 <_vfiprintf_r+0x21c>
 8001288:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800128c:	f04f 0901 	mov.w	r9, #1
 8001290:	4623      	mov	r3, r4
 8001292:	469a      	mov	sl, r3
 8001294:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001298:	b10a      	cbz	r2, 800129e <_vfiprintf_r+0x86>
 800129a:	2a25      	cmp	r2, #37	@ 0x25
 800129c:	d1f9      	bne.n	8001292 <_vfiprintf_r+0x7a>
 800129e:	ebba 0b04 	subs.w	fp, sl, r4
 80012a2:	d00b      	beq.n	80012bc <_vfiprintf_r+0xa4>
 80012a4:	465b      	mov	r3, fp
 80012a6:	4622      	mov	r2, r4
 80012a8:	4629      	mov	r1, r5
 80012aa:	4630      	mov	r0, r6
 80012ac:	f7ff ffa1 	bl	80011f2 <__sfputs_r>
 80012b0:	3001      	adds	r0, #1
 80012b2:	f000 80a7 	beq.w	8001404 <_vfiprintf_r+0x1ec>
 80012b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80012b8:	445a      	add	r2, fp
 80012ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80012bc:	f89a 3000 	ldrb.w	r3, [sl]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 809f 	beq.w	8001404 <_vfiprintf_r+0x1ec>
 80012c6:	2300      	movs	r3, #0
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295
 80012cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80012d0:	f10a 0a01 	add.w	sl, sl, #1
 80012d4:	9304      	str	r3, [sp, #16]
 80012d6:	9307      	str	r3, [sp, #28]
 80012d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80012dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80012de:	4654      	mov	r4, sl
 80012e0:	2205      	movs	r2, #5
 80012e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012e6:	4853      	ldr	r0, [pc, #332]	@ (8001434 <_vfiprintf_r+0x21c>)
 80012e8:	f7fe ff92 	bl	8000210 <memchr>
 80012ec:	9a04      	ldr	r2, [sp, #16]
 80012ee:	b9d8      	cbnz	r0, 8001328 <_vfiprintf_r+0x110>
 80012f0:	06d1      	lsls	r1, r2, #27
 80012f2:	bf44      	itt	mi
 80012f4:	2320      	movmi	r3, #32
 80012f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80012fa:	0713      	lsls	r3, r2, #28
 80012fc:	bf44      	itt	mi
 80012fe:	232b      	movmi	r3, #43	@ 0x2b
 8001300:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001304:	f89a 3000 	ldrb.w	r3, [sl]
 8001308:	2b2a      	cmp	r3, #42	@ 0x2a
 800130a:	d015      	beq.n	8001338 <_vfiprintf_r+0x120>
 800130c:	9a07      	ldr	r2, [sp, #28]
 800130e:	4654      	mov	r4, sl
 8001310:	2000      	movs	r0, #0
 8001312:	f04f 0c0a 	mov.w	ip, #10
 8001316:	4621      	mov	r1, r4
 8001318:	f811 3b01 	ldrb.w	r3, [r1], #1
 800131c:	3b30      	subs	r3, #48	@ 0x30
 800131e:	2b09      	cmp	r3, #9
 8001320:	d94b      	bls.n	80013ba <_vfiprintf_r+0x1a2>
 8001322:	b1b0      	cbz	r0, 8001352 <_vfiprintf_r+0x13a>
 8001324:	9207      	str	r2, [sp, #28]
 8001326:	e014      	b.n	8001352 <_vfiprintf_r+0x13a>
 8001328:	eba0 0308 	sub.w	r3, r0, r8
 800132c:	fa09 f303 	lsl.w	r3, r9, r3
 8001330:	4313      	orrs	r3, r2
 8001332:	9304      	str	r3, [sp, #16]
 8001334:	46a2      	mov	sl, r4
 8001336:	e7d2      	b.n	80012de <_vfiprintf_r+0xc6>
 8001338:	9b03      	ldr	r3, [sp, #12]
 800133a:	1d19      	adds	r1, r3, #4
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	9103      	str	r1, [sp, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	bfbb      	ittet	lt
 8001344:	425b      	neglt	r3, r3
 8001346:	f042 0202 	orrlt.w	r2, r2, #2
 800134a:	9307      	strge	r3, [sp, #28]
 800134c:	9307      	strlt	r3, [sp, #28]
 800134e:	bfb8      	it	lt
 8001350:	9204      	strlt	r2, [sp, #16]
 8001352:	7823      	ldrb	r3, [r4, #0]
 8001354:	2b2e      	cmp	r3, #46	@ 0x2e
 8001356:	d10a      	bne.n	800136e <_vfiprintf_r+0x156>
 8001358:	7863      	ldrb	r3, [r4, #1]
 800135a:	2b2a      	cmp	r3, #42	@ 0x2a
 800135c:	d132      	bne.n	80013c4 <_vfiprintf_r+0x1ac>
 800135e:	9b03      	ldr	r3, [sp, #12]
 8001360:	1d1a      	adds	r2, r3, #4
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	9203      	str	r2, [sp, #12]
 8001366:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800136a:	3402      	adds	r4, #2
 800136c:	9305      	str	r3, [sp, #20]
 800136e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001444 <_vfiprintf_r+0x22c>
 8001372:	7821      	ldrb	r1, [r4, #0]
 8001374:	2203      	movs	r2, #3
 8001376:	4650      	mov	r0, sl
 8001378:	f7fe ff4a 	bl	8000210 <memchr>
 800137c:	b138      	cbz	r0, 800138e <_vfiprintf_r+0x176>
 800137e:	9b04      	ldr	r3, [sp, #16]
 8001380:	eba0 000a 	sub.w	r0, r0, sl
 8001384:	2240      	movs	r2, #64	@ 0x40
 8001386:	4082      	lsls	r2, r0
 8001388:	4313      	orrs	r3, r2
 800138a:	3401      	adds	r4, #1
 800138c:	9304      	str	r3, [sp, #16]
 800138e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001392:	4829      	ldr	r0, [pc, #164]	@ (8001438 <_vfiprintf_r+0x220>)
 8001394:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001398:	2206      	movs	r2, #6
 800139a:	f7fe ff39 	bl	8000210 <memchr>
 800139e:	2800      	cmp	r0, #0
 80013a0:	d03f      	beq.n	8001422 <_vfiprintf_r+0x20a>
 80013a2:	4b26      	ldr	r3, [pc, #152]	@ (800143c <_vfiprintf_r+0x224>)
 80013a4:	bb1b      	cbnz	r3, 80013ee <_vfiprintf_r+0x1d6>
 80013a6:	9b03      	ldr	r3, [sp, #12]
 80013a8:	3307      	adds	r3, #7
 80013aa:	f023 0307 	bic.w	r3, r3, #7
 80013ae:	3308      	adds	r3, #8
 80013b0:	9303      	str	r3, [sp, #12]
 80013b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80013b4:	443b      	add	r3, r7
 80013b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80013b8:	e76a      	b.n	8001290 <_vfiprintf_r+0x78>
 80013ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80013be:	460c      	mov	r4, r1
 80013c0:	2001      	movs	r0, #1
 80013c2:	e7a8      	b.n	8001316 <_vfiprintf_r+0xfe>
 80013c4:	2300      	movs	r3, #0
 80013c6:	3401      	adds	r4, #1
 80013c8:	9305      	str	r3, [sp, #20]
 80013ca:	4619      	mov	r1, r3
 80013cc:	f04f 0c0a 	mov.w	ip, #10
 80013d0:	4620      	mov	r0, r4
 80013d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80013d6:	3a30      	subs	r2, #48	@ 0x30
 80013d8:	2a09      	cmp	r2, #9
 80013da:	d903      	bls.n	80013e4 <_vfiprintf_r+0x1cc>
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0c6      	beq.n	800136e <_vfiprintf_r+0x156>
 80013e0:	9105      	str	r1, [sp, #20]
 80013e2:	e7c4      	b.n	800136e <_vfiprintf_r+0x156>
 80013e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80013e8:	4604      	mov	r4, r0
 80013ea:	2301      	movs	r3, #1
 80013ec:	e7f0      	b.n	80013d0 <_vfiprintf_r+0x1b8>
 80013ee:	ab03      	add	r3, sp, #12
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	462a      	mov	r2, r5
 80013f4:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <_vfiprintf_r+0x228>)
 80013f6:	a904      	add	r1, sp, #16
 80013f8:	4630      	mov	r0, r6
 80013fa:	f3af 8000 	nop.w
 80013fe:	4607      	mov	r7, r0
 8001400:	1c78      	adds	r0, r7, #1
 8001402:	d1d6      	bne.n	80013b2 <_vfiprintf_r+0x19a>
 8001404:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001406:	07d9      	lsls	r1, r3, #31
 8001408:	d405      	bmi.n	8001416 <_vfiprintf_r+0x1fe>
 800140a:	89ab      	ldrh	r3, [r5, #12]
 800140c:	059a      	lsls	r2, r3, #22
 800140e:	d402      	bmi.n	8001416 <_vfiprintf_r+0x1fe>
 8001410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001412:	f7ff fddd 	bl	8000fd0 <__retarget_lock_release_recursive>
 8001416:	89ab      	ldrh	r3, [r5, #12]
 8001418:	065b      	lsls	r3, r3, #25
 800141a:	f53f af1f 	bmi.w	800125c <_vfiprintf_r+0x44>
 800141e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001420:	e71e      	b.n	8001260 <_vfiprintf_r+0x48>
 8001422:	ab03      	add	r3, sp, #12
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	462a      	mov	r2, r5
 8001428:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <_vfiprintf_r+0x228>)
 800142a:	a904      	add	r1, sp, #16
 800142c:	4630      	mov	r0, r6
 800142e:	f000 f879 	bl	8001524 <_printf_i>
 8001432:	e7e4      	b.n	80013fe <_vfiprintf_r+0x1e6>
 8001434:	08001b35 	.word	0x08001b35
 8001438:	08001b3f 	.word	0x08001b3f
 800143c:	00000000 	.word	0x00000000
 8001440:	080011f3 	.word	0x080011f3
 8001444:	08001b3b 	.word	0x08001b3b

08001448 <_printf_common>:
 8001448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800144c:	4616      	mov	r6, r2
 800144e:	4698      	mov	r8, r3
 8001450:	688a      	ldr	r2, [r1, #8]
 8001452:	690b      	ldr	r3, [r1, #16]
 8001454:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001458:	4293      	cmp	r3, r2
 800145a:	bfb8      	it	lt
 800145c:	4613      	movlt	r3, r2
 800145e:	6033      	str	r3, [r6, #0]
 8001460:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001464:	4607      	mov	r7, r0
 8001466:	460c      	mov	r4, r1
 8001468:	b10a      	cbz	r2, 800146e <_printf_common+0x26>
 800146a:	3301      	adds	r3, #1
 800146c:	6033      	str	r3, [r6, #0]
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	0699      	lsls	r1, r3, #26
 8001472:	bf42      	ittt	mi
 8001474:	6833      	ldrmi	r3, [r6, #0]
 8001476:	3302      	addmi	r3, #2
 8001478:	6033      	strmi	r3, [r6, #0]
 800147a:	6825      	ldr	r5, [r4, #0]
 800147c:	f015 0506 	ands.w	r5, r5, #6
 8001480:	d106      	bne.n	8001490 <_printf_common+0x48>
 8001482:	f104 0a19 	add.w	sl, r4, #25
 8001486:	68e3      	ldr	r3, [r4, #12]
 8001488:	6832      	ldr	r2, [r6, #0]
 800148a:	1a9b      	subs	r3, r3, r2
 800148c:	42ab      	cmp	r3, r5
 800148e:	dc26      	bgt.n	80014de <_printf_common+0x96>
 8001490:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001494:	6822      	ldr	r2, [r4, #0]
 8001496:	3b00      	subs	r3, #0
 8001498:	bf18      	it	ne
 800149a:	2301      	movne	r3, #1
 800149c:	0692      	lsls	r2, r2, #26
 800149e:	d42b      	bmi.n	80014f8 <_printf_common+0xb0>
 80014a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80014a4:	4641      	mov	r1, r8
 80014a6:	4638      	mov	r0, r7
 80014a8:	47c8      	blx	r9
 80014aa:	3001      	adds	r0, #1
 80014ac:	d01e      	beq.n	80014ec <_printf_common+0xa4>
 80014ae:	6823      	ldr	r3, [r4, #0]
 80014b0:	6922      	ldr	r2, [r4, #16]
 80014b2:	f003 0306 	and.w	r3, r3, #6
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf02      	ittt	eq
 80014ba:	68e5      	ldreq	r5, [r4, #12]
 80014bc:	6833      	ldreq	r3, [r6, #0]
 80014be:	1aed      	subeq	r5, r5, r3
 80014c0:	68a3      	ldr	r3, [r4, #8]
 80014c2:	bf0c      	ite	eq
 80014c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80014c8:	2500      	movne	r5, #0
 80014ca:	4293      	cmp	r3, r2
 80014cc:	bfc4      	itt	gt
 80014ce:	1a9b      	subgt	r3, r3, r2
 80014d0:	18ed      	addgt	r5, r5, r3
 80014d2:	2600      	movs	r6, #0
 80014d4:	341a      	adds	r4, #26
 80014d6:	42b5      	cmp	r5, r6
 80014d8:	d11a      	bne.n	8001510 <_printf_common+0xc8>
 80014da:	2000      	movs	r0, #0
 80014dc:	e008      	b.n	80014f0 <_printf_common+0xa8>
 80014de:	2301      	movs	r3, #1
 80014e0:	4652      	mov	r2, sl
 80014e2:	4641      	mov	r1, r8
 80014e4:	4638      	mov	r0, r7
 80014e6:	47c8      	blx	r9
 80014e8:	3001      	adds	r0, #1
 80014ea:	d103      	bne.n	80014f4 <_printf_common+0xac>
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
 80014f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014f4:	3501      	adds	r5, #1
 80014f6:	e7c6      	b.n	8001486 <_printf_common+0x3e>
 80014f8:	18e1      	adds	r1, r4, r3
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	2030      	movs	r0, #48	@ 0x30
 80014fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001502:	4422      	add	r2, r4
 8001504:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001508:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800150c:	3302      	adds	r3, #2
 800150e:	e7c7      	b.n	80014a0 <_printf_common+0x58>
 8001510:	2301      	movs	r3, #1
 8001512:	4622      	mov	r2, r4
 8001514:	4641      	mov	r1, r8
 8001516:	4638      	mov	r0, r7
 8001518:	47c8      	blx	r9
 800151a:	3001      	adds	r0, #1
 800151c:	d0e6      	beq.n	80014ec <_printf_common+0xa4>
 800151e:	3601      	adds	r6, #1
 8001520:	e7d9      	b.n	80014d6 <_printf_common+0x8e>
	...

08001524 <_printf_i>:
 8001524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001528:	7e0f      	ldrb	r7, [r1, #24]
 800152a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800152c:	2f78      	cmp	r7, #120	@ 0x78
 800152e:	4691      	mov	r9, r2
 8001530:	4680      	mov	r8, r0
 8001532:	460c      	mov	r4, r1
 8001534:	469a      	mov	sl, r3
 8001536:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800153a:	d807      	bhi.n	800154c <_printf_i+0x28>
 800153c:	2f62      	cmp	r7, #98	@ 0x62
 800153e:	d80a      	bhi.n	8001556 <_printf_i+0x32>
 8001540:	2f00      	cmp	r7, #0
 8001542:	f000 80d2 	beq.w	80016ea <_printf_i+0x1c6>
 8001546:	2f58      	cmp	r7, #88	@ 0x58
 8001548:	f000 80b9 	beq.w	80016be <_printf_i+0x19a>
 800154c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001550:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001554:	e03a      	b.n	80015cc <_printf_i+0xa8>
 8001556:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800155a:	2b15      	cmp	r3, #21
 800155c:	d8f6      	bhi.n	800154c <_printf_i+0x28>
 800155e:	a101      	add	r1, pc, #4	@ (adr r1, 8001564 <_printf_i+0x40>)
 8001560:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001564:	080015bd 	.word	0x080015bd
 8001568:	080015d1 	.word	0x080015d1
 800156c:	0800154d 	.word	0x0800154d
 8001570:	0800154d 	.word	0x0800154d
 8001574:	0800154d 	.word	0x0800154d
 8001578:	0800154d 	.word	0x0800154d
 800157c:	080015d1 	.word	0x080015d1
 8001580:	0800154d 	.word	0x0800154d
 8001584:	0800154d 	.word	0x0800154d
 8001588:	0800154d 	.word	0x0800154d
 800158c:	0800154d 	.word	0x0800154d
 8001590:	080016d1 	.word	0x080016d1
 8001594:	080015fb 	.word	0x080015fb
 8001598:	0800168b 	.word	0x0800168b
 800159c:	0800154d 	.word	0x0800154d
 80015a0:	0800154d 	.word	0x0800154d
 80015a4:	080016f3 	.word	0x080016f3
 80015a8:	0800154d 	.word	0x0800154d
 80015ac:	080015fb 	.word	0x080015fb
 80015b0:	0800154d 	.word	0x0800154d
 80015b4:	0800154d 	.word	0x0800154d
 80015b8:	08001693 	.word	0x08001693
 80015bc:	6833      	ldr	r3, [r6, #0]
 80015be:	1d1a      	adds	r2, r3, #4
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6032      	str	r2, [r6, #0]
 80015c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80015c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80015cc:	2301      	movs	r3, #1
 80015ce:	e09d      	b.n	800170c <_printf_i+0x1e8>
 80015d0:	6833      	ldr	r3, [r6, #0]
 80015d2:	6820      	ldr	r0, [r4, #0]
 80015d4:	1d19      	adds	r1, r3, #4
 80015d6:	6031      	str	r1, [r6, #0]
 80015d8:	0606      	lsls	r6, r0, #24
 80015da:	d501      	bpl.n	80015e0 <_printf_i+0xbc>
 80015dc:	681d      	ldr	r5, [r3, #0]
 80015de:	e003      	b.n	80015e8 <_printf_i+0xc4>
 80015e0:	0645      	lsls	r5, r0, #25
 80015e2:	d5fb      	bpl.n	80015dc <_printf_i+0xb8>
 80015e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80015e8:	2d00      	cmp	r5, #0
 80015ea:	da03      	bge.n	80015f4 <_printf_i+0xd0>
 80015ec:	232d      	movs	r3, #45	@ 0x2d
 80015ee:	426d      	negs	r5, r5
 80015f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80015f4:	4859      	ldr	r0, [pc, #356]	@ (800175c <_printf_i+0x238>)
 80015f6:	230a      	movs	r3, #10
 80015f8:	e011      	b.n	800161e <_printf_i+0xfa>
 80015fa:	6821      	ldr	r1, [r4, #0]
 80015fc:	6833      	ldr	r3, [r6, #0]
 80015fe:	0608      	lsls	r0, r1, #24
 8001600:	f853 5b04 	ldr.w	r5, [r3], #4
 8001604:	d402      	bmi.n	800160c <_printf_i+0xe8>
 8001606:	0649      	lsls	r1, r1, #25
 8001608:	bf48      	it	mi
 800160a:	b2ad      	uxthmi	r5, r5
 800160c:	2f6f      	cmp	r7, #111	@ 0x6f
 800160e:	4853      	ldr	r0, [pc, #332]	@ (800175c <_printf_i+0x238>)
 8001610:	6033      	str	r3, [r6, #0]
 8001612:	bf14      	ite	ne
 8001614:	230a      	movne	r3, #10
 8001616:	2308      	moveq	r3, #8
 8001618:	2100      	movs	r1, #0
 800161a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800161e:	6866      	ldr	r6, [r4, #4]
 8001620:	60a6      	str	r6, [r4, #8]
 8001622:	2e00      	cmp	r6, #0
 8001624:	bfa2      	ittt	ge
 8001626:	6821      	ldrge	r1, [r4, #0]
 8001628:	f021 0104 	bicge.w	r1, r1, #4
 800162c:	6021      	strge	r1, [r4, #0]
 800162e:	b90d      	cbnz	r5, 8001634 <_printf_i+0x110>
 8001630:	2e00      	cmp	r6, #0
 8001632:	d04b      	beq.n	80016cc <_printf_i+0x1a8>
 8001634:	4616      	mov	r6, r2
 8001636:	fbb5 f1f3 	udiv	r1, r5, r3
 800163a:	fb03 5711 	mls	r7, r3, r1, r5
 800163e:	5dc7      	ldrb	r7, [r0, r7]
 8001640:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001644:	462f      	mov	r7, r5
 8001646:	42bb      	cmp	r3, r7
 8001648:	460d      	mov	r5, r1
 800164a:	d9f4      	bls.n	8001636 <_printf_i+0x112>
 800164c:	2b08      	cmp	r3, #8
 800164e:	d10b      	bne.n	8001668 <_printf_i+0x144>
 8001650:	6823      	ldr	r3, [r4, #0]
 8001652:	07df      	lsls	r7, r3, #31
 8001654:	d508      	bpl.n	8001668 <_printf_i+0x144>
 8001656:	6923      	ldr	r3, [r4, #16]
 8001658:	6861      	ldr	r1, [r4, #4]
 800165a:	4299      	cmp	r1, r3
 800165c:	bfde      	ittt	le
 800165e:	2330      	movle	r3, #48	@ 0x30
 8001660:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001664:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001668:	1b92      	subs	r2, r2, r6
 800166a:	6122      	str	r2, [r4, #16]
 800166c:	f8cd a000 	str.w	sl, [sp]
 8001670:	464b      	mov	r3, r9
 8001672:	aa03      	add	r2, sp, #12
 8001674:	4621      	mov	r1, r4
 8001676:	4640      	mov	r0, r8
 8001678:	f7ff fee6 	bl	8001448 <_printf_common>
 800167c:	3001      	adds	r0, #1
 800167e:	d14a      	bne.n	8001716 <_printf_i+0x1f2>
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	b004      	add	sp, #16
 8001686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800168a:	6823      	ldr	r3, [r4, #0]
 800168c:	f043 0320 	orr.w	r3, r3, #32
 8001690:	6023      	str	r3, [r4, #0]
 8001692:	4833      	ldr	r0, [pc, #204]	@ (8001760 <_printf_i+0x23c>)
 8001694:	2778      	movs	r7, #120	@ 0x78
 8001696:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800169a:	6823      	ldr	r3, [r4, #0]
 800169c:	6831      	ldr	r1, [r6, #0]
 800169e:	061f      	lsls	r7, r3, #24
 80016a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80016a4:	d402      	bmi.n	80016ac <_printf_i+0x188>
 80016a6:	065f      	lsls	r7, r3, #25
 80016a8:	bf48      	it	mi
 80016aa:	b2ad      	uxthmi	r5, r5
 80016ac:	6031      	str	r1, [r6, #0]
 80016ae:	07d9      	lsls	r1, r3, #31
 80016b0:	bf44      	itt	mi
 80016b2:	f043 0320 	orrmi.w	r3, r3, #32
 80016b6:	6023      	strmi	r3, [r4, #0]
 80016b8:	b11d      	cbz	r5, 80016c2 <_printf_i+0x19e>
 80016ba:	2310      	movs	r3, #16
 80016bc:	e7ac      	b.n	8001618 <_printf_i+0xf4>
 80016be:	4827      	ldr	r0, [pc, #156]	@ (800175c <_printf_i+0x238>)
 80016c0:	e7e9      	b.n	8001696 <_printf_i+0x172>
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	f023 0320 	bic.w	r3, r3, #32
 80016c8:	6023      	str	r3, [r4, #0]
 80016ca:	e7f6      	b.n	80016ba <_printf_i+0x196>
 80016cc:	4616      	mov	r6, r2
 80016ce:	e7bd      	b.n	800164c <_printf_i+0x128>
 80016d0:	6833      	ldr	r3, [r6, #0]
 80016d2:	6825      	ldr	r5, [r4, #0]
 80016d4:	6961      	ldr	r1, [r4, #20]
 80016d6:	1d18      	adds	r0, r3, #4
 80016d8:	6030      	str	r0, [r6, #0]
 80016da:	062e      	lsls	r6, r5, #24
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	d501      	bpl.n	80016e4 <_printf_i+0x1c0>
 80016e0:	6019      	str	r1, [r3, #0]
 80016e2:	e002      	b.n	80016ea <_printf_i+0x1c6>
 80016e4:	0668      	lsls	r0, r5, #25
 80016e6:	d5fb      	bpl.n	80016e0 <_printf_i+0x1bc>
 80016e8:	8019      	strh	r1, [r3, #0]
 80016ea:	2300      	movs	r3, #0
 80016ec:	6123      	str	r3, [r4, #16]
 80016ee:	4616      	mov	r6, r2
 80016f0:	e7bc      	b.n	800166c <_printf_i+0x148>
 80016f2:	6833      	ldr	r3, [r6, #0]
 80016f4:	1d1a      	adds	r2, r3, #4
 80016f6:	6032      	str	r2, [r6, #0]
 80016f8:	681e      	ldr	r6, [r3, #0]
 80016fa:	6862      	ldr	r2, [r4, #4]
 80016fc:	2100      	movs	r1, #0
 80016fe:	4630      	mov	r0, r6
 8001700:	f7fe fd86 	bl	8000210 <memchr>
 8001704:	b108      	cbz	r0, 800170a <_printf_i+0x1e6>
 8001706:	1b80      	subs	r0, r0, r6
 8001708:	6060      	str	r0, [r4, #4]
 800170a:	6863      	ldr	r3, [r4, #4]
 800170c:	6123      	str	r3, [r4, #16]
 800170e:	2300      	movs	r3, #0
 8001710:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001714:	e7aa      	b.n	800166c <_printf_i+0x148>
 8001716:	6923      	ldr	r3, [r4, #16]
 8001718:	4632      	mov	r2, r6
 800171a:	4649      	mov	r1, r9
 800171c:	4640      	mov	r0, r8
 800171e:	47d0      	blx	sl
 8001720:	3001      	adds	r0, #1
 8001722:	d0ad      	beq.n	8001680 <_printf_i+0x15c>
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	079b      	lsls	r3, r3, #30
 8001728:	d413      	bmi.n	8001752 <_printf_i+0x22e>
 800172a:	68e0      	ldr	r0, [r4, #12]
 800172c:	9b03      	ldr	r3, [sp, #12]
 800172e:	4298      	cmp	r0, r3
 8001730:	bfb8      	it	lt
 8001732:	4618      	movlt	r0, r3
 8001734:	e7a6      	b.n	8001684 <_printf_i+0x160>
 8001736:	2301      	movs	r3, #1
 8001738:	4632      	mov	r2, r6
 800173a:	4649      	mov	r1, r9
 800173c:	4640      	mov	r0, r8
 800173e:	47d0      	blx	sl
 8001740:	3001      	adds	r0, #1
 8001742:	d09d      	beq.n	8001680 <_printf_i+0x15c>
 8001744:	3501      	adds	r5, #1
 8001746:	68e3      	ldr	r3, [r4, #12]
 8001748:	9903      	ldr	r1, [sp, #12]
 800174a:	1a5b      	subs	r3, r3, r1
 800174c:	42ab      	cmp	r3, r5
 800174e:	dcf2      	bgt.n	8001736 <_printf_i+0x212>
 8001750:	e7eb      	b.n	800172a <_printf_i+0x206>
 8001752:	2500      	movs	r5, #0
 8001754:	f104 0619 	add.w	r6, r4, #25
 8001758:	e7f5      	b.n	8001746 <_printf_i+0x222>
 800175a:	bf00      	nop
 800175c:	08001b46 	.word	0x08001b46
 8001760:	08001b57 	.word	0x08001b57

08001764 <__sflush_r>:
 8001764:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800176c:	0716      	lsls	r6, r2, #28
 800176e:	4605      	mov	r5, r0
 8001770:	460c      	mov	r4, r1
 8001772:	d454      	bmi.n	800181e <__sflush_r+0xba>
 8001774:	684b      	ldr	r3, [r1, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	dc02      	bgt.n	8001780 <__sflush_r+0x1c>
 800177a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800177c:	2b00      	cmp	r3, #0
 800177e:	dd48      	ble.n	8001812 <__sflush_r+0xae>
 8001780:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001782:	2e00      	cmp	r6, #0
 8001784:	d045      	beq.n	8001812 <__sflush_r+0xae>
 8001786:	2300      	movs	r3, #0
 8001788:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800178c:	682f      	ldr	r7, [r5, #0]
 800178e:	6a21      	ldr	r1, [r4, #32]
 8001790:	602b      	str	r3, [r5, #0]
 8001792:	d030      	beq.n	80017f6 <__sflush_r+0x92>
 8001794:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001796:	89a3      	ldrh	r3, [r4, #12]
 8001798:	0759      	lsls	r1, r3, #29
 800179a:	d505      	bpl.n	80017a8 <__sflush_r+0x44>
 800179c:	6863      	ldr	r3, [r4, #4]
 800179e:	1ad2      	subs	r2, r2, r3
 80017a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80017a2:	b10b      	cbz	r3, 80017a8 <__sflush_r+0x44>
 80017a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80017a6:	1ad2      	subs	r2, r2, r3
 80017a8:	2300      	movs	r3, #0
 80017aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80017ac:	6a21      	ldr	r1, [r4, #32]
 80017ae:	4628      	mov	r0, r5
 80017b0:	47b0      	blx	r6
 80017b2:	1c43      	adds	r3, r0, #1
 80017b4:	89a3      	ldrh	r3, [r4, #12]
 80017b6:	d106      	bne.n	80017c6 <__sflush_r+0x62>
 80017b8:	6829      	ldr	r1, [r5, #0]
 80017ba:	291d      	cmp	r1, #29
 80017bc:	d82b      	bhi.n	8001816 <__sflush_r+0xb2>
 80017be:	4a2a      	ldr	r2, [pc, #168]	@ (8001868 <__sflush_r+0x104>)
 80017c0:	410a      	asrs	r2, r1
 80017c2:	07d6      	lsls	r6, r2, #31
 80017c4:	d427      	bmi.n	8001816 <__sflush_r+0xb2>
 80017c6:	2200      	movs	r2, #0
 80017c8:	6062      	str	r2, [r4, #4]
 80017ca:	04d9      	lsls	r1, r3, #19
 80017cc:	6922      	ldr	r2, [r4, #16]
 80017ce:	6022      	str	r2, [r4, #0]
 80017d0:	d504      	bpl.n	80017dc <__sflush_r+0x78>
 80017d2:	1c42      	adds	r2, r0, #1
 80017d4:	d101      	bne.n	80017da <__sflush_r+0x76>
 80017d6:	682b      	ldr	r3, [r5, #0]
 80017d8:	b903      	cbnz	r3, 80017dc <__sflush_r+0x78>
 80017da:	6560      	str	r0, [r4, #84]	@ 0x54
 80017dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80017de:	602f      	str	r7, [r5, #0]
 80017e0:	b1b9      	cbz	r1, 8001812 <__sflush_r+0xae>
 80017e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80017e6:	4299      	cmp	r1, r3
 80017e8:	d002      	beq.n	80017f0 <__sflush_r+0x8c>
 80017ea:	4628      	mov	r0, r5
 80017ec:	f7ff fbf2 	bl	8000fd4 <_free_r>
 80017f0:	2300      	movs	r3, #0
 80017f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80017f4:	e00d      	b.n	8001812 <__sflush_r+0xae>
 80017f6:	2301      	movs	r3, #1
 80017f8:	4628      	mov	r0, r5
 80017fa:	47b0      	blx	r6
 80017fc:	4602      	mov	r2, r0
 80017fe:	1c50      	adds	r0, r2, #1
 8001800:	d1c9      	bne.n	8001796 <__sflush_r+0x32>
 8001802:	682b      	ldr	r3, [r5, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0c6      	beq.n	8001796 <__sflush_r+0x32>
 8001808:	2b1d      	cmp	r3, #29
 800180a:	d001      	beq.n	8001810 <__sflush_r+0xac>
 800180c:	2b16      	cmp	r3, #22
 800180e:	d11e      	bne.n	800184e <__sflush_r+0xea>
 8001810:	602f      	str	r7, [r5, #0]
 8001812:	2000      	movs	r0, #0
 8001814:	e022      	b.n	800185c <__sflush_r+0xf8>
 8001816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800181a:	b21b      	sxth	r3, r3
 800181c:	e01b      	b.n	8001856 <__sflush_r+0xf2>
 800181e:	690f      	ldr	r7, [r1, #16]
 8001820:	2f00      	cmp	r7, #0
 8001822:	d0f6      	beq.n	8001812 <__sflush_r+0xae>
 8001824:	0793      	lsls	r3, r2, #30
 8001826:	680e      	ldr	r6, [r1, #0]
 8001828:	bf08      	it	eq
 800182a:	694b      	ldreq	r3, [r1, #20]
 800182c:	600f      	str	r7, [r1, #0]
 800182e:	bf18      	it	ne
 8001830:	2300      	movne	r3, #0
 8001832:	eba6 0807 	sub.w	r8, r6, r7
 8001836:	608b      	str	r3, [r1, #8]
 8001838:	f1b8 0f00 	cmp.w	r8, #0
 800183c:	dde9      	ble.n	8001812 <__sflush_r+0xae>
 800183e:	6a21      	ldr	r1, [r4, #32]
 8001840:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001842:	4643      	mov	r3, r8
 8001844:	463a      	mov	r2, r7
 8001846:	4628      	mov	r0, r5
 8001848:	47b0      	blx	r6
 800184a:	2800      	cmp	r0, #0
 800184c:	dc08      	bgt.n	8001860 <__sflush_r+0xfc>
 800184e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001856:	81a3      	strh	r3, [r4, #12]
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001860:	4407      	add	r7, r0
 8001862:	eba8 0800 	sub.w	r8, r8, r0
 8001866:	e7e7      	b.n	8001838 <__sflush_r+0xd4>
 8001868:	dfbffffe 	.word	0xdfbffffe

0800186c <_fflush_r>:
 800186c:	b538      	push	{r3, r4, r5, lr}
 800186e:	690b      	ldr	r3, [r1, #16]
 8001870:	4605      	mov	r5, r0
 8001872:	460c      	mov	r4, r1
 8001874:	b913      	cbnz	r3, 800187c <_fflush_r+0x10>
 8001876:	2500      	movs	r5, #0
 8001878:	4628      	mov	r0, r5
 800187a:	bd38      	pop	{r3, r4, r5, pc}
 800187c:	b118      	cbz	r0, 8001886 <_fflush_r+0x1a>
 800187e:	6a03      	ldr	r3, [r0, #32]
 8001880:	b90b      	cbnz	r3, 8001886 <_fflush_r+0x1a>
 8001882:	f7ff fa9f 	bl	8000dc4 <__sinit>
 8001886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f3      	beq.n	8001876 <_fflush_r+0xa>
 800188e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001890:	07d0      	lsls	r0, r2, #31
 8001892:	d404      	bmi.n	800189e <_fflush_r+0x32>
 8001894:	0599      	lsls	r1, r3, #22
 8001896:	d402      	bmi.n	800189e <_fflush_r+0x32>
 8001898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800189a:	f7ff fb98 	bl	8000fce <__retarget_lock_acquire_recursive>
 800189e:	4628      	mov	r0, r5
 80018a0:	4621      	mov	r1, r4
 80018a2:	f7ff ff5f 	bl	8001764 <__sflush_r>
 80018a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80018a8:	07da      	lsls	r2, r3, #31
 80018aa:	4605      	mov	r5, r0
 80018ac:	d4e4      	bmi.n	8001878 <_fflush_r+0xc>
 80018ae:	89a3      	ldrh	r3, [r4, #12]
 80018b0:	059b      	lsls	r3, r3, #22
 80018b2:	d4e1      	bmi.n	8001878 <_fflush_r+0xc>
 80018b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80018b6:	f7ff fb8b 	bl	8000fd0 <__retarget_lock_release_recursive>
 80018ba:	e7dd      	b.n	8001878 <_fflush_r+0xc>

080018bc <__swbuf_r>:
 80018bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018be:	460e      	mov	r6, r1
 80018c0:	4614      	mov	r4, r2
 80018c2:	4605      	mov	r5, r0
 80018c4:	b118      	cbz	r0, 80018ce <__swbuf_r+0x12>
 80018c6:	6a03      	ldr	r3, [r0, #32]
 80018c8:	b90b      	cbnz	r3, 80018ce <__swbuf_r+0x12>
 80018ca:	f7ff fa7b 	bl	8000dc4 <__sinit>
 80018ce:	69a3      	ldr	r3, [r4, #24]
 80018d0:	60a3      	str	r3, [r4, #8]
 80018d2:	89a3      	ldrh	r3, [r4, #12]
 80018d4:	071a      	lsls	r2, r3, #28
 80018d6:	d501      	bpl.n	80018dc <__swbuf_r+0x20>
 80018d8:	6923      	ldr	r3, [r4, #16]
 80018da:	b943      	cbnz	r3, 80018ee <__swbuf_r+0x32>
 80018dc:	4621      	mov	r1, r4
 80018de:	4628      	mov	r0, r5
 80018e0:	f000 f82a 	bl	8001938 <__swsetup_r>
 80018e4:	b118      	cbz	r0, 80018ee <__swbuf_r+0x32>
 80018e6:	f04f 37ff 	mov.w	r7, #4294967295
 80018ea:	4638      	mov	r0, r7
 80018ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	6922      	ldr	r2, [r4, #16]
 80018f2:	1a98      	subs	r0, r3, r2
 80018f4:	6963      	ldr	r3, [r4, #20]
 80018f6:	b2f6      	uxtb	r6, r6
 80018f8:	4283      	cmp	r3, r0
 80018fa:	4637      	mov	r7, r6
 80018fc:	dc05      	bgt.n	800190a <__swbuf_r+0x4e>
 80018fe:	4621      	mov	r1, r4
 8001900:	4628      	mov	r0, r5
 8001902:	f7ff ffb3 	bl	800186c <_fflush_r>
 8001906:	2800      	cmp	r0, #0
 8001908:	d1ed      	bne.n	80018e6 <__swbuf_r+0x2a>
 800190a:	68a3      	ldr	r3, [r4, #8]
 800190c:	3b01      	subs	r3, #1
 800190e:	60a3      	str	r3, [r4, #8]
 8001910:	6823      	ldr	r3, [r4, #0]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	6022      	str	r2, [r4, #0]
 8001916:	701e      	strb	r6, [r3, #0]
 8001918:	6962      	ldr	r2, [r4, #20]
 800191a:	1c43      	adds	r3, r0, #1
 800191c:	429a      	cmp	r2, r3
 800191e:	d004      	beq.n	800192a <__swbuf_r+0x6e>
 8001920:	89a3      	ldrh	r3, [r4, #12]
 8001922:	07db      	lsls	r3, r3, #31
 8001924:	d5e1      	bpl.n	80018ea <__swbuf_r+0x2e>
 8001926:	2e0a      	cmp	r6, #10
 8001928:	d1df      	bne.n	80018ea <__swbuf_r+0x2e>
 800192a:	4621      	mov	r1, r4
 800192c:	4628      	mov	r0, r5
 800192e:	f7ff ff9d 	bl	800186c <_fflush_r>
 8001932:	2800      	cmp	r0, #0
 8001934:	d0d9      	beq.n	80018ea <__swbuf_r+0x2e>
 8001936:	e7d6      	b.n	80018e6 <__swbuf_r+0x2a>

08001938 <__swsetup_r>:
 8001938:	b538      	push	{r3, r4, r5, lr}
 800193a:	4b29      	ldr	r3, [pc, #164]	@ (80019e0 <__swsetup_r+0xa8>)
 800193c:	4605      	mov	r5, r0
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	460c      	mov	r4, r1
 8001942:	b118      	cbz	r0, 800194c <__swsetup_r+0x14>
 8001944:	6a03      	ldr	r3, [r0, #32]
 8001946:	b90b      	cbnz	r3, 800194c <__swsetup_r+0x14>
 8001948:	f7ff fa3c 	bl	8000dc4 <__sinit>
 800194c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001950:	0719      	lsls	r1, r3, #28
 8001952:	d422      	bmi.n	800199a <__swsetup_r+0x62>
 8001954:	06da      	lsls	r2, r3, #27
 8001956:	d407      	bmi.n	8001968 <__swsetup_r+0x30>
 8001958:	2209      	movs	r2, #9
 800195a:	602a      	str	r2, [r5, #0]
 800195c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001960:	81a3      	strh	r3, [r4, #12]
 8001962:	f04f 30ff 	mov.w	r0, #4294967295
 8001966:	e033      	b.n	80019d0 <__swsetup_r+0x98>
 8001968:	0758      	lsls	r0, r3, #29
 800196a:	d512      	bpl.n	8001992 <__swsetup_r+0x5a>
 800196c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800196e:	b141      	cbz	r1, 8001982 <__swsetup_r+0x4a>
 8001970:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001974:	4299      	cmp	r1, r3
 8001976:	d002      	beq.n	800197e <__swsetup_r+0x46>
 8001978:	4628      	mov	r0, r5
 800197a:	f7ff fb2b 	bl	8000fd4 <_free_r>
 800197e:	2300      	movs	r3, #0
 8001980:	6363      	str	r3, [r4, #52]	@ 0x34
 8001982:	89a3      	ldrh	r3, [r4, #12]
 8001984:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001988:	81a3      	strh	r3, [r4, #12]
 800198a:	2300      	movs	r3, #0
 800198c:	6063      	str	r3, [r4, #4]
 800198e:	6923      	ldr	r3, [r4, #16]
 8001990:	6023      	str	r3, [r4, #0]
 8001992:	89a3      	ldrh	r3, [r4, #12]
 8001994:	f043 0308 	orr.w	r3, r3, #8
 8001998:	81a3      	strh	r3, [r4, #12]
 800199a:	6923      	ldr	r3, [r4, #16]
 800199c:	b94b      	cbnz	r3, 80019b2 <__swsetup_r+0x7a>
 800199e:	89a3      	ldrh	r3, [r4, #12]
 80019a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80019a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019a8:	d003      	beq.n	80019b2 <__swsetup_r+0x7a>
 80019aa:	4621      	mov	r1, r4
 80019ac:	4628      	mov	r0, r5
 80019ae:	f000 f84f 	bl	8001a50 <__smakebuf_r>
 80019b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019b6:	f013 0201 	ands.w	r2, r3, #1
 80019ba:	d00a      	beq.n	80019d2 <__swsetup_r+0x9a>
 80019bc:	2200      	movs	r2, #0
 80019be:	60a2      	str	r2, [r4, #8]
 80019c0:	6962      	ldr	r2, [r4, #20]
 80019c2:	4252      	negs	r2, r2
 80019c4:	61a2      	str	r2, [r4, #24]
 80019c6:	6922      	ldr	r2, [r4, #16]
 80019c8:	b942      	cbnz	r2, 80019dc <__swsetup_r+0xa4>
 80019ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80019ce:	d1c5      	bne.n	800195c <__swsetup_r+0x24>
 80019d0:	bd38      	pop	{r3, r4, r5, pc}
 80019d2:	0799      	lsls	r1, r3, #30
 80019d4:	bf58      	it	pl
 80019d6:	6962      	ldrpl	r2, [r4, #20]
 80019d8:	60a2      	str	r2, [r4, #8]
 80019da:	e7f4      	b.n	80019c6 <__swsetup_r+0x8e>
 80019dc:	2000      	movs	r0, #0
 80019de:	e7f7      	b.n	80019d0 <__swsetup_r+0x98>
 80019e0:	20000024 	.word	0x20000024

080019e4 <_sbrk_r>:
 80019e4:	b538      	push	{r3, r4, r5, lr}
 80019e6:	4d06      	ldr	r5, [pc, #24]	@ (8001a00 <_sbrk_r+0x1c>)
 80019e8:	2300      	movs	r3, #0
 80019ea:	4604      	mov	r4, r0
 80019ec:	4608      	mov	r0, r1
 80019ee:	602b      	str	r3, [r5, #0]
 80019f0:	f7fe fdd8 	bl	80005a4 <_sbrk>
 80019f4:	1c43      	adds	r3, r0, #1
 80019f6:	d102      	bne.n	80019fe <_sbrk_r+0x1a>
 80019f8:	682b      	ldr	r3, [r5, #0]
 80019fa:	b103      	cbz	r3, 80019fe <_sbrk_r+0x1a>
 80019fc:	6023      	str	r3, [r4, #0]
 80019fe:	bd38      	pop	{r3, r4, r5, pc}
 8001a00:	200001d4 	.word	0x200001d4

08001a04 <__swhatbuf_r>:
 8001a04:	b570      	push	{r4, r5, r6, lr}
 8001a06:	460c      	mov	r4, r1
 8001a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a0c:	2900      	cmp	r1, #0
 8001a0e:	b096      	sub	sp, #88	@ 0x58
 8001a10:	4615      	mov	r5, r2
 8001a12:	461e      	mov	r6, r3
 8001a14:	da0d      	bge.n	8001a32 <__swhatbuf_r+0x2e>
 8001a16:	89a3      	ldrh	r3, [r4, #12]
 8001a18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001a1c:	f04f 0100 	mov.w	r1, #0
 8001a20:	bf14      	ite	ne
 8001a22:	2340      	movne	r3, #64	@ 0x40
 8001a24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001a28:	2000      	movs	r0, #0
 8001a2a:	6031      	str	r1, [r6, #0]
 8001a2c:	602b      	str	r3, [r5, #0]
 8001a2e:	b016      	add	sp, #88	@ 0x58
 8001a30:	bd70      	pop	{r4, r5, r6, pc}
 8001a32:	466a      	mov	r2, sp
 8001a34:	f000 f848 	bl	8001ac8 <_fstat_r>
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	dbec      	blt.n	8001a16 <__swhatbuf_r+0x12>
 8001a3c:	9901      	ldr	r1, [sp, #4]
 8001a3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001a42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001a46:	4259      	negs	r1, r3
 8001a48:	4159      	adcs	r1, r3
 8001a4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a4e:	e7eb      	b.n	8001a28 <__swhatbuf_r+0x24>

08001a50 <__smakebuf_r>:
 8001a50:	898b      	ldrh	r3, [r1, #12]
 8001a52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a54:	079d      	lsls	r5, r3, #30
 8001a56:	4606      	mov	r6, r0
 8001a58:	460c      	mov	r4, r1
 8001a5a:	d507      	bpl.n	8001a6c <__smakebuf_r+0x1c>
 8001a5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001a60:	6023      	str	r3, [r4, #0]
 8001a62:	6123      	str	r3, [r4, #16]
 8001a64:	2301      	movs	r3, #1
 8001a66:	6163      	str	r3, [r4, #20]
 8001a68:	b003      	add	sp, #12
 8001a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a6c:	ab01      	add	r3, sp, #4
 8001a6e:	466a      	mov	r2, sp
 8001a70:	f7ff ffc8 	bl	8001a04 <__swhatbuf_r>
 8001a74:	9f00      	ldr	r7, [sp, #0]
 8001a76:	4605      	mov	r5, r0
 8001a78:	4639      	mov	r1, r7
 8001a7a:	4630      	mov	r0, r6
 8001a7c:	f7ff fb16 	bl	80010ac <_malloc_r>
 8001a80:	b948      	cbnz	r0, 8001a96 <__smakebuf_r+0x46>
 8001a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a86:	059a      	lsls	r2, r3, #22
 8001a88:	d4ee      	bmi.n	8001a68 <__smakebuf_r+0x18>
 8001a8a:	f023 0303 	bic.w	r3, r3, #3
 8001a8e:	f043 0302 	orr.w	r3, r3, #2
 8001a92:	81a3      	strh	r3, [r4, #12]
 8001a94:	e7e2      	b.n	8001a5c <__smakebuf_r+0xc>
 8001a96:	89a3      	ldrh	r3, [r4, #12]
 8001a98:	6020      	str	r0, [r4, #0]
 8001a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a9e:	81a3      	strh	r3, [r4, #12]
 8001aa0:	9b01      	ldr	r3, [sp, #4]
 8001aa2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001aa6:	b15b      	cbz	r3, 8001ac0 <__smakebuf_r+0x70>
 8001aa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001aac:	4630      	mov	r0, r6
 8001aae:	f000 f81d 	bl	8001aec <_isatty_r>
 8001ab2:	b128      	cbz	r0, 8001ac0 <__smakebuf_r+0x70>
 8001ab4:	89a3      	ldrh	r3, [r4, #12]
 8001ab6:	f023 0303 	bic.w	r3, r3, #3
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	81a3      	strh	r3, [r4, #12]
 8001ac0:	89a3      	ldrh	r3, [r4, #12]
 8001ac2:	431d      	orrs	r5, r3
 8001ac4:	81a5      	strh	r5, [r4, #12]
 8001ac6:	e7cf      	b.n	8001a68 <__smakebuf_r+0x18>

08001ac8 <_fstat_r>:
 8001ac8:	b538      	push	{r3, r4, r5, lr}
 8001aca:	4d07      	ldr	r5, [pc, #28]	@ (8001ae8 <_fstat_r+0x20>)
 8001acc:	2300      	movs	r3, #0
 8001ace:	4604      	mov	r4, r0
 8001ad0:	4608      	mov	r0, r1
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	602b      	str	r3, [r5, #0]
 8001ad6:	f7fe fd3d 	bl	8000554 <_fstat>
 8001ada:	1c43      	adds	r3, r0, #1
 8001adc:	d102      	bne.n	8001ae4 <_fstat_r+0x1c>
 8001ade:	682b      	ldr	r3, [r5, #0]
 8001ae0:	b103      	cbz	r3, 8001ae4 <_fstat_r+0x1c>
 8001ae2:	6023      	str	r3, [r4, #0]
 8001ae4:	bd38      	pop	{r3, r4, r5, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200001d4 	.word	0x200001d4

08001aec <_isatty_r>:
 8001aec:	b538      	push	{r3, r4, r5, lr}
 8001aee:	4d06      	ldr	r5, [pc, #24]	@ (8001b08 <_isatty_r+0x1c>)
 8001af0:	2300      	movs	r3, #0
 8001af2:	4604      	mov	r4, r0
 8001af4:	4608      	mov	r0, r1
 8001af6:	602b      	str	r3, [r5, #0]
 8001af8:	f7fe fd3c 	bl	8000574 <_isatty>
 8001afc:	1c43      	adds	r3, r0, #1
 8001afe:	d102      	bne.n	8001b06 <_isatty_r+0x1a>
 8001b00:	682b      	ldr	r3, [r5, #0]
 8001b02:	b103      	cbz	r3, 8001b06 <_isatty_r+0x1a>
 8001b04:	6023      	str	r3, [r4, #0]
 8001b06:	bd38      	pop	{r3, r4, r5, pc}
 8001b08:	200001d4 	.word	0x200001d4

08001b0c <_init>:
 8001b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0e:	bf00      	nop
 8001b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b12:	bc08      	pop	{r3}
 8001b14:	469e      	mov	lr, r3
 8001b16:	4770      	bx	lr

08001b18 <_fini>:
 8001b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b1a:	bf00      	nop
 8001b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b1e:	bc08      	pop	{r3}
 8001b20:	469e      	mov	lr, r3
 8001b22:	4770      	bx	lr
