
gpio 9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a6c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08001c3c  08001c3c  00002c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c98  08001c98  00003068  2**0
                  CONTENTS
  4 .ARM          00000008  08001c98  08001c98  00002c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001ca0  08001ca0  00003068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ca0  08001ca0  00002ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ca4  08001ca4  00002ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08001ca8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000068  08001d10  00003068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08001d10  000031dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000348c  00000000  00000000  00003098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000df3  00000000  00000000  00006524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000440  00000000  00000000  00007318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000304  00000000  00000000  00007758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002131a  00000000  00000000  00007a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000500b  00000000  00000000  00028d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7049  00000000  00000000  0002dd81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4dca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016b8  00000000  00000000  000f4e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000038  00000000  00000000  000f64c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001c24 	.word	0x08001c24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08001c24 	.word	0x08001c24

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
void GPIO_Init(void);

volatile uint8_t press_count = 0;
volatile uint8_t led_state = 0;

int main(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
    HAL_Init();
 80002b4:	f000 f9e6 	bl	8000684 <HAL_Init>
    SystemClock_Config();
 80002b8:	f000 f8a6 	bl	8000408 <SystemClock_Config>
    GPIO_Init();
 80002bc:	f000 f858 	bl	8000370 <GPIO_Init>

    while (1) {
        // Check if switch is pressed (Onboard switch assumed on GPIOC_PIN_13)
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80002c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002c4:	4823      	ldr	r0, [pc, #140]	@ (8000354 <main+0xa4>)
 80002c6:	f000 fced 	bl	8000ca4 <HAL_GPIO_ReadPin>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d1f7      	bne.n	80002c0 <main+0x10>
            HAL_Delay(200); // Debounce delay
 80002d0:	20c8      	movs	r0, #200	@ 0xc8
 80002d2:	f000 fa49 	bl	8000768 <HAL_Delay>
            while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET); // Wait for release
 80002d6:	bf00      	nop
 80002d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002dc:	481d      	ldr	r0, [pc, #116]	@ (8000354 <main+0xa4>)
 80002de:	f000 fce1 	bl	8000ca4 <HAL_GPIO_ReadPin>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d0f7      	beq.n	80002d8 <main+0x28>
            HAL_Delay(200); // Debounce delay
 80002e8:	20c8      	movs	r0, #200	@ 0xc8
 80002ea:	f000 fa3d 	bl	8000768 <HAL_Delay>

            press_count++;
 80002ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000358 <main+0xa8>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	3301      	adds	r3, #1
 80002f6:	b2da      	uxtb	r2, r3
 80002f8:	4b17      	ldr	r3, [pc, #92]	@ (8000358 <main+0xa8>)
 80002fa:	701a      	strb	r2, [r3, #0]
            led_state = !led_state; // Toggle LED state
 80002fc:	4b17      	ldr	r3, [pc, #92]	@ (800035c <main+0xac>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	b2db      	uxtb	r3, r3
 8000302:	2b00      	cmp	r3, #0
 8000304:	bf0c      	ite	eq
 8000306:	2301      	moveq	r3, #1
 8000308:	2300      	movne	r3, #0
 800030a:	b2db      	uxtb	r3, r3
 800030c:	461a      	mov	r2, r3
 800030e:	4b13      	ldr	r3, [pc, #76]	@ (800035c <main+0xac>)
 8000310:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, led_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000312:	4b12      	ldr	r3, [pc, #72]	@ (800035c <main+0xac>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	b2db      	uxtb	r3, r3
 8000318:	2b00      	cmp	r3, #0
 800031a:	bf14      	ite	ne
 800031c:	2301      	movne	r3, #1
 800031e:	2300      	moveq	r3, #0
 8000320:	b2db      	uxtb	r3, r3
 8000322:	461a      	mov	r2, r3
 8000324:	2120      	movs	r1, #32
 8000326:	480e      	ldr	r0, [pc, #56]	@ (8000360 <main+0xb0>)
 8000328:	f000 fcd4 	bl	8000cd4 <HAL_GPIO_WritePin>

            if (led_state) {
 800032c:	4b0b      	ldr	r3, [pc, #44]	@ (800035c <main+0xac>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	b2db      	uxtb	r3, r3
 8000332:	2b00      	cmp	r3, #0
 8000334:	d003      	beq.n	800033e <main+0x8e>
                printf("LED ON\n");
 8000336:	480b      	ldr	r0, [pc, #44]	@ (8000364 <main+0xb4>)
 8000338:	f000 fe10 	bl	8000f5c <puts>
 800033c:	e002      	b.n	8000344 <main+0x94>
            } else {
                printf("LED OFF\n");
 800033e:	480a      	ldr	r0, [pc, #40]	@ (8000368 <main+0xb8>)
 8000340:	f000 fe0c 	bl	8000f5c <puts>
            }

            printf("Switch pressed %d times\n", press_count);
 8000344:	4b04      	ldr	r3, [pc, #16]	@ (8000358 <main+0xa8>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	b2db      	uxtb	r3, r3
 800034a:	4619      	mov	r1, r3
 800034c:	4807      	ldr	r0, [pc, #28]	@ (800036c <main+0xbc>)
 800034e:	f000 fd9d 	bl	8000e8c <iprintf>
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8000352:	e7b5      	b.n	80002c0 <main+0x10>
 8000354:	40020800 	.word	0x40020800
 8000358:	20000084 	.word	0x20000084
 800035c:	20000085 	.word	0x20000085
 8000360:	40020000 	.word	0x40020000
 8000364:	08001c3c 	.word	0x08001c3c
 8000368:	08001c44 	.word	0x08001c44
 800036c:	08001c4c 	.word	0x08001c4c

08000370 <GPIO_Init>:
        }
    }
}

void GPIO_Init(void) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b088      	sub	sp, #32
 8000374:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000376:	2300      	movs	r3, #0
 8000378:	60bb      	str	r3, [r7, #8]
 800037a:	4b20      	ldr	r3, [pc, #128]	@ (80003fc <GPIO_Init+0x8c>)
 800037c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037e:	4a1f      	ldr	r2, [pc, #124]	@ (80003fc <GPIO_Init+0x8c>)
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	6313      	str	r3, [r2, #48]	@ 0x30
 8000386:	4b1d      	ldr	r3, [pc, #116]	@ (80003fc <GPIO_Init+0x8c>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	60bb      	str	r3, [r7, #8]
 8000390:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000392:	2300      	movs	r3, #0
 8000394:	607b      	str	r3, [r7, #4]
 8000396:	4b19      	ldr	r3, [pc, #100]	@ (80003fc <GPIO_Init+0x8c>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039a:	4a18      	ldr	r2, [pc, #96]	@ (80003fc <GPIO_Init+0x8c>)
 800039c:	f043 0304 	orr.w	r3, r3, #4
 80003a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80003a2:	4b16      	ldr	r3, [pc, #88]	@ (80003fc <GPIO_Init+0x8c>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a6:	f003 0304 	and.w	r3, r3, #4
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	f107 030c 	add.w	r3, r7, #12
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	611a      	str	r2, [r3, #16]

    // Configure onboard LED (PA5 assumed)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003be:	2320      	movs	r3, #32
 80003c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c2:	2301      	movs	r3, #1
 80003c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ca:	2300      	movs	r3, #0
 80003cc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ce:	f107 030c 	add.w	r3, r7, #12
 80003d2:	4619      	mov	r1, r3
 80003d4:	480a      	ldr	r0, [pc, #40]	@ (8000400 <GPIO_Init+0x90>)
 80003d6:	f000 fad1 	bl	800097c <HAL_GPIO_Init>

    // Configure onboard button (PC13 assumed)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e0:	2300      	movs	r3, #0
 80003e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003e4:	2301      	movs	r3, #1
 80003e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003e8:	f107 030c 	add.w	r3, r7, #12
 80003ec:	4619      	mov	r1, r3
 80003ee:	4805      	ldr	r0, [pc, #20]	@ (8000404 <GPIO_Init+0x94>)
 80003f0:	f000 fac4 	bl	800097c <HAL_GPIO_Init>
}
 80003f4:	bf00      	nop
 80003f6:	3720      	adds	r7, #32
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40023800 	.word	0x40023800
 8000400:	40020000 	.word	0x40020000
 8000404:	40020800 	.word	0x40020800

08000408 <SystemClock_Config>:

void SystemClock_Config(void) {
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
    // This function should be configured based on your clock setup
    // Example configurations can be generated using STM32CubeMX
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
	...

08000418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041e:	2300      	movs	r3, #0
 8000420:	607b      	str	r3, [r7, #4]
 8000422:	4b10      	ldr	r3, [pc, #64]	@ (8000464 <HAL_MspInit+0x4c>)
 8000424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000426:	4a0f      	ldr	r2, [pc, #60]	@ (8000464 <HAL_MspInit+0x4c>)
 8000428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800042c:	6453      	str	r3, [r2, #68]	@ 0x44
 800042e:	4b0d      	ldr	r3, [pc, #52]	@ (8000464 <HAL_MspInit+0x4c>)
 8000430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043a:	2300      	movs	r3, #0
 800043c:	603b      	str	r3, [r7, #0]
 800043e:	4b09      	ldr	r3, [pc, #36]	@ (8000464 <HAL_MspInit+0x4c>)
 8000440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000442:	4a08      	ldr	r2, [pc, #32]	@ (8000464 <HAL_MspInit+0x4c>)
 8000444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000448:	6413      	str	r3, [r2, #64]	@ 0x40
 800044a:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <HAL_MspInit+0x4c>)
 800044c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800044e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000452:	603b      	str	r3, [r7, #0]
 8000454:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000456:	2007      	movs	r0, #7
 8000458:	f000 fa5c 	bl	8000914 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40023800 	.word	0x40023800

08000468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <NMI_Handler+0x4>

08000470 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000474:	bf00      	nop
 8000476:	e7fd      	b.n	8000474 <HardFault_Handler+0x4>

08000478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <MemManage_Handler+0x4>

08000480 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000484:	bf00      	nop
 8000486:	e7fd      	b.n	8000484 <BusFault_Handler+0x4>

08000488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <UsageFault_Handler+0x4>

08000490 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr

0800049e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr

080004ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004be:	f000 f933 	bl	8000728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004c6:	b580      	push	{r7, lr}
 80004c8:	b086      	sub	sp, #24
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	60f8      	str	r0, [r7, #12]
 80004ce:	60b9      	str	r1, [r7, #8]
 80004d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]
 80004d6:	e00a      	b.n	80004ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004d8:	f3af 8000 	nop.w
 80004dc:	4601      	mov	r1, r0
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	1c5a      	adds	r2, r3, #1
 80004e2:	60ba      	str	r2, [r7, #8]
 80004e4:	b2ca      	uxtb	r2, r1
 80004e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	3301      	adds	r3, #1
 80004ec:	617b      	str	r3, [r7, #20]
 80004ee:	697a      	ldr	r2, [r7, #20]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	dbf0      	blt.n	80004d8 <_read+0x12>
  }

  return len;
 80004f6:	687b      	ldr	r3, [r7, #4]
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3718      	adds	r7, #24
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]
 8000510:	e009      	b.n	8000526 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	1c5a      	adds	r2, r3, #1
 8000516:	60ba      	str	r2, [r7, #8]
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	4618      	mov	r0, r3
 800051c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	3301      	adds	r3, #1
 8000524:	617b      	str	r3, [r7, #20]
 8000526:	697a      	ldr	r2, [r7, #20]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	429a      	cmp	r2, r3
 800052c:	dbf1      	blt.n	8000512 <_write+0x12>
  }
  return len;
 800052e:	687b      	ldr	r3, [r7, #4]
}
 8000530:	4618      	mov	r0, r3
 8000532:	3718      	adds	r7, #24
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <_close>:

int _close(int file)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000540:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000544:	4618      	mov	r0, r3
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000560:	605a      	str	r2, [r3, #4]
  return 0;
 8000562:	2300      	movs	r3, #0
}
 8000564:	4618      	mov	r0, r3
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <_isatty>:

int _isatty(int file)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000578:	2301      	movs	r3, #1
}
 800057a:	4618      	mov	r0, r3
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000586:	b480      	push	{r7}
 8000588:	b085      	sub	sp, #20
 800058a:	af00      	add	r7, sp, #0
 800058c:	60f8      	str	r0, [r7, #12]
 800058e:	60b9      	str	r1, [r7, #8]
 8000590:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000592:	2300      	movs	r3, #0
}
 8000594:	4618      	mov	r0, r3
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a8:	4a14      	ldr	r2, [pc, #80]	@ (80005fc <_sbrk+0x5c>)
 80005aa:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <_sbrk+0x60>)
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b4:	4b13      	ldr	r3, [pc, #76]	@ (8000604 <_sbrk+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d102      	bne.n	80005c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005bc:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <_sbrk+0x64>)
 80005be:	4a12      	ldr	r2, [pc, #72]	@ (8000608 <_sbrk+0x68>)
 80005c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005c2:	4b10      	ldr	r3, [pc, #64]	@ (8000604 <_sbrk+0x64>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d207      	bcs.n	80005e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d0:	f000 fdf2 	bl	80011b8 <__errno>
 80005d4:	4603      	mov	r3, r0
 80005d6:	220c      	movs	r2, #12
 80005d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	e009      	b.n	80005f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e0:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <_sbrk+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005e6:	4b07      	ldr	r3, [pc, #28]	@ (8000604 <_sbrk+0x64>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	4a05      	ldr	r2, [pc, #20]	@ (8000604 <_sbrk+0x64>)
 80005f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20020000 	.word	0x20020000
 8000600:	00000400 	.word	0x00000400
 8000604:	20000088 	.word	0x20000088
 8000608:	200001e0 	.word	0x200001e0

0800060c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000610:	4b06      	ldr	r3, [pc, #24]	@ (800062c <SystemInit+0x20>)
 8000612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000616:	4a05      	ldr	r2, [pc, #20]	@ (800062c <SystemInit+0x20>)
 8000618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800061c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000630:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000668 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000634:	f7ff ffea 	bl	800060c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000638:	480c      	ldr	r0, [pc, #48]	@ (800066c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800063a:	490d      	ldr	r1, [pc, #52]	@ (8000670 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800063c:	4a0d      	ldr	r2, [pc, #52]	@ (8000674 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000640:	e002      	b.n	8000648 <LoopCopyDataInit>

08000642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000646:	3304      	adds	r3, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800064c:	d3f9      	bcc.n	8000642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064e:	4a0a      	ldr	r2, [pc, #40]	@ (8000678 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000650:	4c0a      	ldr	r4, [pc, #40]	@ (800067c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000654:	e001      	b.n	800065a <LoopFillZerobss>

08000656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000658:	3204      	adds	r2, #4

0800065a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800065c:	d3fb      	bcc.n	8000656 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800065e:	f000 fdb1 	bl	80011c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000662:	f7ff fe25 	bl	80002b0 <main>
  bx  lr    
 8000666:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000668:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000670:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000674:	08001ca8 	.word	0x08001ca8
  ldr r2, =_sbss
 8000678:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800067c:	200001dc 	.word	0x200001dc

08000680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <ADC_IRQHandler>
	...

08000684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000688:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <HAL_Init+0x40>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0d      	ldr	r2, [pc, #52]	@ (80006c4 <HAL_Init+0x40>)
 800068e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000692:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000694:	4b0b      	ldr	r3, [pc, #44]	@ (80006c4 <HAL_Init+0x40>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a0a      	ldr	r2, [pc, #40]	@ (80006c4 <HAL_Init+0x40>)
 800069a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800069e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a0:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <HAL_Init+0x40>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a07      	ldr	r2, [pc, #28]	@ (80006c4 <HAL_Init+0x40>)
 80006a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ac:	2003      	movs	r0, #3
 80006ae:	f000 f931 	bl	8000914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 f808 	bl	80006c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b8:	f7ff feae 	bl	8000418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023c00 	.word	0x40023c00

080006c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <HAL_InitTick+0x54>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <HAL_InitTick+0x58>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4619      	mov	r1, r3
 80006da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006de:	fbb3 f3f1 	udiv	r3, r3, r1
 80006e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f93b 	bl	8000962 <HAL_SYSTICK_Config>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
 80006f4:	e00e      	b.n	8000714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b0f      	cmp	r3, #15
 80006fa:	d80a      	bhi.n	8000712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006fc:	2200      	movs	r2, #0
 80006fe:	6879      	ldr	r1, [r7, #4]
 8000700:	f04f 30ff 	mov.w	r0, #4294967295
 8000704:	f000 f911 	bl	800092a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000708:	4a06      	ldr	r2, [pc, #24]	@ (8000724 <HAL_InitTick+0x5c>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800070e:	2300      	movs	r3, #0
 8000710:	e000      	b.n	8000714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000712:	2301      	movs	r3, #1
}
 8000714:	4618      	mov	r0, r3
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000000 	.word	0x20000000
 8000720:	20000008 	.word	0x20000008
 8000724:	20000004 	.word	0x20000004

08000728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <HAL_IncTick+0x20>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <HAL_IncTick+0x24>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4413      	add	r3, r2
 8000738:	4a04      	ldr	r2, [pc, #16]	@ (800074c <HAL_IncTick+0x24>)
 800073a:	6013      	str	r3, [r2, #0]
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	20000008 	.word	0x20000008
 800074c:	2000008c 	.word	0x2000008c

08000750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return uwTick;
 8000754:	4b03      	ldr	r3, [pc, #12]	@ (8000764 <HAL_GetTick+0x14>)
 8000756:	681b      	ldr	r3, [r3, #0]
}
 8000758:	4618      	mov	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	2000008c 	.word	0x2000008c

08000768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000770:	f7ff ffee 	bl	8000750 <HAL_GetTick>
 8000774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000780:	d005      	beq.n	800078e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000782:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <HAL_Delay+0x44>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4413      	add	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800078e:	bf00      	nop
 8000790:	f7ff ffde 	bl	8000750 <HAL_GetTick>
 8000794:	4602      	mov	r2, r0
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	429a      	cmp	r2, r3
 800079e:	d8f7      	bhi.n	8000790 <HAL_Delay+0x28>
  {
  }
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000008 	.word	0x20000008

080007b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e2:	4a04      	ldr	r2, [pc, #16]	@ (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	60d3      	str	r3, [r2, #12]
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007fc:	4b04      	ldr	r3, [pc, #16]	@ (8000810 <__NVIC_GetPriorityGrouping+0x18>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	f003 0307 	and.w	r3, r3, #7
}
 8000806:	4618      	mov	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	6039      	str	r1, [r7, #0]
 800081e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000824:	2b00      	cmp	r3, #0
 8000826:	db0a      	blt.n	800083e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	b2da      	uxtb	r2, r3
 800082c:	490c      	ldr	r1, [pc, #48]	@ (8000860 <__NVIC_SetPriority+0x4c>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	0112      	lsls	r2, r2, #4
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	440b      	add	r3, r1
 8000838:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800083c:	e00a      	b.n	8000854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4908      	ldr	r1, [pc, #32]	@ (8000864 <__NVIC_SetPriority+0x50>)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	f003 030f 	and.w	r3, r3, #15
 800084a:	3b04      	subs	r3, #4
 800084c:	0112      	lsls	r2, r2, #4
 800084e:	b2d2      	uxtb	r2, r2
 8000850:	440b      	add	r3, r1
 8000852:	761a      	strb	r2, [r3, #24]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000e100 	.word	0xe000e100
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000868:	b480      	push	{r7}
 800086a:	b089      	sub	sp, #36	@ 0x24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	f1c3 0307 	rsb	r3, r3, #7
 8000882:	2b04      	cmp	r3, #4
 8000884:	bf28      	it	cs
 8000886:	2304      	movcs	r3, #4
 8000888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	3304      	adds	r3, #4
 800088e:	2b06      	cmp	r3, #6
 8000890:	d902      	bls.n	8000898 <NVIC_EncodePriority+0x30>
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3b03      	subs	r3, #3
 8000896:	e000      	b.n	800089a <NVIC_EncodePriority+0x32>
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	f04f 32ff 	mov.w	r2, #4294967295
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	43da      	mvns	r2, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	401a      	ands	r2, r3
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b0:	f04f 31ff 	mov.w	r1, #4294967295
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ba:	43d9      	mvns	r1, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	4313      	orrs	r3, r2
         );
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3724      	adds	r7, #36	@ 0x24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
	...

080008d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3b01      	subs	r3, #1
 80008dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008e0:	d301      	bcc.n	80008e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e2:	2301      	movs	r3, #1
 80008e4:	e00f      	b.n	8000906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000910 <SysTick_Config+0x40>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ee:	210f      	movs	r1, #15
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295
 80008f4:	f7ff ff8e 	bl	8000814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f8:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <SysTick_Config+0x40>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fe:	4b04      	ldr	r3, [pc, #16]	@ (8000910 <SysTick_Config+0x40>)
 8000900:	2207      	movs	r2, #7
 8000902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	e000e010 	.word	0xe000e010

08000914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff ff47 	bl	80007b0 <__NVIC_SetPriorityGrouping>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800092a:	b580      	push	{r7, lr}
 800092c:	b086      	sub	sp, #24
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
 8000936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800093c:	f7ff ff5c 	bl	80007f8 <__NVIC_GetPriorityGrouping>
 8000940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	68b9      	ldr	r1, [r7, #8]
 8000946:	6978      	ldr	r0, [r7, #20]
 8000948:	f7ff ff8e 	bl	8000868 <NVIC_EncodePriority>
 800094c:	4602      	mov	r2, r0
 800094e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff5d 	bl	8000814 <__NVIC_SetPriority>
}
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff ffb0 	bl	80008d0 <SysTick_Config>
 8000970:	4603      	mov	r3, r0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800097c:	b480      	push	{r7}
 800097e:	b089      	sub	sp, #36	@ 0x24
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
 8000996:	e165      	b.n	8000c64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000998:	2201      	movs	r2, #1
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	697a      	ldr	r2, [r7, #20]
 80009a8:	4013      	ands	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	f040 8154 	bne.w	8000c5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f003 0303 	and.w	r3, r3, #3
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d005      	beq.n	80009ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d130      	bne.n	8000a30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	2203      	movs	r2, #3
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	4013      	ands	r3, r2
 80009e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	68da      	ldr	r2, [r3, #12]
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a04:	2201      	movs	r2, #1
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	4013      	ands	r3, r2
 8000a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	091b      	lsrs	r3, r3, #4
 8000a1a:	f003 0201 	and.w	r2, r3, #1
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f003 0303 	and.w	r3, r3, #3
 8000a38:	2b03      	cmp	r3, #3
 8000a3a:	d017      	beq.n	8000a6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	2203      	movs	r2, #3
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	4013      	ands	r3, r2
 8000a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	689a      	ldr	r2, [r3, #8]
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f003 0303 	and.w	r3, r3, #3
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d123      	bne.n	8000ac0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	08da      	lsrs	r2, r3, #3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3208      	adds	r2, #8
 8000a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	f003 0307 	and.w	r3, r3, #7
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	220f      	movs	r2, #15
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	691a      	ldr	r2, [r3, #16]
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	69ba      	ldr	r2, [r7, #24]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	08da      	lsrs	r2, r3, #3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3208      	adds	r2, #8
 8000aba:	69b9      	ldr	r1, [r7, #24]
 8000abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	2203      	movs	r2, #3
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f003 0203 	and.w	r2, r3, #3
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	69ba      	ldr	r2, [r7, #24]
 8000af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	f000 80ae 	beq.w	8000c5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b5d      	ldr	r3, [pc, #372]	@ (8000c7c <HAL_GPIO_Init+0x300>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0a:	4a5c      	ldr	r2, [pc, #368]	@ (8000c7c <HAL_GPIO_Init+0x300>)
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b12:	4b5a      	ldr	r3, [pc, #360]	@ (8000c7c <HAL_GPIO_Init+0x300>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b1e:	4a58      	ldr	r2, [pc, #352]	@ (8000c80 <HAL_GPIO_Init+0x304>)
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	089b      	lsrs	r3, r3, #2
 8000b24:	3302      	adds	r3, #2
 8000b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	220f      	movs	r2, #15
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a4f      	ldr	r2, [pc, #316]	@ (8000c84 <HAL_GPIO_Init+0x308>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d025      	beq.n	8000b96 <HAL_GPIO_Init+0x21a>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a4e      	ldr	r2, [pc, #312]	@ (8000c88 <HAL_GPIO_Init+0x30c>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d01f      	beq.n	8000b92 <HAL_GPIO_Init+0x216>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a4d      	ldr	r2, [pc, #308]	@ (8000c8c <HAL_GPIO_Init+0x310>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d019      	beq.n	8000b8e <HAL_GPIO_Init+0x212>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a4c      	ldr	r2, [pc, #304]	@ (8000c90 <HAL_GPIO_Init+0x314>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d013      	beq.n	8000b8a <HAL_GPIO_Init+0x20e>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a4b      	ldr	r2, [pc, #300]	@ (8000c94 <HAL_GPIO_Init+0x318>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d00d      	beq.n	8000b86 <HAL_GPIO_Init+0x20a>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a4a      	ldr	r2, [pc, #296]	@ (8000c98 <HAL_GPIO_Init+0x31c>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d007      	beq.n	8000b82 <HAL_GPIO_Init+0x206>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a49      	ldr	r2, [pc, #292]	@ (8000c9c <HAL_GPIO_Init+0x320>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d101      	bne.n	8000b7e <HAL_GPIO_Init+0x202>
 8000b7a:	2306      	movs	r3, #6
 8000b7c:	e00c      	b.n	8000b98 <HAL_GPIO_Init+0x21c>
 8000b7e:	2307      	movs	r3, #7
 8000b80:	e00a      	b.n	8000b98 <HAL_GPIO_Init+0x21c>
 8000b82:	2305      	movs	r3, #5
 8000b84:	e008      	b.n	8000b98 <HAL_GPIO_Init+0x21c>
 8000b86:	2304      	movs	r3, #4
 8000b88:	e006      	b.n	8000b98 <HAL_GPIO_Init+0x21c>
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	e004      	b.n	8000b98 <HAL_GPIO_Init+0x21c>
 8000b8e:	2302      	movs	r3, #2
 8000b90:	e002      	b.n	8000b98 <HAL_GPIO_Init+0x21c>
 8000b92:	2301      	movs	r3, #1
 8000b94:	e000      	b.n	8000b98 <HAL_GPIO_Init+0x21c>
 8000b96:	2300      	movs	r3, #0
 8000b98:	69fa      	ldr	r2, [r7, #28]
 8000b9a:	f002 0203 	and.w	r2, r2, #3
 8000b9e:	0092      	lsls	r2, r2, #2
 8000ba0:	4093      	lsls	r3, r2
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ba8:	4935      	ldr	r1, [pc, #212]	@ (8000c80 <HAL_GPIO_Init+0x304>)
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	089b      	lsrs	r3, r3, #2
 8000bae:	3302      	adds	r3, #2
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bb6:	4b3a      	ldr	r3, [pc, #232]	@ (8000ca0 <HAL_GPIO_Init+0x324>)
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bda:	4a31      	ldr	r2, [pc, #196]	@ (8000ca0 <HAL_GPIO_Init+0x324>)
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000be0:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca0 <HAL_GPIO_Init+0x324>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	43db      	mvns	r3, r3
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	4013      	ands	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c04:	4a26      	ldr	r2, [pc, #152]	@ (8000ca0 <HAL_GPIO_Init+0x324>)
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c0a:	4b25      	ldr	r3, [pc, #148]	@ (8000ca0 <HAL_GPIO_Init+0x324>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4013      	ands	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca0 <HAL_GPIO_Init+0x324>)
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <HAL_GPIO_Init+0x324>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d003      	beq.n	8000c58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c58:	4a11      	ldr	r2, [pc, #68]	@ (8000ca0 <HAL_GPIO_Init+0x324>)
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3301      	adds	r3, #1
 8000c62:	61fb      	str	r3, [r7, #28]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	2b0f      	cmp	r3, #15
 8000c68:	f67f ae96 	bls.w	8000998 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3724      	adds	r7, #36	@ 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40013800 	.word	0x40013800
 8000c84:	40020000 	.word	0x40020000
 8000c88:	40020400 	.word	0x40020400
 8000c8c:	40020800 	.word	0x40020800
 8000c90:	40020c00 	.word	0x40020c00
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40021400 	.word	0x40021400
 8000c9c:	40021800 	.word	0x40021800
 8000ca0:	40013c00 	.word	0x40013c00

08000ca4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	691a      	ldr	r2, [r3, #16]
 8000cb4:	887b      	ldrh	r3, [r7, #2]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d002      	beq.n	8000cc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	e001      	b.n	8000cc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	807b      	strh	r3, [r7, #2]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ce4:	787b      	ldrb	r3, [r7, #1]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cea:	887a      	ldrh	r2, [r7, #2]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000cf0:	e003      	b.n	8000cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000cf2:	887b      	ldrh	r3, [r7, #2]
 8000cf4:	041a      	lsls	r2, r3, #16
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	619a      	str	r2, [r3, #24]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <std>:
 8000d08:	2300      	movs	r3, #0
 8000d0a:	b510      	push	{r4, lr}
 8000d0c:	4604      	mov	r4, r0
 8000d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8000d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d16:	6083      	str	r3, [r0, #8]
 8000d18:	8181      	strh	r1, [r0, #12]
 8000d1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8000d1c:	81c2      	strh	r2, [r0, #14]
 8000d1e:	6183      	str	r3, [r0, #24]
 8000d20:	4619      	mov	r1, r3
 8000d22:	2208      	movs	r2, #8
 8000d24:	305c      	adds	r0, #92	@ 0x5c
 8000d26:	f000 f9f9 	bl	800111c <memset>
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d60 <std+0x58>)
 8000d2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d64 <std+0x5c>)
 8000d30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000d32:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <std+0x60>)
 8000d34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000d36:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <std+0x64>)
 8000d38:	6323      	str	r3, [r4, #48]	@ 0x30
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d70 <std+0x68>)
 8000d3c:	6224      	str	r4, [r4, #32]
 8000d3e:	429c      	cmp	r4, r3
 8000d40:	d006      	beq.n	8000d50 <std+0x48>
 8000d42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000d46:	4294      	cmp	r4, r2
 8000d48:	d002      	beq.n	8000d50 <std+0x48>
 8000d4a:	33d0      	adds	r3, #208	@ 0xd0
 8000d4c:	429c      	cmp	r4, r3
 8000d4e:	d105      	bne.n	8000d5c <std+0x54>
 8000d50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d58:	f000 ba58 	b.w	800120c <__retarget_lock_init_recursive>
 8000d5c:	bd10      	pop	{r4, pc}
 8000d5e:	bf00      	nop
 8000d60:	08000f6d 	.word	0x08000f6d
 8000d64:	08000f8f 	.word	0x08000f8f
 8000d68:	08000fc7 	.word	0x08000fc7
 8000d6c:	08000feb 	.word	0x08000feb
 8000d70:	20000090 	.word	0x20000090

08000d74 <stdio_exit_handler>:
 8000d74:	4a02      	ldr	r2, [pc, #8]	@ (8000d80 <stdio_exit_handler+0xc>)
 8000d76:	4903      	ldr	r1, [pc, #12]	@ (8000d84 <stdio_exit_handler+0x10>)
 8000d78:	4803      	ldr	r0, [pc, #12]	@ (8000d88 <stdio_exit_handler+0x14>)
 8000d7a:	f000 b869 	b.w	8000e50 <_fwalk_sglue>
 8000d7e:	bf00      	nop
 8000d80:	2000000c 	.word	0x2000000c
 8000d84:	08001aad 	.word	0x08001aad
 8000d88:	2000001c 	.word	0x2000001c

08000d8c <cleanup_stdio>:
 8000d8c:	6841      	ldr	r1, [r0, #4]
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <cleanup_stdio+0x34>)
 8000d90:	4299      	cmp	r1, r3
 8000d92:	b510      	push	{r4, lr}
 8000d94:	4604      	mov	r4, r0
 8000d96:	d001      	beq.n	8000d9c <cleanup_stdio+0x10>
 8000d98:	f000 fe88 	bl	8001aac <_fflush_r>
 8000d9c:	68a1      	ldr	r1, [r4, #8]
 8000d9e:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <cleanup_stdio+0x38>)
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d002      	beq.n	8000daa <cleanup_stdio+0x1e>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f000 fe81 	bl	8001aac <_fflush_r>
 8000daa:	68e1      	ldr	r1, [r4, #12]
 8000dac:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <cleanup_stdio+0x3c>)
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d004      	beq.n	8000dbc <cleanup_stdio+0x30>
 8000db2:	4620      	mov	r0, r4
 8000db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000db8:	f000 be78 	b.w	8001aac <_fflush_r>
 8000dbc:	bd10      	pop	{r4, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000090 	.word	0x20000090
 8000dc4:	200000f8 	.word	0x200000f8
 8000dc8:	20000160 	.word	0x20000160

08000dcc <global_stdio_init.part.0>:
 8000dcc:	b510      	push	{r4, lr}
 8000dce:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <global_stdio_init.part.0+0x30>)
 8000dd0:	4c0b      	ldr	r4, [pc, #44]	@ (8000e00 <global_stdio_init.part.0+0x34>)
 8000dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8000e04 <global_stdio_init.part.0+0x38>)
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2104      	movs	r1, #4
 8000ddc:	f7ff ff94 	bl	8000d08 <std>
 8000de0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000de4:	2201      	movs	r2, #1
 8000de6:	2109      	movs	r1, #9
 8000de8:	f7ff ff8e 	bl	8000d08 <std>
 8000dec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000df0:	2202      	movs	r2, #2
 8000df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000df6:	2112      	movs	r1, #18
 8000df8:	f7ff bf86 	b.w	8000d08 <std>
 8000dfc:	200001c8 	.word	0x200001c8
 8000e00:	20000090 	.word	0x20000090
 8000e04:	08000d75 	.word	0x08000d75

08000e08 <__sfp_lock_acquire>:
 8000e08:	4801      	ldr	r0, [pc, #4]	@ (8000e10 <__sfp_lock_acquire+0x8>)
 8000e0a:	f000 ba00 	b.w	800120e <__retarget_lock_acquire_recursive>
 8000e0e:	bf00      	nop
 8000e10:	200001d1 	.word	0x200001d1

08000e14 <__sfp_lock_release>:
 8000e14:	4801      	ldr	r0, [pc, #4]	@ (8000e1c <__sfp_lock_release+0x8>)
 8000e16:	f000 b9fb 	b.w	8001210 <__retarget_lock_release_recursive>
 8000e1a:	bf00      	nop
 8000e1c:	200001d1 	.word	0x200001d1

08000e20 <__sinit>:
 8000e20:	b510      	push	{r4, lr}
 8000e22:	4604      	mov	r4, r0
 8000e24:	f7ff fff0 	bl	8000e08 <__sfp_lock_acquire>
 8000e28:	6a23      	ldr	r3, [r4, #32]
 8000e2a:	b11b      	cbz	r3, 8000e34 <__sinit+0x14>
 8000e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e30:	f7ff bff0 	b.w	8000e14 <__sfp_lock_release>
 8000e34:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <__sinit+0x28>)
 8000e36:	6223      	str	r3, [r4, #32]
 8000e38:	4b04      	ldr	r3, [pc, #16]	@ (8000e4c <__sinit+0x2c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1f5      	bne.n	8000e2c <__sinit+0xc>
 8000e40:	f7ff ffc4 	bl	8000dcc <global_stdio_init.part.0>
 8000e44:	e7f2      	b.n	8000e2c <__sinit+0xc>
 8000e46:	bf00      	nop
 8000e48:	08000d8d 	.word	0x08000d8d
 8000e4c:	200001c8 	.word	0x200001c8

08000e50 <_fwalk_sglue>:
 8000e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e54:	4607      	mov	r7, r0
 8000e56:	4688      	mov	r8, r1
 8000e58:	4614      	mov	r4, r2
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e60:	f1b9 0901 	subs.w	r9, r9, #1
 8000e64:	d505      	bpl.n	8000e72 <_fwalk_sglue+0x22>
 8000e66:	6824      	ldr	r4, [r4, #0]
 8000e68:	2c00      	cmp	r4, #0
 8000e6a:	d1f7      	bne.n	8000e5c <_fwalk_sglue+0xc>
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e72:	89ab      	ldrh	r3, [r5, #12]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d907      	bls.n	8000e88 <_fwalk_sglue+0x38>
 8000e78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	d003      	beq.n	8000e88 <_fwalk_sglue+0x38>
 8000e80:	4629      	mov	r1, r5
 8000e82:	4638      	mov	r0, r7
 8000e84:	47c0      	blx	r8
 8000e86:	4306      	orrs	r6, r0
 8000e88:	3568      	adds	r5, #104	@ 0x68
 8000e8a:	e7e9      	b.n	8000e60 <_fwalk_sglue+0x10>

08000e8c <iprintf>:
 8000e8c:	b40f      	push	{r0, r1, r2, r3}
 8000e8e:	b507      	push	{r0, r1, r2, lr}
 8000e90:	4906      	ldr	r1, [pc, #24]	@ (8000eac <iprintf+0x20>)
 8000e92:	ab04      	add	r3, sp, #16
 8000e94:	6808      	ldr	r0, [r1, #0]
 8000e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e9a:	6881      	ldr	r1, [r0, #8]
 8000e9c:	9301      	str	r3, [sp, #4]
 8000e9e:	f000 fadb 	bl	8001458 <_vfiprintf_r>
 8000ea2:	b003      	add	sp, #12
 8000ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ea8:	b004      	add	sp, #16
 8000eaa:	4770      	bx	lr
 8000eac:	20000018 	.word	0x20000018

08000eb0 <_puts_r>:
 8000eb0:	6a03      	ldr	r3, [r0, #32]
 8000eb2:	b570      	push	{r4, r5, r6, lr}
 8000eb4:	6884      	ldr	r4, [r0, #8]
 8000eb6:	4605      	mov	r5, r0
 8000eb8:	460e      	mov	r6, r1
 8000eba:	b90b      	cbnz	r3, 8000ec0 <_puts_r+0x10>
 8000ebc:	f7ff ffb0 	bl	8000e20 <__sinit>
 8000ec0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000ec2:	07db      	lsls	r3, r3, #31
 8000ec4:	d405      	bmi.n	8000ed2 <_puts_r+0x22>
 8000ec6:	89a3      	ldrh	r3, [r4, #12]
 8000ec8:	0598      	lsls	r0, r3, #22
 8000eca:	d402      	bmi.n	8000ed2 <_puts_r+0x22>
 8000ecc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000ece:	f000 f99e 	bl	800120e <__retarget_lock_acquire_recursive>
 8000ed2:	89a3      	ldrh	r3, [r4, #12]
 8000ed4:	0719      	lsls	r1, r3, #28
 8000ed6:	d502      	bpl.n	8000ede <_puts_r+0x2e>
 8000ed8:	6923      	ldr	r3, [r4, #16]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d135      	bne.n	8000f4a <_puts_r+0x9a>
 8000ede:	4621      	mov	r1, r4
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	f000 f8c5 	bl	8001070 <__swsetup_r>
 8000ee6:	b380      	cbz	r0, 8000f4a <_puts_r+0x9a>
 8000ee8:	f04f 35ff 	mov.w	r5, #4294967295
 8000eec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000eee:	07da      	lsls	r2, r3, #31
 8000ef0:	d405      	bmi.n	8000efe <_puts_r+0x4e>
 8000ef2:	89a3      	ldrh	r3, [r4, #12]
 8000ef4:	059b      	lsls	r3, r3, #22
 8000ef6:	d402      	bmi.n	8000efe <_puts_r+0x4e>
 8000ef8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000efa:	f000 f989 	bl	8001210 <__retarget_lock_release_recursive>
 8000efe:	4628      	mov	r0, r5
 8000f00:	bd70      	pop	{r4, r5, r6, pc}
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	da04      	bge.n	8000f10 <_puts_r+0x60>
 8000f06:	69a2      	ldr	r2, [r4, #24]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	dc17      	bgt.n	8000f3c <_puts_r+0x8c>
 8000f0c:	290a      	cmp	r1, #10
 8000f0e:	d015      	beq.n	8000f3c <_puts_r+0x8c>
 8000f10:	6823      	ldr	r3, [r4, #0]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	6022      	str	r2, [r4, #0]
 8000f16:	7019      	strb	r1, [r3, #0]
 8000f18:	68a3      	ldr	r3, [r4, #8]
 8000f1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	60a3      	str	r3, [r4, #8]
 8000f22:	2900      	cmp	r1, #0
 8000f24:	d1ed      	bne.n	8000f02 <_puts_r+0x52>
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	da11      	bge.n	8000f4e <_puts_r+0x9e>
 8000f2a:	4622      	mov	r2, r4
 8000f2c:	210a      	movs	r1, #10
 8000f2e:	4628      	mov	r0, r5
 8000f30:	f000 f85f 	bl	8000ff2 <__swbuf_r>
 8000f34:	3001      	adds	r0, #1
 8000f36:	d0d7      	beq.n	8000ee8 <_puts_r+0x38>
 8000f38:	250a      	movs	r5, #10
 8000f3a:	e7d7      	b.n	8000eec <_puts_r+0x3c>
 8000f3c:	4622      	mov	r2, r4
 8000f3e:	4628      	mov	r0, r5
 8000f40:	f000 f857 	bl	8000ff2 <__swbuf_r>
 8000f44:	3001      	adds	r0, #1
 8000f46:	d1e7      	bne.n	8000f18 <_puts_r+0x68>
 8000f48:	e7ce      	b.n	8000ee8 <_puts_r+0x38>
 8000f4a:	3e01      	subs	r6, #1
 8000f4c:	e7e4      	b.n	8000f18 <_puts_r+0x68>
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	1c5a      	adds	r2, r3, #1
 8000f52:	6022      	str	r2, [r4, #0]
 8000f54:	220a      	movs	r2, #10
 8000f56:	701a      	strb	r2, [r3, #0]
 8000f58:	e7ee      	b.n	8000f38 <_puts_r+0x88>
	...

08000f5c <puts>:
 8000f5c:	4b02      	ldr	r3, [pc, #8]	@ (8000f68 <puts+0xc>)
 8000f5e:	4601      	mov	r1, r0
 8000f60:	6818      	ldr	r0, [r3, #0]
 8000f62:	f7ff bfa5 	b.w	8000eb0 <_puts_r>
 8000f66:	bf00      	nop
 8000f68:	20000018 	.word	0x20000018

08000f6c <__sread>:
 8000f6c:	b510      	push	{r4, lr}
 8000f6e:	460c      	mov	r4, r1
 8000f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f74:	f000 f8fc 	bl	8001170 <_read_r>
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	bfab      	itete	ge
 8000f7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000f7e:	89a3      	ldrhlt	r3, [r4, #12]
 8000f80:	181b      	addge	r3, r3, r0
 8000f82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000f86:	bfac      	ite	ge
 8000f88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000f8a:	81a3      	strhlt	r3, [r4, #12]
 8000f8c:	bd10      	pop	{r4, pc}

08000f8e <__swrite>:
 8000f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f92:	461f      	mov	r7, r3
 8000f94:	898b      	ldrh	r3, [r1, #12]
 8000f96:	05db      	lsls	r3, r3, #23
 8000f98:	4605      	mov	r5, r0
 8000f9a:	460c      	mov	r4, r1
 8000f9c:	4616      	mov	r6, r2
 8000f9e:	d505      	bpl.n	8000fac <__swrite+0x1e>
 8000fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f000 f8d0 	bl	800114c <_lseek_r>
 8000fac:	89a3      	ldrh	r3, [r4, #12]
 8000fae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000fb6:	81a3      	strh	r3, [r4, #12]
 8000fb8:	4632      	mov	r2, r6
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fc2:	f000 b8e7 	b.w	8001194 <_write_r>

08000fc6 <__sseek>:
 8000fc6:	b510      	push	{r4, lr}
 8000fc8:	460c      	mov	r4, r1
 8000fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fce:	f000 f8bd 	bl	800114c <_lseek_r>
 8000fd2:	1c43      	adds	r3, r0, #1
 8000fd4:	89a3      	ldrh	r3, [r4, #12]
 8000fd6:	bf15      	itete	ne
 8000fd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000fda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000fde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000fe2:	81a3      	strheq	r3, [r4, #12]
 8000fe4:	bf18      	it	ne
 8000fe6:	81a3      	strhne	r3, [r4, #12]
 8000fe8:	bd10      	pop	{r4, pc}

08000fea <__sclose>:
 8000fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fee:	f000 b89d 	b.w	800112c <_close_r>

08000ff2 <__swbuf_r>:
 8000ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff4:	460e      	mov	r6, r1
 8000ff6:	4614      	mov	r4, r2
 8000ff8:	4605      	mov	r5, r0
 8000ffa:	b118      	cbz	r0, 8001004 <__swbuf_r+0x12>
 8000ffc:	6a03      	ldr	r3, [r0, #32]
 8000ffe:	b90b      	cbnz	r3, 8001004 <__swbuf_r+0x12>
 8001000:	f7ff ff0e 	bl	8000e20 <__sinit>
 8001004:	69a3      	ldr	r3, [r4, #24]
 8001006:	60a3      	str	r3, [r4, #8]
 8001008:	89a3      	ldrh	r3, [r4, #12]
 800100a:	071a      	lsls	r2, r3, #28
 800100c:	d501      	bpl.n	8001012 <__swbuf_r+0x20>
 800100e:	6923      	ldr	r3, [r4, #16]
 8001010:	b943      	cbnz	r3, 8001024 <__swbuf_r+0x32>
 8001012:	4621      	mov	r1, r4
 8001014:	4628      	mov	r0, r5
 8001016:	f000 f82b 	bl	8001070 <__swsetup_r>
 800101a:	b118      	cbz	r0, 8001024 <__swbuf_r+0x32>
 800101c:	f04f 37ff 	mov.w	r7, #4294967295
 8001020:	4638      	mov	r0, r7
 8001022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001024:	6823      	ldr	r3, [r4, #0]
 8001026:	6922      	ldr	r2, [r4, #16]
 8001028:	1a98      	subs	r0, r3, r2
 800102a:	6963      	ldr	r3, [r4, #20]
 800102c:	b2f6      	uxtb	r6, r6
 800102e:	4283      	cmp	r3, r0
 8001030:	4637      	mov	r7, r6
 8001032:	dc05      	bgt.n	8001040 <__swbuf_r+0x4e>
 8001034:	4621      	mov	r1, r4
 8001036:	4628      	mov	r0, r5
 8001038:	f000 fd38 	bl	8001aac <_fflush_r>
 800103c:	2800      	cmp	r0, #0
 800103e:	d1ed      	bne.n	800101c <__swbuf_r+0x2a>
 8001040:	68a3      	ldr	r3, [r4, #8]
 8001042:	3b01      	subs	r3, #1
 8001044:	60a3      	str	r3, [r4, #8]
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	6022      	str	r2, [r4, #0]
 800104c:	701e      	strb	r6, [r3, #0]
 800104e:	6962      	ldr	r2, [r4, #20]
 8001050:	1c43      	adds	r3, r0, #1
 8001052:	429a      	cmp	r2, r3
 8001054:	d004      	beq.n	8001060 <__swbuf_r+0x6e>
 8001056:	89a3      	ldrh	r3, [r4, #12]
 8001058:	07db      	lsls	r3, r3, #31
 800105a:	d5e1      	bpl.n	8001020 <__swbuf_r+0x2e>
 800105c:	2e0a      	cmp	r6, #10
 800105e:	d1df      	bne.n	8001020 <__swbuf_r+0x2e>
 8001060:	4621      	mov	r1, r4
 8001062:	4628      	mov	r0, r5
 8001064:	f000 fd22 	bl	8001aac <_fflush_r>
 8001068:	2800      	cmp	r0, #0
 800106a:	d0d9      	beq.n	8001020 <__swbuf_r+0x2e>
 800106c:	e7d6      	b.n	800101c <__swbuf_r+0x2a>
	...

08001070 <__swsetup_r>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	4b29      	ldr	r3, [pc, #164]	@ (8001118 <__swsetup_r+0xa8>)
 8001074:	4605      	mov	r5, r0
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	460c      	mov	r4, r1
 800107a:	b118      	cbz	r0, 8001084 <__swsetup_r+0x14>
 800107c:	6a03      	ldr	r3, [r0, #32]
 800107e:	b90b      	cbnz	r3, 8001084 <__swsetup_r+0x14>
 8001080:	f7ff fece 	bl	8000e20 <__sinit>
 8001084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001088:	0719      	lsls	r1, r3, #28
 800108a:	d422      	bmi.n	80010d2 <__swsetup_r+0x62>
 800108c:	06da      	lsls	r2, r3, #27
 800108e:	d407      	bmi.n	80010a0 <__swsetup_r+0x30>
 8001090:	2209      	movs	r2, #9
 8001092:	602a      	str	r2, [r5, #0]
 8001094:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001098:	81a3      	strh	r3, [r4, #12]
 800109a:	f04f 30ff 	mov.w	r0, #4294967295
 800109e:	e033      	b.n	8001108 <__swsetup_r+0x98>
 80010a0:	0758      	lsls	r0, r3, #29
 80010a2:	d512      	bpl.n	80010ca <__swsetup_r+0x5a>
 80010a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80010a6:	b141      	cbz	r1, 80010ba <__swsetup_r+0x4a>
 80010a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80010ac:	4299      	cmp	r1, r3
 80010ae:	d002      	beq.n	80010b6 <__swsetup_r+0x46>
 80010b0:	4628      	mov	r0, r5
 80010b2:	f000 f8af 	bl	8001214 <_free_r>
 80010b6:	2300      	movs	r3, #0
 80010b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80010ba:	89a3      	ldrh	r3, [r4, #12]
 80010bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80010c0:	81a3      	strh	r3, [r4, #12]
 80010c2:	2300      	movs	r3, #0
 80010c4:	6063      	str	r3, [r4, #4]
 80010c6:	6923      	ldr	r3, [r4, #16]
 80010c8:	6023      	str	r3, [r4, #0]
 80010ca:	89a3      	ldrh	r3, [r4, #12]
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	81a3      	strh	r3, [r4, #12]
 80010d2:	6923      	ldr	r3, [r4, #16]
 80010d4:	b94b      	cbnz	r3, 80010ea <__swsetup_r+0x7a>
 80010d6:	89a3      	ldrh	r3, [r4, #12]
 80010d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80010dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010e0:	d003      	beq.n	80010ea <__swsetup_r+0x7a>
 80010e2:	4621      	mov	r1, r4
 80010e4:	4628      	mov	r0, r5
 80010e6:	f000 fd2f 	bl	8001b48 <__smakebuf_r>
 80010ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010ee:	f013 0201 	ands.w	r2, r3, #1
 80010f2:	d00a      	beq.n	800110a <__swsetup_r+0x9a>
 80010f4:	2200      	movs	r2, #0
 80010f6:	60a2      	str	r2, [r4, #8]
 80010f8:	6962      	ldr	r2, [r4, #20]
 80010fa:	4252      	negs	r2, r2
 80010fc:	61a2      	str	r2, [r4, #24]
 80010fe:	6922      	ldr	r2, [r4, #16]
 8001100:	b942      	cbnz	r2, 8001114 <__swsetup_r+0xa4>
 8001102:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001106:	d1c5      	bne.n	8001094 <__swsetup_r+0x24>
 8001108:	bd38      	pop	{r3, r4, r5, pc}
 800110a:	0799      	lsls	r1, r3, #30
 800110c:	bf58      	it	pl
 800110e:	6962      	ldrpl	r2, [r4, #20]
 8001110:	60a2      	str	r2, [r4, #8]
 8001112:	e7f4      	b.n	80010fe <__swsetup_r+0x8e>
 8001114:	2000      	movs	r0, #0
 8001116:	e7f7      	b.n	8001108 <__swsetup_r+0x98>
 8001118:	20000018 	.word	0x20000018

0800111c <memset>:
 800111c:	4402      	add	r2, r0
 800111e:	4603      	mov	r3, r0
 8001120:	4293      	cmp	r3, r2
 8001122:	d100      	bne.n	8001126 <memset+0xa>
 8001124:	4770      	bx	lr
 8001126:	f803 1b01 	strb.w	r1, [r3], #1
 800112a:	e7f9      	b.n	8001120 <memset+0x4>

0800112c <_close_r>:
 800112c:	b538      	push	{r3, r4, r5, lr}
 800112e:	4d06      	ldr	r5, [pc, #24]	@ (8001148 <_close_r+0x1c>)
 8001130:	2300      	movs	r3, #0
 8001132:	4604      	mov	r4, r0
 8001134:	4608      	mov	r0, r1
 8001136:	602b      	str	r3, [r5, #0]
 8001138:	f7ff f9fe 	bl	8000538 <_close>
 800113c:	1c43      	adds	r3, r0, #1
 800113e:	d102      	bne.n	8001146 <_close_r+0x1a>
 8001140:	682b      	ldr	r3, [r5, #0]
 8001142:	b103      	cbz	r3, 8001146 <_close_r+0x1a>
 8001144:	6023      	str	r3, [r4, #0]
 8001146:	bd38      	pop	{r3, r4, r5, pc}
 8001148:	200001cc 	.word	0x200001cc

0800114c <_lseek_r>:
 800114c:	b538      	push	{r3, r4, r5, lr}
 800114e:	4d07      	ldr	r5, [pc, #28]	@ (800116c <_lseek_r+0x20>)
 8001150:	4604      	mov	r4, r0
 8001152:	4608      	mov	r0, r1
 8001154:	4611      	mov	r1, r2
 8001156:	2200      	movs	r2, #0
 8001158:	602a      	str	r2, [r5, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	f7ff fa13 	bl	8000586 <_lseek>
 8001160:	1c43      	adds	r3, r0, #1
 8001162:	d102      	bne.n	800116a <_lseek_r+0x1e>
 8001164:	682b      	ldr	r3, [r5, #0]
 8001166:	b103      	cbz	r3, 800116a <_lseek_r+0x1e>
 8001168:	6023      	str	r3, [r4, #0]
 800116a:	bd38      	pop	{r3, r4, r5, pc}
 800116c:	200001cc 	.word	0x200001cc

08001170 <_read_r>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4d07      	ldr	r5, [pc, #28]	@ (8001190 <_read_r+0x20>)
 8001174:	4604      	mov	r4, r0
 8001176:	4608      	mov	r0, r1
 8001178:	4611      	mov	r1, r2
 800117a:	2200      	movs	r2, #0
 800117c:	602a      	str	r2, [r5, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	f7ff f9a1 	bl	80004c6 <_read>
 8001184:	1c43      	adds	r3, r0, #1
 8001186:	d102      	bne.n	800118e <_read_r+0x1e>
 8001188:	682b      	ldr	r3, [r5, #0]
 800118a:	b103      	cbz	r3, 800118e <_read_r+0x1e>
 800118c:	6023      	str	r3, [r4, #0]
 800118e:	bd38      	pop	{r3, r4, r5, pc}
 8001190:	200001cc 	.word	0x200001cc

08001194 <_write_r>:
 8001194:	b538      	push	{r3, r4, r5, lr}
 8001196:	4d07      	ldr	r5, [pc, #28]	@ (80011b4 <_write_r+0x20>)
 8001198:	4604      	mov	r4, r0
 800119a:	4608      	mov	r0, r1
 800119c:	4611      	mov	r1, r2
 800119e:	2200      	movs	r2, #0
 80011a0:	602a      	str	r2, [r5, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	f7ff f9ac 	bl	8000500 <_write>
 80011a8:	1c43      	adds	r3, r0, #1
 80011aa:	d102      	bne.n	80011b2 <_write_r+0x1e>
 80011ac:	682b      	ldr	r3, [r5, #0]
 80011ae:	b103      	cbz	r3, 80011b2 <_write_r+0x1e>
 80011b0:	6023      	str	r3, [r4, #0]
 80011b2:	bd38      	pop	{r3, r4, r5, pc}
 80011b4:	200001cc 	.word	0x200001cc

080011b8 <__errno>:
 80011b8:	4b01      	ldr	r3, [pc, #4]	@ (80011c0 <__errno+0x8>)
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000018 	.word	0x20000018

080011c4 <__libc_init_array>:
 80011c4:	b570      	push	{r4, r5, r6, lr}
 80011c6:	4d0d      	ldr	r5, [pc, #52]	@ (80011fc <__libc_init_array+0x38>)
 80011c8:	4c0d      	ldr	r4, [pc, #52]	@ (8001200 <__libc_init_array+0x3c>)
 80011ca:	1b64      	subs	r4, r4, r5
 80011cc:	10a4      	asrs	r4, r4, #2
 80011ce:	2600      	movs	r6, #0
 80011d0:	42a6      	cmp	r6, r4
 80011d2:	d109      	bne.n	80011e8 <__libc_init_array+0x24>
 80011d4:	4d0b      	ldr	r5, [pc, #44]	@ (8001204 <__libc_init_array+0x40>)
 80011d6:	4c0c      	ldr	r4, [pc, #48]	@ (8001208 <__libc_init_array+0x44>)
 80011d8:	f000 fd24 	bl	8001c24 <_init>
 80011dc:	1b64      	subs	r4, r4, r5
 80011de:	10a4      	asrs	r4, r4, #2
 80011e0:	2600      	movs	r6, #0
 80011e2:	42a6      	cmp	r6, r4
 80011e4:	d105      	bne.n	80011f2 <__libc_init_array+0x2e>
 80011e6:	bd70      	pop	{r4, r5, r6, pc}
 80011e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80011ec:	4798      	blx	r3
 80011ee:	3601      	adds	r6, #1
 80011f0:	e7ee      	b.n	80011d0 <__libc_init_array+0xc>
 80011f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80011f6:	4798      	blx	r3
 80011f8:	3601      	adds	r6, #1
 80011fa:	e7f2      	b.n	80011e2 <__libc_init_array+0x1e>
 80011fc:	08001ca0 	.word	0x08001ca0
 8001200:	08001ca0 	.word	0x08001ca0
 8001204:	08001ca0 	.word	0x08001ca0
 8001208:	08001ca4 	.word	0x08001ca4

0800120c <__retarget_lock_init_recursive>:
 800120c:	4770      	bx	lr

0800120e <__retarget_lock_acquire_recursive>:
 800120e:	4770      	bx	lr

08001210 <__retarget_lock_release_recursive>:
 8001210:	4770      	bx	lr
	...

08001214 <_free_r>:
 8001214:	b538      	push	{r3, r4, r5, lr}
 8001216:	4605      	mov	r5, r0
 8001218:	2900      	cmp	r1, #0
 800121a:	d041      	beq.n	80012a0 <_free_r+0x8c>
 800121c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001220:	1f0c      	subs	r4, r1, #4
 8001222:	2b00      	cmp	r3, #0
 8001224:	bfb8      	it	lt
 8001226:	18e4      	addlt	r4, r4, r3
 8001228:	f000 f8e0 	bl	80013ec <__malloc_lock>
 800122c:	4a1d      	ldr	r2, [pc, #116]	@ (80012a4 <_free_r+0x90>)
 800122e:	6813      	ldr	r3, [r2, #0]
 8001230:	b933      	cbnz	r3, 8001240 <_free_r+0x2c>
 8001232:	6063      	str	r3, [r4, #4]
 8001234:	6014      	str	r4, [r2, #0]
 8001236:	4628      	mov	r0, r5
 8001238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800123c:	f000 b8dc 	b.w	80013f8 <__malloc_unlock>
 8001240:	42a3      	cmp	r3, r4
 8001242:	d908      	bls.n	8001256 <_free_r+0x42>
 8001244:	6820      	ldr	r0, [r4, #0]
 8001246:	1821      	adds	r1, r4, r0
 8001248:	428b      	cmp	r3, r1
 800124a:	bf01      	itttt	eq
 800124c:	6819      	ldreq	r1, [r3, #0]
 800124e:	685b      	ldreq	r3, [r3, #4]
 8001250:	1809      	addeq	r1, r1, r0
 8001252:	6021      	streq	r1, [r4, #0]
 8001254:	e7ed      	b.n	8001232 <_free_r+0x1e>
 8001256:	461a      	mov	r2, r3
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	b10b      	cbz	r3, 8001260 <_free_r+0x4c>
 800125c:	42a3      	cmp	r3, r4
 800125e:	d9fa      	bls.n	8001256 <_free_r+0x42>
 8001260:	6811      	ldr	r1, [r2, #0]
 8001262:	1850      	adds	r0, r2, r1
 8001264:	42a0      	cmp	r0, r4
 8001266:	d10b      	bne.n	8001280 <_free_r+0x6c>
 8001268:	6820      	ldr	r0, [r4, #0]
 800126a:	4401      	add	r1, r0
 800126c:	1850      	adds	r0, r2, r1
 800126e:	4283      	cmp	r3, r0
 8001270:	6011      	str	r1, [r2, #0]
 8001272:	d1e0      	bne.n	8001236 <_free_r+0x22>
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	6053      	str	r3, [r2, #4]
 800127a:	4408      	add	r0, r1
 800127c:	6010      	str	r0, [r2, #0]
 800127e:	e7da      	b.n	8001236 <_free_r+0x22>
 8001280:	d902      	bls.n	8001288 <_free_r+0x74>
 8001282:	230c      	movs	r3, #12
 8001284:	602b      	str	r3, [r5, #0]
 8001286:	e7d6      	b.n	8001236 <_free_r+0x22>
 8001288:	6820      	ldr	r0, [r4, #0]
 800128a:	1821      	adds	r1, r4, r0
 800128c:	428b      	cmp	r3, r1
 800128e:	bf04      	itt	eq
 8001290:	6819      	ldreq	r1, [r3, #0]
 8001292:	685b      	ldreq	r3, [r3, #4]
 8001294:	6063      	str	r3, [r4, #4]
 8001296:	bf04      	itt	eq
 8001298:	1809      	addeq	r1, r1, r0
 800129a:	6021      	streq	r1, [r4, #0]
 800129c:	6054      	str	r4, [r2, #4]
 800129e:	e7ca      	b.n	8001236 <_free_r+0x22>
 80012a0:	bd38      	pop	{r3, r4, r5, pc}
 80012a2:	bf00      	nop
 80012a4:	200001d8 	.word	0x200001d8

080012a8 <sbrk_aligned>:
 80012a8:	b570      	push	{r4, r5, r6, lr}
 80012aa:	4e0f      	ldr	r6, [pc, #60]	@ (80012e8 <sbrk_aligned+0x40>)
 80012ac:	460c      	mov	r4, r1
 80012ae:	6831      	ldr	r1, [r6, #0]
 80012b0:	4605      	mov	r5, r0
 80012b2:	b911      	cbnz	r1, 80012ba <sbrk_aligned+0x12>
 80012b4:	f000 fca6 	bl	8001c04 <_sbrk_r>
 80012b8:	6030      	str	r0, [r6, #0]
 80012ba:	4621      	mov	r1, r4
 80012bc:	4628      	mov	r0, r5
 80012be:	f000 fca1 	bl	8001c04 <_sbrk_r>
 80012c2:	1c43      	adds	r3, r0, #1
 80012c4:	d103      	bne.n	80012ce <sbrk_aligned+0x26>
 80012c6:	f04f 34ff 	mov.w	r4, #4294967295
 80012ca:	4620      	mov	r0, r4
 80012cc:	bd70      	pop	{r4, r5, r6, pc}
 80012ce:	1cc4      	adds	r4, r0, #3
 80012d0:	f024 0403 	bic.w	r4, r4, #3
 80012d4:	42a0      	cmp	r0, r4
 80012d6:	d0f8      	beq.n	80012ca <sbrk_aligned+0x22>
 80012d8:	1a21      	subs	r1, r4, r0
 80012da:	4628      	mov	r0, r5
 80012dc:	f000 fc92 	bl	8001c04 <_sbrk_r>
 80012e0:	3001      	adds	r0, #1
 80012e2:	d1f2      	bne.n	80012ca <sbrk_aligned+0x22>
 80012e4:	e7ef      	b.n	80012c6 <sbrk_aligned+0x1e>
 80012e6:	bf00      	nop
 80012e8:	200001d4 	.word	0x200001d4

080012ec <_malloc_r>:
 80012ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012f0:	1ccd      	adds	r5, r1, #3
 80012f2:	f025 0503 	bic.w	r5, r5, #3
 80012f6:	3508      	adds	r5, #8
 80012f8:	2d0c      	cmp	r5, #12
 80012fa:	bf38      	it	cc
 80012fc:	250c      	movcc	r5, #12
 80012fe:	2d00      	cmp	r5, #0
 8001300:	4606      	mov	r6, r0
 8001302:	db01      	blt.n	8001308 <_malloc_r+0x1c>
 8001304:	42a9      	cmp	r1, r5
 8001306:	d904      	bls.n	8001312 <_malloc_r+0x26>
 8001308:	230c      	movs	r3, #12
 800130a:	6033      	str	r3, [r6, #0]
 800130c:	2000      	movs	r0, #0
 800130e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001312:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80013e8 <_malloc_r+0xfc>
 8001316:	f000 f869 	bl	80013ec <__malloc_lock>
 800131a:	f8d8 3000 	ldr.w	r3, [r8]
 800131e:	461c      	mov	r4, r3
 8001320:	bb44      	cbnz	r4, 8001374 <_malloc_r+0x88>
 8001322:	4629      	mov	r1, r5
 8001324:	4630      	mov	r0, r6
 8001326:	f7ff ffbf 	bl	80012a8 <sbrk_aligned>
 800132a:	1c43      	adds	r3, r0, #1
 800132c:	4604      	mov	r4, r0
 800132e:	d158      	bne.n	80013e2 <_malloc_r+0xf6>
 8001330:	f8d8 4000 	ldr.w	r4, [r8]
 8001334:	4627      	mov	r7, r4
 8001336:	2f00      	cmp	r7, #0
 8001338:	d143      	bne.n	80013c2 <_malloc_r+0xd6>
 800133a:	2c00      	cmp	r4, #0
 800133c:	d04b      	beq.n	80013d6 <_malloc_r+0xea>
 800133e:	6823      	ldr	r3, [r4, #0]
 8001340:	4639      	mov	r1, r7
 8001342:	4630      	mov	r0, r6
 8001344:	eb04 0903 	add.w	r9, r4, r3
 8001348:	f000 fc5c 	bl	8001c04 <_sbrk_r>
 800134c:	4581      	cmp	r9, r0
 800134e:	d142      	bne.n	80013d6 <_malloc_r+0xea>
 8001350:	6821      	ldr	r1, [r4, #0]
 8001352:	1a6d      	subs	r5, r5, r1
 8001354:	4629      	mov	r1, r5
 8001356:	4630      	mov	r0, r6
 8001358:	f7ff ffa6 	bl	80012a8 <sbrk_aligned>
 800135c:	3001      	adds	r0, #1
 800135e:	d03a      	beq.n	80013d6 <_malloc_r+0xea>
 8001360:	6823      	ldr	r3, [r4, #0]
 8001362:	442b      	add	r3, r5
 8001364:	6023      	str	r3, [r4, #0]
 8001366:	f8d8 3000 	ldr.w	r3, [r8]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	bb62      	cbnz	r2, 80013c8 <_malloc_r+0xdc>
 800136e:	f8c8 7000 	str.w	r7, [r8]
 8001372:	e00f      	b.n	8001394 <_malloc_r+0xa8>
 8001374:	6822      	ldr	r2, [r4, #0]
 8001376:	1b52      	subs	r2, r2, r5
 8001378:	d420      	bmi.n	80013bc <_malloc_r+0xd0>
 800137a:	2a0b      	cmp	r2, #11
 800137c:	d917      	bls.n	80013ae <_malloc_r+0xc2>
 800137e:	1961      	adds	r1, r4, r5
 8001380:	42a3      	cmp	r3, r4
 8001382:	6025      	str	r5, [r4, #0]
 8001384:	bf18      	it	ne
 8001386:	6059      	strne	r1, [r3, #4]
 8001388:	6863      	ldr	r3, [r4, #4]
 800138a:	bf08      	it	eq
 800138c:	f8c8 1000 	streq.w	r1, [r8]
 8001390:	5162      	str	r2, [r4, r5]
 8001392:	604b      	str	r3, [r1, #4]
 8001394:	4630      	mov	r0, r6
 8001396:	f000 f82f 	bl	80013f8 <__malloc_unlock>
 800139a:	f104 000b 	add.w	r0, r4, #11
 800139e:	1d23      	adds	r3, r4, #4
 80013a0:	f020 0007 	bic.w	r0, r0, #7
 80013a4:	1ac2      	subs	r2, r0, r3
 80013a6:	bf1c      	itt	ne
 80013a8:	1a1b      	subne	r3, r3, r0
 80013aa:	50a3      	strne	r3, [r4, r2]
 80013ac:	e7af      	b.n	800130e <_malloc_r+0x22>
 80013ae:	6862      	ldr	r2, [r4, #4]
 80013b0:	42a3      	cmp	r3, r4
 80013b2:	bf0c      	ite	eq
 80013b4:	f8c8 2000 	streq.w	r2, [r8]
 80013b8:	605a      	strne	r2, [r3, #4]
 80013ba:	e7eb      	b.n	8001394 <_malloc_r+0xa8>
 80013bc:	4623      	mov	r3, r4
 80013be:	6864      	ldr	r4, [r4, #4]
 80013c0:	e7ae      	b.n	8001320 <_malloc_r+0x34>
 80013c2:	463c      	mov	r4, r7
 80013c4:	687f      	ldr	r7, [r7, #4]
 80013c6:	e7b6      	b.n	8001336 <_malloc_r+0x4a>
 80013c8:	461a      	mov	r2, r3
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	42a3      	cmp	r3, r4
 80013ce:	d1fb      	bne.n	80013c8 <_malloc_r+0xdc>
 80013d0:	2300      	movs	r3, #0
 80013d2:	6053      	str	r3, [r2, #4]
 80013d4:	e7de      	b.n	8001394 <_malloc_r+0xa8>
 80013d6:	230c      	movs	r3, #12
 80013d8:	6033      	str	r3, [r6, #0]
 80013da:	4630      	mov	r0, r6
 80013dc:	f000 f80c 	bl	80013f8 <__malloc_unlock>
 80013e0:	e794      	b.n	800130c <_malloc_r+0x20>
 80013e2:	6005      	str	r5, [r0, #0]
 80013e4:	e7d6      	b.n	8001394 <_malloc_r+0xa8>
 80013e6:	bf00      	nop
 80013e8:	200001d8 	.word	0x200001d8

080013ec <__malloc_lock>:
 80013ec:	4801      	ldr	r0, [pc, #4]	@ (80013f4 <__malloc_lock+0x8>)
 80013ee:	f7ff bf0e 	b.w	800120e <__retarget_lock_acquire_recursive>
 80013f2:	bf00      	nop
 80013f4:	200001d0 	.word	0x200001d0

080013f8 <__malloc_unlock>:
 80013f8:	4801      	ldr	r0, [pc, #4]	@ (8001400 <__malloc_unlock+0x8>)
 80013fa:	f7ff bf09 	b.w	8001210 <__retarget_lock_release_recursive>
 80013fe:	bf00      	nop
 8001400:	200001d0 	.word	0x200001d0

08001404 <__sfputc_r>:
 8001404:	6893      	ldr	r3, [r2, #8]
 8001406:	3b01      	subs	r3, #1
 8001408:	2b00      	cmp	r3, #0
 800140a:	b410      	push	{r4}
 800140c:	6093      	str	r3, [r2, #8]
 800140e:	da08      	bge.n	8001422 <__sfputc_r+0x1e>
 8001410:	6994      	ldr	r4, [r2, #24]
 8001412:	42a3      	cmp	r3, r4
 8001414:	db01      	blt.n	800141a <__sfputc_r+0x16>
 8001416:	290a      	cmp	r1, #10
 8001418:	d103      	bne.n	8001422 <__sfputc_r+0x1e>
 800141a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800141e:	f7ff bde8 	b.w	8000ff2 <__swbuf_r>
 8001422:	6813      	ldr	r3, [r2, #0]
 8001424:	1c58      	adds	r0, r3, #1
 8001426:	6010      	str	r0, [r2, #0]
 8001428:	7019      	strb	r1, [r3, #0]
 800142a:	4608      	mov	r0, r1
 800142c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001430:	4770      	bx	lr

08001432 <__sfputs_r>:
 8001432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001434:	4606      	mov	r6, r0
 8001436:	460f      	mov	r7, r1
 8001438:	4614      	mov	r4, r2
 800143a:	18d5      	adds	r5, r2, r3
 800143c:	42ac      	cmp	r4, r5
 800143e:	d101      	bne.n	8001444 <__sfputs_r+0x12>
 8001440:	2000      	movs	r0, #0
 8001442:	e007      	b.n	8001454 <__sfputs_r+0x22>
 8001444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001448:	463a      	mov	r2, r7
 800144a:	4630      	mov	r0, r6
 800144c:	f7ff ffda 	bl	8001404 <__sfputc_r>
 8001450:	1c43      	adds	r3, r0, #1
 8001452:	d1f3      	bne.n	800143c <__sfputs_r+0xa>
 8001454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001458 <_vfiprintf_r>:
 8001458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800145c:	460d      	mov	r5, r1
 800145e:	b09d      	sub	sp, #116	@ 0x74
 8001460:	4614      	mov	r4, r2
 8001462:	4698      	mov	r8, r3
 8001464:	4606      	mov	r6, r0
 8001466:	b118      	cbz	r0, 8001470 <_vfiprintf_r+0x18>
 8001468:	6a03      	ldr	r3, [r0, #32]
 800146a:	b90b      	cbnz	r3, 8001470 <_vfiprintf_r+0x18>
 800146c:	f7ff fcd8 	bl	8000e20 <__sinit>
 8001470:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001472:	07d9      	lsls	r1, r3, #31
 8001474:	d405      	bmi.n	8001482 <_vfiprintf_r+0x2a>
 8001476:	89ab      	ldrh	r3, [r5, #12]
 8001478:	059a      	lsls	r2, r3, #22
 800147a:	d402      	bmi.n	8001482 <_vfiprintf_r+0x2a>
 800147c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800147e:	f7ff fec6 	bl	800120e <__retarget_lock_acquire_recursive>
 8001482:	89ab      	ldrh	r3, [r5, #12]
 8001484:	071b      	lsls	r3, r3, #28
 8001486:	d501      	bpl.n	800148c <_vfiprintf_r+0x34>
 8001488:	692b      	ldr	r3, [r5, #16]
 800148a:	b99b      	cbnz	r3, 80014b4 <_vfiprintf_r+0x5c>
 800148c:	4629      	mov	r1, r5
 800148e:	4630      	mov	r0, r6
 8001490:	f7ff fdee 	bl	8001070 <__swsetup_r>
 8001494:	b170      	cbz	r0, 80014b4 <_vfiprintf_r+0x5c>
 8001496:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001498:	07dc      	lsls	r4, r3, #31
 800149a:	d504      	bpl.n	80014a6 <_vfiprintf_r+0x4e>
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	b01d      	add	sp, #116	@ 0x74
 80014a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014a6:	89ab      	ldrh	r3, [r5, #12]
 80014a8:	0598      	lsls	r0, r3, #22
 80014aa:	d4f7      	bmi.n	800149c <_vfiprintf_r+0x44>
 80014ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80014ae:	f7ff feaf 	bl	8001210 <__retarget_lock_release_recursive>
 80014b2:	e7f3      	b.n	800149c <_vfiprintf_r+0x44>
 80014b4:	2300      	movs	r3, #0
 80014b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80014b8:	2320      	movs	r3, #32
 80014ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80014be:	f8cd 800c 	str.w	r8, [sp, #12]
 80014c2:	2330      	movs	r3, #48	@ 0x30
 80014c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001674 <_vfiprintf_r+0x21c>
 80014c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80014cc:	f04f 0901 	mov.w	r9, #1
 80014d0:	4623      	mov	r3, r4
 80014d2:	469a      	mov	sl, r3
 80014d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80014d8:	b10a      	cbz	r2, 80014de <_vfiprintf_r+0x86>
 80014da:	2a25      	cmp	r2, #37	@ 0x25
 80014dc:	d1f9      	bne.n	80014d2 <_vfiprintf_r+0x7a>
 80014de:	ebba 0b04 	subs.w	fp, sl, r4
 80014e2:	d00b      	beq.n	80014fc <_vfiprintf_r+0xa4>
 80014e4:	465b      	mov	r3, fp
 80014e6:	4622      	mov	r2, r4
 80014e8:	4629      	mov	r1, r5
 80014ea:	4630      	mov	r0, r6
 80014ec:	f7ff ffa1 	bl	8001432 <__sfputs_r>
 80014f0:	3001      	adds	r0, #1
 80014f2:	f000 80a7 	beq.w	8001644 <_vfiprintf_r+0x1ec>
 80014f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80014f8:	445a      	add	r2, fp
 80014fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80014fc:	f89a 3000 	ldrb.w	r3, [sl]
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 809f 	beq.w	8001644 <_vfiprintf_r+0x1ec>
 8001506:	2300      	movs	r3, #0
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001510:	f10a 0a01 	add.w	sl, sl, #1
 8001514:	9304      	str	r3, [sp, #16]
 8001516:	9307      	str	r3, [sp, #28]
 8001518:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800151c:	931a      	str	r3, [sp, #104]	@ 0x68
 800151e:	4654      	mov	r4, sl
 8001520:	2205      	movs	r2, #5
 8001522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001526:	4853      	ldr	r0, [pc, #332]	@ (8001674 <_vfiprintf_r+0x21c>)
 8001528:	f7fe fe72 	bl	8000210 <memchr>
 800152c:	9a04      	ldr	r2, [sp, #16]
 800152e:	b9d8      	cbnz	r0, 8001568 <_vfiprintf_r+0x110>
 8001530:	06d1      	lsls	r1, r2, #27
 8001532:	bf44      	itt	mi
 8001534:	2320      	movmi	r3, #32
 8001536:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800153a:	0713      	lsls	r3, r2, #28
 800153c:	bf44      	itt	mi
 800153e:	232b      	movmi	r3, #43	@ 0x2b
 8001540:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001544:	f89a 3000 	ldrb.w	r3, [sl]
 8001548:	2b2a      	cmp	r3, #42	@ 0x2a
 800154a:	d015      	beq.n	8001578 <_vfiprintf_r+0x120>
 800154c:	9a07      	ldr	r2, [sp, #28]
 800154e:	4654      	mov	r4, sl
 8001550:	2000      	movs	r0, #0
 8001552:	f04f 0c0a 	mov.w	ip, #10
 8001556:	4621      	mov	r1, r4
 8001558:	f811 3b01 	ldrb.w	r3, [r1], #1
 800155c:	3b30      	subs	r3, #48	@ 0x30
 800155e:	2b09      	cmp	r3, #9
 8001560:	d94b      	bls.n	80015fa <_vfiprintf_r+0x1a2>
 8001562:	b1b0      	cbz	r0, 8001592 <_vfiprintf_r+0x13a>
 8001564:	9207      	str	r2, [sp, #28]
 8001566:	e014      	b.n	8001592 <_vfiprintf_r+0x13a>
 8001568:	eba0 0308 	sub.w	r3, r0, r8
 800156c:	fa09 f303 	lsl.w	r3, r9, r3
 8001570:	4313      	orrs	r3, r2
 8001572:	9304      	str	r3, [sp, #16]
 8001574:	46a2      	mov	sl, r4
 8001576:	e7d2      	b.n	800151e <_vfiprintf_r+0xc6>
 8001578:	9b03      	ldr	r3, [sp, #12]
 800157a:	1d19      	adds	r1, r3, #4
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	9103      	str	r1, [sp, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	bfbb      	ittet	lt
 8001584:	425b      	neglt	r3, r3
 8001586:	f042 0202 	orrlt.w	r2, r2, #2
 800158a:	9307      	strge	r3, [sp, #28]
 800158c:	9307      	strlt	r3, [sp, #28]
 800158e:	bfb8      	it	lt
 8001590:	9204      	strlt	r2, [sp, #16]
 8001592:	7823      	ldrb	r3, [r4, #0]
 8001594:	2b2e      	cmp	r3, #46	@ 0x2e
 8001596:	d10a      	bne.n	80015ae <_vfiprintf_r+0x156>
 8001598:	7863      	ldrb	r3, [r4, #1]
 800159a:	2b2a      	cmp	r3, #42	@ 0x2a
 800159c:	d132      	bne.n	8001604 <_vfiprintf_r+0x1ac>
 800159e:	9b03      	ldr	r3, [sp, #12]
 80015a0:	1d1a      	adds	r2, r3, #4
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	9203      	str	r2, [sp, #12]
 80015a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80015aa:	3402      	adds	r4, #2
 80015ac:	9305      	str	r3, [sp, #20]
 80015ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001684 <_vfiprintf_r+0x22c>
 80015b2:	7821      	ldrb	r1, [r4, #0]
 80015b4:	2203      	movs	r2, #3
 80015b6:	4650      	mov	r0, sl
 80015b8:	f7fe fe2a 	bl	8000210 <memchr>
 80015bc:	b138      	cbz	r0, 80015ce <_vfiprintf_r+0x176>
 80015be:	9b04      	ldr	r3, [sp, #16]
 80015c0:	eba0 000a 	sub.w	r0, r0, sl
 80015c4:	2240      	movs	r2, #64	@ 0x40
 80015c6:	4082      	lsls	r2, r0
 80015c8:	4313      	orrs	r3, r2
 80015ca:	3401      	adds	r4, #1
 80015cc:	9304      	str	r3, [sp, #16]
 80015ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015d2:	4829      	ldr	r0, [pc, #164]	@ (8001678 <_vfiprintf_r+0x220>)
 80015d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80015d8:	2206      	movs	r2, #6
 80015da:	f7fe fe19 	bl	8000210 <memchr>
 80015de:	2800      	cmp	r0, #0
 80015e0:	d03f      	beq.n	8001662 <_vfiprintf_r+0x20a>
 80015e2:	4b26      	ldr	r3, [pc, #152]	@ (800167c <_vfiprintf_r+0x224>)
 80015e4:	bb1b      	cbnz	r3, 800162e <_vfiprintf_r+0x1d6>
 80015e6:	9b03      	ldr	r3, [sp, #12]
 80015e8:	3307      	adds	r3, #7
 80015ea:	f023 0307 	bic.w	r3, r3, #7
 80015ee:	3308      	adds	r3, #8
 80015f0:	9303      	str	r3, [sp, #12]
 80015f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80015f4:	443b      	add	r3, r7
 80015f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80015f8:	e76a      	b.n	80014d0 <_vfiprintf_r+0x78>
 80015fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80015fe:	460c      	mov	r4, r1
 8001600:	2001      	movs	r0, #1
 8001602:	e7a8      	b.n	8001556 <_vfiprintf_r+0xfe>
 8001604:	2300      	movs	r3, #0
 8001606:	3401      	adds	r4, #1
 8001608:	9305      	str	r3, [sp, #20]
 800160a:	4619      	mov	r1, r3
 800160c:	f04f 0c0a 	mov.w	ip, #10
 8001610:	4620      	mov	r0, r4
 8001612:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001616:	3a30      	subs	r2, #48	@ 0x30
 8001618:	2a09      	cmp	r2, #9
 800161a:	d903      	bls.n	8001624 <_vfiprintf_r+0x1cc>
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0c6      	beq.n	80015ae <_vfiprintf_r+0x156>
 8001620:	9105      	str	r1, [sp, #20]
 8001622:	e7c4      	b.n	80015ae <_vfiprintf_r+0x156>
 8001624:	fb0c 2101 	mla	r1, ip, r1, r2
 8001628:	4604      	mov	r4, r0
 800162a:	2301      	movs	r3, #1
 800162c:	e7f0      	b.n	8001610 <_vfiprintf_r+0x1b8>
 800162e:	ab03      	add	r3, sp, #12
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	462a      	mov	r2, r5
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <_vfiprintf_r+0x228>)
 8001636:	a904      	add	r1, sp, #16
 8001638:	4630      	mov	r0, r6
 800163a:	f3af 8000 	nop.w
 800163e:	4607      	mov	r7, r0
 8001640:	1c78      	adds	r0, r7, #1
 8001642:	d1d6      	bne.n	80015f2 <_vfiprintf_r+0x19a>
 8001644:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001646:	07d9      	lsls	r1, r3, #31
 8001648:	d405      	bmi.n	8001656 <_vfiprintf_r+0x1fe>
 800164a:	89ab      	ldrh	r3, [r5, #12]
 800164c:	059a      	lsls	r2, r3, #22
 800164e:	d402      	bmi.n	8001656 <_vfiprintf_r+0x1fe>
 8001650:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001652:	f7ff fddd 	bl	8001210 <__retarget_lock_release_recursive>
 8001656:	89ab      	ldrh	r3, [r5, #12]
 8001658:	065b      	lsls	r3, r3, #25
 800165a:	f53f af1f 	bmi.w	800149c <_vfiprintf_r+0x44>
 800165e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001660:	e71e      	b.n	80014a0 <_vfiprintf_r+0x48>
 8001662:	ab03      	add	r3, sp, #12
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	462a      	mov	r2, r5
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <_vfiprintf_r+0x228>)
 800166a:	a904      	add	r1, sp, #16
 800166c:	4630      	mov	r0, r6
 800166e:	f000 f879 	bl	8001764 <_printf_i>
 8001672:	e7e4      	b.n	800163e <_vfiprintf_r+0x1e6>
 8001674:	08001c65 	.word	0x08001c65
 8001678:	08001c6f 	.word	0x08001c6f
 800167c:	00000000 	.word	0x00000000
 8001680:	08001433 	.word	0x08001433
 8001684:	08001c6b 	.word	0x08001c6b

08001688 <_printf_common>:
 8001688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800168c:	4616      	mov	r6, r2
 800168e:	4698      	mov	r8, r3
 8001690:	688a      	ldr	r2, [r1, #8]
 8001692:	690b      	ldr	r3, [r1, #16]
 8001694:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001698:	4293      	cmp	r3, r2
 800169a:	bfb8      	it	lt
 800169c:	4613      	movlt	r3, r2
 800169e:	6033      	str	r3, [r6, #0]
 80016a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80016a4:	4607      	mov	r7, r0
 80016a6:	460c      	mov	r4, r1
 80016a8:	b10a      	cbz	r2, 80016ae <_printf_common+0x26>
 80016aa:	3301      	adds	r3, #1
 80016ac:	6033      	str	r3, [r6, #0]
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	0699      	lsls	r1, r3, #26
 80016b2:	bf42      	ittt	mi
 80016b4:	6833      	ldrmi	r3, [r6, #0]
 80016b6:	3302      	addmi	r3, #2
 80016b8:	6033      	strmi	r3, [r6, #0]
 80016ba:	6825      	ldr	r5, [r4, #0]
 80016bc:	f015 0506 	ands.w	r5, r5, #6
 80016c0:	d106      	bne.n	80016d0 <_printf_common+0x48>
 80016c2:	f104 0a19 	add.w	sl, r4, #25
 80016c6:	68e3      	ldr	r3, [r4, #12]
 80016c8:	6832      	ldr	r2, [r6, #0]
 80016ca:	1a9b      	subs	r3, r3, r2
 80016cc:	42ab      	cmp	r3, r5
 80016ce:	dc26      	bgt.n	800171e <_printf_common+0x96>
 80016d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80016d4:	6822      	ldr	r2, [r4, #0]
 80016d6:	3b00      	subs	r3, #0
 80016d8:	bf18      	it	ne
 80016da:	2301      	movne	r3, #1
 80016dc:	0692      	lsls	r2, r2, #26
 80016de:	d42b      	bmi.n	8001738 <_printf_common+0xb0>
 80016e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80016e4:	4641      	mov	r1, r8
 80016e6:	4638      	mov	r0, r7
 80016e8:	47c8      	blx	r9
 80016ea:	3001      	adds	r0, #1
 80016ec:	d01e      	beq.n	800172c <_printf_common+0xa4>
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	6922      	ldr	r2, [r4, #16]
 80016f2:	f003 0306 	and.w	r3, r3, #6
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	bf02      	ittt	eq
 80016fa:	68e5      	ldreq	r5, [r4, #12]
 80016fc:	6833      	ldreq	r3, [r6, #0]
 80016fe:	1aed      	subeq	r5, r5, r3
 8001700:	68a3      	ldr	r3, [r4, #8]
 8001702:	bf0c      	ite	eq
 8001704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001708:	2500      	movne	r5, #0
 800170a:	4293      	cmp	r3, r2
 800170c:	bfc4      	itt	gt
 800170e:	1a9b      	subgt	r3, r3, r2
 8001710:	18ed      	addgt	r5, r5, r3
 8001712:	2600      	movs	r6, #0
 8001714:	341a      	adds	r4, #26
 8001716:	42b5      	cmp	r5, r6
 8001718:	d11a      	bne.n	8001750 <_printf_common+0xc8>
 800171a:	2000      	movs	r0, #0
 800171c:	e008      	b.n	8001730 <_printf_common+0xa8>
 800171e:	2301      	movs	r3, #1
 8001720:	4652      	mov	r2, sl
 8001722:	4641      	mov	r1, r8
 8001724:	4638      	mov	r0, r7
 8001726:	47c8      	blx	r9
 8001728:	3001      	adds	r0, #1
 800172a:	d103      	bne.n	8001734 <_printf_common+0xac>
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001734:	3501      	adds	r5, #1
 8001736:	e7c6      	b.n	80016c6 <_printf_common+0x3e>
 8001738:	18e1      	adds	r1, r4, r3
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	2030      	movs	r0, #48	@ 0x30
 800173e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001742:	4422      	add	r2, r4
 8001744:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001748:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800174c:	3302      	adds	r3, #2
 800174e:	e7c7      	b.n	80016e0 <_printf_common+0x58>
 8001750:	2301      	movs	r3, #1
 8001752:	4622      	mov	r2, r4
 8001754:	4641      	mov	r1, r8
 8001756:	4638      	mov	r0, r7
 8001758:	47c8      	blx	r9
 800175a:	3001      	adds	r0, #1
 800175c:	d0e6      	beq.n	800172c <_printf_common+0xa4>
 800175e:	3601      	adds	r6, #1
 8001760:	e7d9      	b.n	8001716 <_printf_common+0x8e>
	...

08001764 <_printf_i>:
 8001764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001768:	7e0f      	ldrb	r7, [r1, #24]
 800176a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800176c:	2f78      	cmp	r7, #120	@ 0x78
 800176e:	4691      	mov	r9, r2
 8001770:	4680      	mov	r8, r0
 8001772:	460c      	mov	r4, r1
 8001774:	469a      	mov	sl, r3
 8001776:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800177a:	d807      	bhi.n	800178c <_printf_i+0x28>
 800177c:	2f62      	cmp	r7, #98	@ 0x62
 800177e:	d80a      	bhi.n	8001796 <_printf_i+0x32>
 8001780:	2f00      	cmp	r7, #0
 8001782:	f000 80d2 	beq.w	800192a <_printf_i+0x1c6>
 8001786:	2f58      	cmp	r7, #88	@ 0x58
 8001788:	f000 80b9 	beq.w	80018fe <_printf_i+0x19a>
 800178c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001790:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001794:	e03a      	b.n	800180c <_printf_i+0xa8>
 8001796:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800179a:	2b15      	cmp	r3, #21
 800179c:	d8f6      	bhi.n	800178c <_printf_i+0x28>
 800179e:	a101      	add	r1, pc, #4	@ (adr r1, 80017a4 <_printf_i+0x40>)
 80017a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80017a4:	080017fd 	.word	0x080017fd
 80017a8:	08001811 	.word	0x08001811
 80017ac:	0800178d 	.word	0x0800178d
 80017b0:	0800178d 	.word	0x0800178d
 80017b4:	0800178d 	.word	0x0800178d
 80017b8:	0800178d 	.word	0x0800178d
 80017bc:	08001811 	.word	0x08001811
 80017c0:	0800178d 	.word	0x0800178d
 80017c4:	0800178d 	.word	0x0800178d
 80017c8:	0800178d 	.word	0x0800178d
 80017cc:	0800178d 	.word	0x0800178d
 80017d0:	08001911 	.word	0x08001911
 80017d4:	0800183b 	.word	0x0800183b
 80017d8:	080018cb 	.word	0x080018cb
 80017dc:	0800178d 	.word	0x0800178d
 80017e0:	0800178d 	.word	0x0800178d
 80017e4:	08001933 	.word	0x08001933
 80017e8:	0800178d 	.word	0x0800178d
 80017ec:	0800183b 	.word	0x0800183b
 80017f0:	0800178d 	.word	0x0800178d
 80017f4:	0800178d 	.word	0x0800178d
 80017f8:	080018d3 	.word	0x080018d3
 80017fc:	6833      	ldr	r3, [r6, #0]
 80017fe:	1d1a      	adds	r2, r3, #4
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6032      	str	r2, [r6, #0]
 8001804:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001808:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800180c:	2301      	movs	r3, #1
 800180e:	e09d      	b.n	800194c <_printf_i+0x1e8>
 8001810:	6833      	ldr	r3, [r6, #0]
 8001812:	6820      	ldr	r0, [r4, #0]
 8001814:	1d19      	adds	r1, r3, #4
 8001816:	6031      	str	r1, [r6, #0]
 8001818:	0606      	lsls	r6, r0, #24
 800181a:	d501      	bpl.n	8001820 <_printf_i+0xbc>
 800181c:	681d      	ldr	r5, [r3, #0]
 800181e:	e003      	b.n	8001828 <_printf_i+0xc4>
 8001820:	0645      	lsls	r5, r0, #25
 8001822:	d5fb      	bpl.n	800181c <_printf_i+0xb8>
 8001824:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001828:	2d00      	cmp	r5, #0
 800182a:	da03      	bge.n	8001834 <_printf_i+0xd0>
 800182c:	232d      	movs	r3, #45	@ 0x2d
 800182e:	426d      	negs	r5, r5
 8001830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001834:	4859      	ldr	r0, [pc, #356]	@ (800199c <_printf_i+0x238>)
 8001836:	230a      	movs	r3, #10
 8001838:	e011      	b.n	800185e <_printf_i+0xfa>
 800183a:	6821      	ldr	r1, [r4, #0]
 800183c:	6833      	ldr	r3, [r6, #0]
 800183e:	0608      	lsls	r0, r1, #24
 8001840:	f853 5b04 	ldr.w	r5, [r3], #4
 8001844:	d402      	bmi.n	800184c <_printf_i+0xe8>
 8001846:	0649      	lsls	r1, r1, #25
 8001848:	bf48      	it	mi
 800184a:	b2ad      	uxthmi	r5, r5
 800184c:	2f6f      	cmp	r7, #111	@ 0x6f
 800184e:	4853      	ldr	r0, [pc, #332]	@ (800199c <_printf_i+0x238>)
 8001850:	6033      	str	r3, [r6, #0]
 8001852:	bf14      	ite	ne
 8001854:	230a      	movne	r3, #10
 8001856:	2308      	moveq	r3, #8
 8001858:	2100      	movs	r1, #0
 800185a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800185e:	6866      	ldr	r6, [r4, #4]
 8001860:	60a6      	str	r6, [r4, #8]
 8001862:	2e00      	cmp	r6, #0
 8001864:	bfa2      	ittt	ge
 8001866:	6821      	ldrge	r1, [r4, #0]
 8001868:	f021 0104 	bicge.w	r1, r1, #4
 800186c:	6021      	strge	r1, [r4, #0]
 800186e:	b90d      	cbnz	r5, 8001874 <_printf_i+0x110>
 8001870:	2e00      	cmp	r6, #0
 8001872:	d04b      	beq.n	800190c <_printf_i+0x1a8>
 8001874:	4616      	mov	r6, r2
 8001876:	fbb5 f1f3 	udiv	r1, r5, r3
 800187a:	fb03 5711 	mls	r7, r3, r1, r5
 800187e:	5dc7      	ldrb	r7, [r0, r7]
 8001880:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001884:	462f      	mov	r7, r5
 8001886:	42bb      	cmp	r3, r7
 8001888:	460d      	mov	r5, r1
 800188a:	d9f4      	bls.n	8001876 <_printf_i+0x112>
 800188c:	2b08      	cmp	r3, #8
 800188e:	d10b      	bne.n	80018a8 <_printf_i+0x144>
 8001890:	6823      	ldr	r3, [r4, #0]
 8001892:	07df      	lsls	r7, r3, #31
 8001894:	d508      	bpl.n	80018a8 <_printf_i+0x144>
 8001896:	6923      	ldr	r3, [r4, #16]
 8001898:	6861      	ldr	r1, [r4, #4]
 800189a:	4299      	cmp	r1, r3
 800189c:	bfde      	ittt	le
 800189e:	2330      	movle	r3, #48	@ 0x30
 80018a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80018a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80018a8:	1b92      	subs	r2, r2, r6
 80018aa:	6122      	str	r2, [r4, #16]
 80018ac:	f8cd a000 	str.w	sl, [sp]
 80018b0:	464b      	mov	r3, r9
 80018b2:	aa03      	add	r2, sp, #12
 80018b4:	4621      	mov	r1, r4
 80018b6:	4640      	mov	r0, r8
 80018b8:	f7ff fee6 	bl	8001688 <_printf_common>
 80018bc:	3001      	adds	r0, #1
 80018be:	d14a      	bne.n	8001956 <_printf_i+0x1f2>
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	b004      	add	sp, #16
 80018c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018ca:	6823      	ldr	r3, [r4, #0]
 80018cc:	f043 0320 	orr.w	r3, r3, #32
 80018d0:	6023      	str	r3, [r4, #0]
 80018d2:	4833      	ldr	r0, [pc, #204]	@ (80019a0 <_printf_i+0x23c>)
 80018d4:	2778      	movs	r7, #120	@ 0x78
 80018d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	6831      	ldr	r1, [r6, #0]
 80018de:	061f      	lsls	r7, r3, #24
 80018e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80018e4:	d402      	bmi.n	80018ec <_printf_i+0x188>
 80018e6:	065f      	lsls	r7, r3, #25
 80018e8:	bf48      	it	mi
 80018ea:	b2ad      	uxthmi	r5, r5
 80018ec:	6031      	str	r1, [r6, #0]
 80018ee:	07d9      	lsls	r1, r3, #31
 80018f0:	bf44      	itt	mi
 80018f2:	f043 0320 	orrmi.w	r3, r3, #32
 80018f6:	6023      	strmi	r3, [r4, #0]
 80018f8:	b11d      	cbz	r5, 8001902 <_printf_i+0x19e>
 80018fa:	2310      	movs	r3, #16
 80018fc:	e7ac      	b.n	8001858 <_printf_i+0xf4>
 80018fe:	4827      	ldr	r0, [pc, #156]	@ (800199c <_printf_i+0x238>)
 8001900:	e7e9      	b.n	80018d6 <_printf_i+0x172>
 8001902:	6823      	ldr	r3, [r4, #0]
 8001904:	f023 0320 	bic.w	r3, r3, #32
 8001908:	6023      	str	r3, [r4, #0]
 800190a:	e7f6      	b.n	80018fa <_printf_i+0x196>
 800190c:	4616      	mov	r6, r2
 800190e:	e7bd      	b.n	800188c <_printf_i+0x128>
 8001910:	6833      	ldr	r3, [r6, #0]
 8001912:	6825      	ldr	r5, [r4, #0]
 8001914:	6961      	ldr	r1, [r4, #20]
 8001916:	1d18      	adds	r0, r3, #4
 8001918:	6030      	str	r0, [r6, #0]
 800191a:	062e      	lsls	r6, r5, #24
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	d501      	bpl.n	8001924 <_printf_i+0x1c0>
 8001920:	6019      	str	r1, [r3, #0]
 8001922:	e002      	b.n	800192a <_printf_i+0x1c6>
 8001924:	0668      	lsls	r0, r5, #25
 8001926:	d5fb      	bpl.n	8001920 <_printf_i+0x1bc>
 8001928:	8019      	strh	r1, [r3, #0]
 800192a:	2300      	movs	r3, #0
 800192c:	6123      	str	r3, [r4, #16]
 800192e:	4616      	mov	r6, r2
 8001930:	e7bc      	b.n	80018ac <_printf_i+0x148>
 8001932:	6833      	ldr	r3, [r6, #0]
 8001934:	1d1a      	adds	r2, r3, #4
 8001936:	6032      	str	r2, [r6, #0]
 8001938:	681e      	ldr	r6, [r3, #0]
 800193a:	6862      	ldr	r2, [r4, #4]
 800193c:	2100      	movs	r1, #0
 800193e:	4630      	mov	r0, r6
 8001940:	f7fe fc66 	bl	8000210 <memchr>
 8001944:	b108      	cbz	r0, 800194a <_printf_i+0x1e6>
 8001946:	1b80      	subs	r0, r0, r6
 8001948:	6060      	str	r0, [r4, #4]
 800194a:	6863      	ldr	r3, [r4, #4]
 800194c:	6123      	str	r3, [r4, #16]
 800194e:	2300      	movs	r3, #0
 8001950:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001954:	e7aa      	b.n	80018ac <_printf_i+0x148>
 8001956:	6923      	ldr	r3, [r4, #16]
 8001958:	4632      	mov	r2, r6
 800195a:	4649      	mov	r1, r9
 800195c:	4640      	mov	r0, r8
 800195e:	47d0      	blx	sl
 8001960:	3001      	adds	r0, #1
 8001962:	d0ad      	beq.n	80018c0 <_printf_i+0x15c>
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	079b      	lsls	r3, r3, #30
 8001968:	d413      	bmi.n	8001992 <_printf_i+0x22e>
 800196a:	68e0      	ldr	r0, [r4, #12]
 800196c:	9b03      	ldr	r3, [sp, #12]
 800196e:	4298      	cmp	r0, r3
 8001970:	bfb8      	it	lt
 8001972:	4618      	movlt	r0, r3
 8001974:	e7a6      	b.n	80018c4 <_printf_i+0x160>
 8001976:	2301      	movs	r3, #1
 8001978:	4632      	mov	r2, r6
 800197a:	4649      	mov	r1, r9
 800197c:	4640      	mov	r0, r8
 800197e:	47d0      	blx	sl
 8001980:	3001      	adds	r0, #1
 8001982:	d09d      	beq.n	80018c0 <_printf_i+0x15c>
 8001984:	3501      	adds	r5, #1
 8001986:	68e3      	ldr	r3, [r4, #12]
 8001988:	9903      	ldr	r1, [sp, #12]
 800198a:	1a5b      	subs	r3, r3, r1
 800198c:	42ab      	cmp	r3, r5
 800198e:	dcf2      	bgt.n	8001976 <_printf_i+0x212>
 8001990:	e7eb      	b.n	800196a <_printf_i+0x206>
 8001992:	2500      	movs	r5, #0
 8001994:	f104 0619 	add.w	r6, r4, #25
 8001998:	e7f5      	b.n	8001986 <_printf_i+0x222>
 800199a:	bf00      	nop
 800199c:	08001c76 	.word	0x08001c76
 80019a0:	08001c87 	.word	0x08001c87

080019a4 <__sflush_r>:
 80019a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80019a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019ac:	0716      	lsls	r6, r2, #28
 80019ae:	4605      	mov	r5, r0
 80019b0:	460c      	mov	r4, r1
 80019b2:	d454      	bmi.n	8001a5e <__sflush_r+0xba>
 80019b4:	684b      	ldr	r3, [r1, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	dc02      	bgt.n	80019c0 <__sflush_r+0x1c>
 80019ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80019bc:	2b00      	cmp	r3, #0
 80019be:	dd48      	ble.n	8001a52 <__sflush_r+0xae>
 80019c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80019c2:	2e00      	cmp	r6, #0
 80019c4:	d045      	beq.n	8001a52 <__sflush_r+0xae>
 80019c6:	2300      	movs	r3, #0
 80019c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80019cc:	682f      	ldr	r7, [r5, #0]
 80019ce:	6a21      	ldr	r1, [r4, #32]
 80019d0:	602b      	str	r3, [r5, #0]
 80019d2:	d030      	beq.n	8001a36 <__sflush_r+0x92>
 80019d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80019d6:	89a3      	ldrh	r3, [r4, #12]
 80019d8:	0759      	lsls	r1, r3, #29
 80019da:	d505      	bpl.n	80019e8 <__sflush_r+0x44>
 80019dc:	6863      	ldr	r3, [r4, #4]
 80019de:	1ad2      	subs	r2, r2, r3
 80019e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80019e2:	b10b      	cbz	r3, 80019e8 <__sflush_r+0x44>
 80019e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80019e6:	1ad2      	subs	r2, r2, r3
 80019e8:	2300      	movs	r3, #0
 80019ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80019ec:	6a21      	ldr	r1, [r4, #32]
 80019ee:	4628      	mov	r0, r5
 80019f0:	47b0      	blx	r6
 80019f2:	1c43      	adds	r3, r0, #1
 80019f4:	89a3      	ldrh	r3, [r4, #12]
 80019f6:	d106      	bne.n	8001a06 <__sflush_r+0x62>
 80019f8:	6829      	ldr	r1, [r5, #0]
 80019fa:	291d      	cmp	r1, #29
 80019fc:	d82b      	bhi.n	8001a56 <__sflush_r+0xb2>
 80019fe:	4a2a      	ldr	r2, [pc, #168]	@ (8001aa8 <__sflush_r+0x104>)
 8001a00:	410a      	asrs	r2, r1
 8001a02:	07d6      	lsls	r6, r2, #31
 8001a04:	d427      	bmi.n	8001a56 <__sflush_r+0xb2>
 8001a06:	2200      	movs	r2, #0
 8001a08:	6062      	str	r2, [r4, #4]
 8001a0a:	04d9      	lsls	r1, r3, #19
 8001a0c:	6922      	ldr	r2, [r4, #16]
 8001a0e:	6022      	str	r2, [r4, #0]
 8001a10:	d504      	bpl.n	8001a1c <__sflush_r+0x78>
 8001a12:	1c42      	adds	r2, r0, #1
 8001a14:	d101      	bne.n	8001a1a <__sflush_r+0x76>
 8001a16:	682b      	ldr	r3, [r5, #0]
 8001a18:	b903      	cbnz	r3, 8001a1c <__sflush_r+0x78>
 8001a1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8001a1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a1e:	602f      	str	r7, [r5, #0]
 8001a20:	b1b9      	cbz	r1, 8001a52 <__sflush_r+0xae>
 8001a22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001a26:	4299      	cmp	r1, r3
 8001a28:	d002      	beq.n	8001a30 <__sflush_r+0x8c>
 8001a2a:	4628      	mov	r0, r5
 8001a2c:	f7ff fbf2 	bl	8001214 <_free_r>
 8001a30:	2300      	movs	r3, #0
 8001a32:	6363      	str	r3, [r4, #52]	@ 0x34
 8001a34:	e00d      	b.n	8001a52 <__sflush_r+0xae>
 8001a36:	2301      	movs	r3, #1
 8001a38:	4628      	mov	r0, r5
 8001a3a:	47b0      	blx	r6
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	1c50      	adds	r0, r2, #1
 8001a40:	d1c9      	bne.n	80019d6 <__sflush_r+0x32>
 8001a42:	682b      	ldr	r3, [r5, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0c6      	beq.n	80019d6 <__sflush_r+0x32>
 8001a48:	2b1d      	cmp	r3, #29
 8001a4a:	d001      	beq.n	8001a50 <__sflush_r+0xac>
 8001a4c:	2b16      	cmp	r3, #22
 8001a4e:	d11e      	bne.n	8001a8e <__sflush_r+0xea>
 8001a50:	602f      	str	r7, [r5, #0]
 8001a52:	2000      	movs	r0, #0
 8001a54:	e022      	b.n	8001a9c <__sflush_r+0xf8>
 8001a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a5a:	b21b      	sxth	r3, r3
 8001a5c:	e01b      	b.n	8001a96 <__sflush_r+0xf2>
 8001a5e:	690f      	ldr	r7, [r1, #16]
 8001a60:	2f00      	cmp	r7, #0
 8001a62:	d0f6      	beq.n	8001a52 <__sflush_r+0xae>
 8001a64:	0793      	lsls	r3, r2, #30
 8001a66:	680e      	ldr	r6, [r1, #0]
 8001a68:	bf08      	it	eq
 8001a6a:	694b      	ldreq	r3, [r1, #20]
 8001a6c:	600f      	str	r7, [r1, #0]
 8001a6e:	bf18      	it	ne
 8001a70:	2300      	movne	r3, #0
 8001a72:	eba6 0807 	sub.w	r8, r6, r7
 8001a76:	608b      	str	r3, [r1, #8]
 8001a78:	f1b8 0f00 	cmp.w	r8, #0
 8001a7c:	dde9      	ble.n	8001a52 <__sflush_r+0xae>
 8001a7e:	6a21      	ldr	r1, [r4, #32]
 8001a80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001a82:	4643      	mov	r3, r8
 8001a84:	463a      	mov	r2, r7
 8001a86:	4628      	mov	r0, r5
 8001a88:	47b0      	blx	r6
 8001a8a:	2800      	cmp	r0, #0
 8001a8c:	dc08      	bgt.n	8001aa0 <__sflush_r+0xfc>
 8001a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a96:	81a3      	strh	r3, [r4, #12]
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001aa0:	4407      	add	r7, r0
 8001aa2:	eba8 0800 	sub.w	r8, r8, r0
 8001aa6:	e7e7      	b.n	8001a78 <__sflush_r+0xd4>
 8001aa8:	dfbffffe 	.word	0xdfbffffe

08001aac <_fflush_r>:
 8001aac:	b538      	push	{r3, r4, r5, lr}
 8001aae:	690b      	ldr	r3, [r1, #16]
 8001ab0:	4605      	mov	r5, r0
 8001ab2:	460c      	mov	r4, r1
 8001ab4:	b913      	cbnz	r3, 8001abc <_fflush_r+0x10>
 8001ab6:	2500      	movs	r5, #0
 8001ab8:	4628      	mov	r0, r5
 8001aba:	bd38      	pop	{r3, r4, r5, pc}
 8001abc:	b118      	cbz	r0, 8001ac6 <_fflush_r+0x1a>
 8001abe:	6a03      	ldr	r3, [r0, #32]
 8001ac0:	b90b      	cbnz	r3, 8001ac6 <_fflush_r+0x1a>
 8001ac2:	f7ff f9ad 	bl	8000e20 <__sinit>
 8001ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f3      	beq.n	8001ab6 <_fflush_r+0xa>
 8001ace:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001ad0:	07d0      	lsls	r0, r2, #31
 8001ad2:	d404      	bmi.n	8001ade <_fflush_r+0x32>
 8001ad4:	0599      	lsls	r1, r3, #22
 8001ad6:	d402      	bmi.n	8001ade <_fflush_r+0x32>
 8001ad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ada:	f7ff fb98 	bl	800120e <__retarget_lock_acquire_recursive>
 8001ade:	4628      	mov	r0, r5
 8001ae0:	4621      	mov	r1, r4
 8001ae2:	f7ff ff5f 	bl	80019a4 <__sflush_r>
 8001ae6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001ae8:	07da      	lsls	r2, r3, #31
 8001aea:	4605      	mov	r5, r0
 8001aec:	d4e4      	bmi.n	8001ab8 <_fflush_r+0xc>
 8001aee:	89a3      	ldrh	r3, [r4, #12]
 8001af0:	059b      	lsls	r3, r3, #22
 8001af2:	d4e1      	bmi.n	8001ab8 <_fflush_r+0xc>
 8001af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001af6:	f7ff fb8b 	bl	8001210 <__retarget_lock_release_recursive>
 8001afa:	e7dd      	b.n	8001ab8 <_fflush_r+0xc>

08001afc <__swhatbuf_r>:
 8001afc:	b570      	push	{r4, r5, r6, lr}
 8001afe:	460c      	mov	r4, r1
 8001b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b04:	2900      	cmp	r1, #0
 8001b06:	b096      	sub	sp, #88	@ 0x58
 8001b08:	4615      	mov	r5, r2
 8001b0a:	461e      	mov	r6, r3
 8001b0c:	da0d      	bge.n	8001b2a <__swhatbuf_r+0x2e>
 8001b0e:	89a3      	ldrh	r3, [r4, #12]
 8001b10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001b14:	f04f 0100 	mov.w	r1, #0
 8001b18:	bf14      	ite	ne
 8001b1a:	2340      	movne	r3, #64	@ 0x40
 8001b1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001b20:	2000      	movs	r0, #0
 8001b22:	6031      	str	r1, [r6, #0]
 8001b24:	602b      	str	r3, [r5, #0]
 8001b26:	b016      	add	sp, #88	@ 0x58
 8001b28:	bd70      	pop	{r4, r5, r6, pc}
 8001b2a:	466a      	mov	r2, sp
 8001b2c:	f000 f848 	bl	8001bc0 <_fstat_r>
 8001b30:	2800      	cmp	r0, #0
 8001b32:	dbec      	blt.n	8001b0e <__swhatbuf_r+0x12>
 8001b34:	9901      	ldr	r1, [sp, #4]
 8001b36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001b3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001b3e:	4259      	negs	r1, r3
 8001b40:	4159      	adcs	r1, r3
 8001b42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b46:	e7eb      	b.n	8001b20 <__swhatbuf_r+0x24>

08001b48 <__smakebuf_r>:
 8001b48:	898b      	ldrh	r3, [r1, #12]
 8001b4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b4c:	079d      	lsls	r5, r3, #30
 8001b4e:	4606      	mov	r6, r0
 8001b50:	460c      	mov	r4, r1
 8001b52:	d507      	bpl.n	8001b64 <__smakebuf_r+0x1c>
 8001b54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001b58:	6023      	str	r3, [r4, #0]
 8001b5a:	6123      	str	r3, [r4, #16]
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	6163      	str	r3, [r4, #20]
 8001b60:	b003      	add	sp, #12
 8001b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b64:	ab01      	add	r3, sp, #4
 8001b66:	466a      	mov	r2, sp
 8001b68:	f7ff ffc8 	bl	8001afc <__swhatbuf_r>
 8001b6c:	9f00      	ldr	r7, [sp, #0]
 8001b6e:	4605      	mov	r5, r0
 8001b70:	4639      	mov	r1, r7
 8001b72:	4630      	mov	r0, r6
 8001b74:	f7ff fbba 	bl	80012ec <_malloc_r>
 8001b78:	b948      	cbnz	r0, 8001b8e <__smakebuf_r+0x46>
 8001b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b7e:	059a      	lsls	r2, r3, #22
 8001b80:	d4ee      	bmi.n	8001b60 <__smakebuf_r+0x18>
 8001b82:	f023 0303 	bic.w	r3, r3, #3
 8001b86:	f043 0302 	orr.w	r3, r3, #2
 8001b8a:	81a3      	strh	r3, [r4, #12]
 8001b8c:	e7e2      	b.n	8001b54 <__smakebuf_r+0xc>
 8001b8e:	89a3      	ldrh	r3, [r4, #12]
 8001b90:	6020      	str	r0, [r4, #0]
 8001b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b96:	81a3      	strh	r3, [r4, #12]
 8001b98:	9b01      	ldr	r3, [sp, #4]
 8001b9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001b9e:	b15b      	cbz	r3, 8001bb8 <__smakebuf_r+0x70>
 8001ba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ba4:	4630      	mov	r0, r6
 8001ba6:	f000 f81d 	bl	8001be4 <_isatty_r>
 8001baa:	b128      	cbz	r0, 8001bb8 <__smakebuf_r+0x70>
 8001bac:	89a3      	ldrh	r3, [r4, #12]
 8001bae:	f023 0303 	bic.w	r3, r3, #3
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	81a3      	strh	r3, [r4, #12]
 8001bb8:	89a3      	ldrh	r3, [r4, #12]
 8001bba:	431d      	orrs	r5, r3
 8001bbc:	81a5      	strh	r5, [r4, #12]
 8001bbe:	e7cf      	b.n	8001b60 <__smakebuf_r+0x18>

08001bc0 <_fstat_r>:
 8001bc0:	b538      	push	{r3, r4, r5, lr}
 8001bc2:	4d07      	ldr	r5, [pc, #28]	@ (8001be0 <_fstat_r+0x20>)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	4608      	mov	r0, r1
 8001bca:	4611      	mov	r1, r2
 8001bcc:	602b      	str	r3, [r5, #0]
 8001bce:	f7fe fcbf 	bl	8000550 <_fstat>
 8001bd2:	1c43      	adds	r3, r0, #1
 8001bd4:	d102      	bne.n	8001bdc <_fstat_r+0x1c>
 8001bd6:	682b      	ldr	r3, [r5, #0]
 8001bd8:	b103      	cbz	r3, 8001bdc <_fstat_r+0x1c>
 8001bda:	6023      	str	r3, [r4, #0]
 8001bdc:	bd38      	pop	{r3, r4, r5, pc}
 8001bde:	bf00      	nop
 8001be0:	200001cc 	.word	0x200001cc

08001be4 <_isatty_r>:
 8001be4:	b538      	push	{r3, r4, r5, lr}
 8001be6:	4d06      	ldr	r5, [pc, #24]	@ (8001c00 <_isatty_r+0x1c>)
 8001be8:	2300      	movs	r3, #0
 8001bea:	4604      	mov	r4, r0
 8001bec:	4608      	mov	r0, r1
 8001bee:	602b      	str	r3, [r5, #0]
 8001bf0:	f7fe fcbe 	bl	8000570 <_isatty>
 8001bf4:	1c43      	adds	r3, r0, #1
 8001bf6:	d102      	bne.n	8001bfe <_isatty_r+0x1a>
 8001bf8:	682b      	ldr	r3, [r5, #0]
 8001bfa:	b103      	cbz	r3, 8001bfe <_isatty_r+0x1a>
 8001bfc:	6023      	str	r3, [r4, #0]
 8001bfe:	bd38      	pop	{r3, r4, r5, pc}
 8001c00:	200001cc 	.word	0x200001cc

08001c04 <_sbrk_r>:
 8001c04:	b538      	push	{r3, r4, r5, lr}
 8001c06:	4d06      	ldr	r5, [pc, #24]	@ (8001c20 <_sbrk_r+0x1c>)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	4608      	mov	r0, r1
 8001c0e:	602b      	str	r3, [r5, #0]
 8001c10:	f7fe fcc6 	bl	80005a0 <_sbrk>
 8001c14:	1c43      	adds	r3, r0, #1
 8001c16:	d102      	bne.n	8001c1e <_sbrk_r+0x1a>
 8001c18:	682b      	ldr	r3, [r5, #0]
 8001c1a:	b103      	cbz	r3, 8001c1e <_sbrk_r+0x1a>
 8001c1c:	6023      	str	r3, [r4, #0]
 8001c1e:	bd38      	pop	{r3, r4, r5, pc}
 8001c20:	200001cc 	.word	0x200001cc

08001c24 <_init>:
 8001c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c26:	bf00      	nop
 8001c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c2a:	bc08      	pop	{r3}
 8001c2c:	469e      	mov	lr, r3
 8001c2e:	4770      	bx	lr

08001c30 <_fini>:
 8001c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c32:	bf00      	nop
 8001c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c36:	bc08      	pop	{r3}
 8001c38:	469e      	mov	lr, r3
 8001c3a:	4770      	bx	lr
