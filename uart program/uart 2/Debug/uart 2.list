
uart 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000208c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002250  08002250  00003250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022a4  080022a4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  080022a4  080022a4  000032a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022ac  080022ac  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022ac  080022ac  000032ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022b0  080022b0  000032b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080022b4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  080022c0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080022c0  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008152  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015e7  00000000  00000000  0000c18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  0000d778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000052e  00000000  00000000  0000de40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a06  00000000  00000000  0000e36e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008953  00000000  00000000  0002ed74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c789e  00000000  00000000  000376c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fef65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001abc  00000000  00000000  000fefa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000038  00000000  00000000  00100a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002238 	.word	0x08002238

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002238 	.word	0x08002238

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <UART2_GPIO_Init>:
#include <string.h>

UART_HandleTypeDef huart2;  // UART Handle for USART2

// Function to configure GPIO for UART TX (PA2) and RX (PA3)
void UART2_GPIO_Init(void) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();   // Enable GPIOA Clock
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	4b1b      	ldr	r3, [pc, #108]	@ (800057c <UART2_GPIO_Init+0x78>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a1a      	ldr	r2, [pc, #104]	@ (800057c <UART2_GPIO_Init+0x78>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b18      	ldr	r3, [pc, #96]	@ (800057c <UART2_GPIO_Init+0x78>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_USART2_CLK_ENABLE();  // Enable USART2 Clock
 8000526:	2300      	movs	r3, #0
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	4b14      	ldr	r3, [pc, #80]	@ (800057c <UART2_GPIO_Init+0x78>)
 800052c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800052e:	4a13      	ldr	r2, [pc, #76]	@ (800057c <UART2_GPIO_Init+0x78>)
 8000530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000534:	6413      	str	r3, [r2, #64]	@ 0x40
 8000536:	4b11      	ldr	r3, [pc, #68]	@ (800057c <UART2_GPIO_Init+0x78>)
 8000538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800053a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

    // Configure PA2 (TX) and PA3 (RX) as Alternate Function
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000552:	230c      	movs	r3, #12
 8000554:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;      // Alternate Function, Push-Pull
 8000556:	2302      	movs	r3, #2
 8000558:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;          // Enable Pull-up Resistors
 800055a:	2301      	movs	r3, #1
 800055c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800055e:	2303      	movs	r3, #3
 8000560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2; // Set AF7 for USART2
 8000562:	2307      	movs	r3, #7
 8000564:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	4619      	mov	r1, r3
 800056c:	4804      	ldr	r0, [pc, #16]	@ (8000580 <UART2_GPIO_Init+0x7c>)
 800056e:	f000 fbc5 	bl	8000cfc <HAL_GPIO_Init>
}
 8000572:	bf00      	nop
 8000574:	3720      	adds	r7, #32
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40023800 	.word	0x40023800
 8000580:	40020000 	.word	0x40020000

08000584 <UART2_Init>:

// Function to initialize UART2
void UART2_Init(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000588:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <UART2_Init+0x4c>)
 800058a:	4a12      	ldr	r2, [pc, #72]	@ (80005d4 <UART2_Init+0x50>)
 800058c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;            // Set Baud Rate
 800058e:	4b10      	ldr	r3, [pc, #64]	@ (80005d0 <UART2_Init+0x4c>)
 8000590:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000594:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000596:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <UART2_Init+0x4c>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800059c:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <UART2_Init+0x4c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <UART2_Init+0x4c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;     // Enable TX & RX
 80005a8:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <UART2_Init+0x4c>)
 80005aa:	220c      	movs	r2, #12
 80005ac:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ae:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <UART2_Init+0x4c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <UART2_Init+0x4c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart2) != HAL_OK) {
 80005ba:	4805      	ldr	r0, [pc, #20]	@ (80005d0 <UART2_Init+0x4c>)
 80005bc:	f000 fd80 	bl	80010c0 <HAL_UART_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <UART2_Init+0x46>
        // Initialization Error
        while (1);
 80005c6:	bf00      	nop
 80005c8:	e7fd      	b.n	80005c6 <UART2_Init+0x42>
    }
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000028 	.word	0x20000028
 80005d4:	40004400 	.word	0x40004400

080005d8 <LED_GPIO_Init>:

// Function to configure GPIO for LED on PA5
void LED_GPIO_Init(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();   // Enable GPIOA Clock
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	4b12      	ldr	r3, [pc, #72]	@ (800062c <LED_GPIO_Init+0x54>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a11      	ldr	r2, [pc, #68]	@ (800062c <LED_GPIO_Init+0x54>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b0f      	ldr	r3, [pc, #60]	@ (800062c <LED_GPIO_Init+0x54>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_5;        // PA5 (LED)
 8000608:	2320      	movs	r3, #32
 800060a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Output Mode
 800060c:	2301      	movs	r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	4804      	ldr	r0, [pc, #16]	@ (8000630 <LED_GPIO_Init+0x58>)
 800061e:	f000 fb6d 	bl	8000cfc <HAL_GPIO_Init>
}
 8000622:	bf00      	nop
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40020000 	.word	0x40020000

08000634 <UART_Send>:

// Function to send message via UART
void UART_Send(char *message) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), 1000);
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff fde1 	bl	8000204 <strlen>
 8000642:	4603      	mov	r3, r0
 8000644:	b29a      	uxth	r2, r3
 8000646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	4803      	ldr	r0, [pc, #12]	@ (800065c <UART_Send+0x28>)
 800064e:	f000 fd87 	bl	8001160 <HAL_UART_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000028 	.word	0x20000028

08000660 <UART_Receive>:

// Function to receive one character via UART
char UART_Receive(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
    char receivedChar;
    HAL_UART_Receive(&huart2, (uint8_t *)&receivedChar, 1, HAL_MAX_DELAY);
 8000666:	1df9      	adds	r1, r7, #7
 8000668:	f04f 33ff 	mov.w	r3, #4294967295
 800066c:	2201      	movs	r2, #1
 800066e:	4804      	ldr	r0, [pc, #16]	@ (8000680 <UART_Receive+0x20>)
 8000670:	f000 fe01 	bl	8001276 <HAL_UART_Receive>
    return receivedChar;
 8000674:	79fb      	ldrb	r3, [r7, #7]
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000028 	.word	0x20000028

08000684 <main>:

// Main function
int main(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
    HAL_Init();           // Initialize HAL Library
 800068a:	f000 f921 	bl	80008d0 <HAL_Init>
    UART2_GPIO_Init();    // Configure UART2 GPIO
 800068e:	f7ff ff39 	bl	8000504 <UART2_GPIO_Init>
    UART2_Init();         // Initialize UART2
 8000692:	f7ff ff77 	bl	8000584 <UART2_Init>
    LED_GPIO_Init();      // Configure LED (PA5)
 8000696:	f7ff ff9f 	bl	80005d8 <LED_GPIO_Init>

    UART_Send("UART Ready! Send 'N' to turn ON, 'F' to turn OFF LED.\n");
 800069a:	4812      	ldr	r0, [pc, #72]	@ (80006e4 <main+0x60>)
 800069c:	f7ff ffca 	bl	8000634 <UART_Send>

    while (1) {
        char command = UART_Receive(); // Wait for user input
 80006a0:	f7ff ffde 	bl	8000660 <UART_Receive>
 80006a4:	4603      	mov	r3, r0
 80006a6:	71fb      	strb	r3, [r7, #7]

        if (command == 'N' || command == 'n') {
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b4e      	cmp	r3, #78	@ 0x4e
 80006ac:	d002      	beq.n	80006b4 <main+0x30>
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	2b6e      	cmp	r3, #110	@ 0x6e
 80006b2:	d108      	bne.n	80006c6 <main+0x42>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // Turn LED ON
 80006b4:	2201      	movs	r2, #1
 80006b6:	2120      	movs	r1, #32
 80006b8:	480b      	ldr	r0, [pc, #44]	@ (80006e8 <main+0x64>)
 80006ba:	f000 fcb3 	bl	8001024 <HAL_GPIO_WritePin>
            UART_Send("LED ON\n");
 80006be:	480b      	ldr	r0, [pc, #44]	@ (80006ec <main+0x68>)
 80006c0:	f7ff ffb8 	bl	8000634 <UART_Send>
 80006c4:	e00d      	b.n	80006e2 <main+0x5e>
        }
        else if (command == 'F' || command == 'f') {
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b46      	cmp	r3, #70	@ 0x46
 80006ca:	d002      	beq.n	80006d2 <main+0x4e>
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b66      	cmp	r3, #102	@ 0x66
 80006d0:	d1e6      	bne.n	80006a0 <main+0x1c>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Turn LED OFF
 80006d2:	2200      	movs	r2, #0
 80006d4:	2120      	movs	r1, #32
 80006d6:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <main+0x64>)
 80006d8:	f000 fca4 	bl	8001024 <HAL_GPIO_WritePin>
            UART_Send("LED OFF\n");
 80006dc:	4804      	ldr	r0, [pc, #16]	@ (80006f0 <main+0x6c>)
 80006de:	f7ff ffa9 	bl	8000634 <UART_Send>
    while (1) {
 80006e2:	e7dd      	b.n	80006a0 <main+0x1c>
 80006e4:	08002250 	.word	0x08002250
 80006e8:	40020000 	.word	0x40020000
 80006ec:	08002288 	.word	0x08002288
 80006f0:	08002290 	.word	0x08002290

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b10      	ldr	r3, [pc, #64]	@ (8000740 <HAL_MspInit+0x4c>)
 8000700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000702:	4a0f      	ldr	r2, [pc, #60]	@ (8000740 <HAL_MspInit+0x4c>)
 8000704:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000708:	6453      	str	r3, [r2, #68]	@ 0x44
 800070a:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <HAL_MspInit+0x4c>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800070e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <HAL_MspInit+0x4c>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071e:	4a08      	ldr	r2, [pc, #32]	@ (8000740 <HAL_MspInit+0x4c>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000724:	6413      	str	r3, [r2, #64]	@ 0x40
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <HAL_MspInit+0x4c>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000732:	2007      	movs	r0, #7
 8000734:	f000 fa0e 	bl	8000b54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40023800 	.word	0x40023800

08000744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	@ 0x28
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a1d      	ldr	r2, [pc, #116]	@ (80007d8 <HAL_UART_MspInit+0x94>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d133      	bne.n	80007ce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <HAL_UART_MspInit+0x98>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076e:	4a1b      	ldr	r2, [pc, #108]	@ (80007dc <HAL_UART_MspInit+0x98>)
 8000770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000774:	6413      	str	r3, [r2, #64]	@ 0x40
 8000776:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <HAL_UART_MspInit+0x98>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <HAL_UART_MspInit+0x98>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a14      	ldr	r2, [pc, #80]	@ (80007dc <HAL_UART_MspInit+0x98>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <HAL_UART_MspInit+0x98>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800079e:	230c      	movs	r3, #12
 80007a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ae:	2307      	movs	r3, #7
 80007b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	4809      	ldr	r0, [pc, #36]	@ (80007e0 <HAL_UART_MspInit+0x9c>)
 80007ba:	f000 fa9f 	bl	8000cfc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	2026      	movs	r0, #38	@ 0x26
 80007c4:	f000 f9d1 	bl	8000b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007c8:	2026      	movs	r0, #38	@ 0x26
 80007ca:	f000 f9ea 	bl	8000ba2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80007ce:	bf00      	nop
 80007d0:	3728      	adds	r7, #40	@ 0x28
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40004400 	.word	0x40004400
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020000 	.word	0x40020000

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <NMI_Handler+0x4>

080007ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <MemManage_Handler+0x4>

080007fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <BusFault_Handler+0x4>

08000804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <UsageFault_Handler+0x4>

0800080c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083a:	f000 f89b 	bl	8000974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000848:	4802      	ldr	r0, [pc, #8]	@ (8000854 <USART2_IRQHandler+0x10>)
 800084a:	f000 fdab 	bl	80013a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000028 	.word	0x20000028

08000858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <SystemInit+0x20>)
 800085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000862:	4a05      	ldr	r2, [pc, #20]	@ (8000878 <SystemInit+0x20>)
 8000864:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000868:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800087c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000880:	f7ff ffea 	bl	8000858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000884:	480c      	ldr	r0, [pc, #48]	@ (80008b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000886:	490d      	ldr	r1, [pc, #52]	@ (80008bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000888:	4a0d      	ldr	r2, [pc, #52]	@ (80008c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a0a      	ldr	r2, [pc, #40]	@ (80008c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800089c:	4c0a      	ldr	r4, [pc, #40]	@ (80008c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80008aa:	f001 fca1 	bl	80021f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ae:	f7ff fee9 	bl	8000684 <main>
  bx  lr    
 80008b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008c0:	080022b4 	.word	0x080022b4
  ldr r2, =_sbss
 80008c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008c8:	20000074 	.word	0x20000074

080008cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC_IRQHandler>
	...

080008d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <HAL_Init+0x40>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000910 <HAL_Init+0x40>)
 80008da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <HAL_Init+0x40>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000910 <HAL_Init+0x40>)
 80008e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ec:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <HAL_Init+0x40>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a07      	ldr	r2, [pc, #28]	@ (8000910 <HAL_Init+0x40>)
 80008f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f000 f92b 	bl	8000b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fe:	2000      	movs	r0, #0
 8000900:	f000 f808 	bl	8000914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000904:	f7ff fef6 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023c00 	.word	0x40023c00

08000914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <HAL_InitTick+0x54>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <HAL_InitTick+0x58>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092a:	fbb3 f3f1 	udiv	r3, r3, r1
 800092e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000932:	4618      	mov	r0, r3
 8000934:	f000 f943 	bl	8000bbe <HAL_SYSTICK_Config>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e00e      	b.n	8000960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2b0f      	cmp	r3, #15
 8000946:	d80a      	bhi.n	800095e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000948:	2200      	movs	r2, #0
 800094a:	6879      	ldr	r1, [r7, #4]
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	f000 f90b 	bl	8000b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000954:	4a06      	ldr	r2, [pc, #24]	@ (8000970 <HAL_InitTick+0x5c>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095a:	2300      	movs	r3, #0
 800095c:	e000      	b.n	8000960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000000 	.word	0x20000000
 800096c:	20000008 	.word	0x20000008
 8000970:	20000004 	.word	0x20000004

08000974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <HAL_IncTick+0x20>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <HAL_IncTick+0x24>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4413      	add	r3, r2
 8000984:	4a04      	ldr	r2, [pc, #16]	@ (8000998 <HAL_IncTick+0x24>)
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008
 8000998:	20000070 	.word	0x20000070

0800099c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;
 80009a0:	4b03      	ldr	r3, [pc, #12]	@ (80009b0 <HAL_GetTick+0x14>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20000070 	.word	0x20000070

080009b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c4:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009d0:	4013      	ands	r3, r2
 80009d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e6:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	60d3      	str	r3, [r2, #12]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a00:	4b04      	ldr	r3, [pc, #16]	@ (8000a14 <__NVIC_GetPriorityGrouping+0x18>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	f003 0307 	and.w	r3, r3, #7
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	db0b      	blt.n	8000a42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	f003 021f 	and.w	r2, r3, #31
 8000a30:	4907      	ldr	r1, [pc, #28]	@ (8000a50 <__NVIC_EnableIRQ+0x38>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	095b      	lsrs	r3, r3, #5
 8000a38:	2001      	movs	r0, #1
 8000a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000e100 	.word	0xe000e100

08000a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	db0a      	blt.n	8000a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	490c      	ldr	r1, [pc, #48]	@ (8000aa0 <__NVIC_SetPriority+0x4c>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	0112      	lsls	r2, r2, #4
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	440b      	add	r3, r1
 8000a78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a7c:	e00a      	b.n	8000a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4908      	ldr	r1, [pc, #32]	@ (8000aa4 <__NVIC_SetPriority+0x50>)
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	f003 030f 	and.w	r3, r3, #15
 8000a8a:	3b04      	subs	r3, #4
 8000a8c:	0112      	lsls	r2, r2, #4
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	440b      	add	r3, r1
 8000a92:	761a      	strb	r2, [r3, #24]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000e100 	.word	0xe000e100
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	@ 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	f1c3 0307 	rsb	r3, r3, #7
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	bf28      	it	cs
 8000ac6:	2304      	movcs	r3, #4
 8000ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3304      	adds	r3, #4
 8000ace:	2b06      	cmp	r3, #6
 8000ad0:	d902      	bls.n	8000ad8 <NVIC_EncodePriority+0x30>
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3b03      	subs	r3, #3
 8000ad6:	e000      	b.n	8000ada <NVIC_EncodePriority+0x32>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	401a      	ands	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af0:	f04f 31ff 	mov.w	r1, #4294967295
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	43d9      	mvns	r1, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	4313      	orrs	r3, r2
         );
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3724      	adds	r7, #36	@ 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b20:	d301      	bcc.n	8000b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00f      	b.n	8000b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <SysTick_Config+0x40>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2e:	210f      	movs	r1, #15
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f7ff ff8e 	bl	8000a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <SysTick_Config+0x40>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3e:	4b04      	ldr	r3, [pc, #16]	@ (8000b50 <SysTick_Config+0x40>)
 8000b40:	2207      	movs	r2, #7
 8000b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	e000e010 	.word	0xe000e010

08000b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ff29 	bl	80009b4 <__NVIC_SetPriorityGrouping>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b086      	sub	sp, #24
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
 8000b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b7c:	f7ff ff3e 	bl	80009fc <__NVIC_GetPriorityGrouping>
 8000b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	68b9      	ldr	r1, [r7, #8]
 8000b86:	6978      	ldr	r0, [r7, #20]
 8000b88:	f7ff ff8e 	bl	8000aa8 <NVIC_EncodePriority>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff5d 	bl	8000a54 <__NVIC_SetPriority>
}
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff31 	bl	8000a18 <__NVIC_EnableIRQ>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff ffa2 	bl	8000b10 <SysTick_Config>
 8000bcc:	4603      	mov	r3, r0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b084      	sub	sp, #16
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000be4:	f7ff feda 	bl	800099c <HAL_GetTick>
 8000be8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d008      	beq.n	8000c08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2280      	movs	r2, #128	@ 0x80
 8000bfa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e052      	b.n	8000cae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f022 0216 	bic.w	r2, r2, #22
 8000c16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	695a      	ldr	r2, [r3, #20]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000c26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d103      	bne.n	8000c38 <HAL_DMA_Abort+0x62>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d007      	beq.n	8000c48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f022 0208 	bic.w	r2, r2, #8
 8000c46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 0201 	bic.w	r2, r2, #1
 8000c56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c58:	e013      	b.n	8000c82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c5a:	f7ff fe9f 	bl	800099c <HAL_GetTick>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	2b05      	cmp	r3, #5
 8000c66:	d90c      	bls.n	8000c82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2220      	movs	r2, #32
 8000c6c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2203      	movs	r2, #3
 8000c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e015      	b.n	8000cae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1e4      	bne.n	8000c5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c94:	223f      	movs	r2, #63	@ 0x3f
 8000c96:	409a      	lsls	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d004      	beq.n	8000cd4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2280      	movs	r2, #128	@ 0x80
 8000cce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e00c      	b.n	8000cee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2205      	movs	r2, #5
 8000cd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f022 0201 	bic.w	r2, r2, #1
 8000cea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	@ 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
 8000d16:	e165      	b.n	8000fe4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d18:	2201      	movs	r2, #1
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f040 8154 	bne.w	8000fde <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d005      	beq.n	8000d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d130      	bne.n	8000db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	2203      	movs	r2, #3
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4013      	ands	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	68da      	ldr	r2, [r3, #12]
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d84:	2201      	movs	r2, #1
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	091b      	lsrs	r3, r3, #4
 8000d9a:	f003 0201 	and.w	r2, r3, #1
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	d017      	beq.n	8000dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d123      	bne.n	8000e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	08da      	lsrs	r2, r3, #3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3208      	adds	r2, #8
 8000e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	f003 0307 	and.w	r3, r3, #7
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	220f      	movs	r2, #15
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	691a      	ldr	r2, [r3, #16]
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	08da      	lsrs	r2, r3, #3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3208      	adds	r2, #8
 8000e3a:	69b9      	ldr	r1, [r7, #24]
 8000e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0203 	and.w	r2, r3, #3
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f000 80ae 	beq.w	8000fde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b5d      	ldr	r3, [pc, #372]	@ (8000ffc <HAL_GPIO_Init+0x300>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	4a5c      	ldr	r2, [pc, #368]	@ (8000ffc <HAL_GPIO_Init+0x300>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e92:	4b5a      	ldr	r3, [pc, #360]	@ (8000ffc <HAL_GPIO_Init+0x300>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e9e:	4a58      	ldr	r2, [pc, #352]	@ (8001000 <HAL_GPIO_Init+0x304>)
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a4f      	ldr	r2, [pc, #316]	@ (8001004 <HAL_GPIO_Init+0x308>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d025      	beq.n	8000f16 <HAL_GPIO_Init+0x21a>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a4e      	ldr	r2, [pc, #312]	@ (8001008 <HAL_GPIO_Init+0x30c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d01f      	beq.n	8000f12 <HAL_GPIO_Init+0x216>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4d      	ldr	r2, [pc, #308]	@ (800100c <HAL_GPIO_Init+0x310>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d019      	beq.n	8000f0e <HAL_GPIO_Init+0x212>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4c      	ldr	r2, [pc, #304]	@ (8001010 <HAL_GPIO_Init+0x314>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d013      	beq.n	8000f0a <HAL_GPIO_Init+0x20e>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4b      	ldr	r2, [pc, #300]	@ (8001014 <HAL_GPIO_Init+0x318>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d00d      	beq.n	8000f06 <HAL_GPIO_Init+0x20a>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4a      	ldr	r2, [pc, #296]	@ (8001018 <HAL_GPIO_Init+0x31c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d007      	beq.n	8000f02 <HAL_GPIO_Init+0x206>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a49      	ldr	r2, [pc, #292]	@ (800101c <HAL_GPIO_Init+0x320>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d101      	bne.n	8000efe <HAL_GPIO_Init+0x202>
 8000efa:	2306      	movs	r3, #6
 8000efc:	e00c      	b.n	8000f18 <HAL_GPIO_Init+0x21c>
 8000efe:	2307      	movs	r3, #7
 8000f00:	e00a      	b.n	8000f18 <HAL_GPIO_Init+0x21c>
 8000f02:	2305      	movs	r3, #5
 8000f04:	e008      	b.n	8000f18 <HAL_GPIO_Init+0x21c>
 8000f06:	2304      	movs	r3, #4
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x21c>
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e004      	b.n	8000f18 <HAL_GPIO_Init+0x21c>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	e002      	b.n	8000f18 <HAL_GPIO_Init+0x21c>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <HAL_GPIO_Init+0x21c>
 8000f16:	2300      	movs	r3, #0
 8000f18:	69fa      	ldr	r2, [r7, #28]
 8000f1a:	f002 0203 	and.w	r2, r2, #3
 8000f1e:	0092      	lsls	r2, r2, #2
 8000f20:	4093      	lsls	r3, r2
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f28:	4935      	ldr	r1, [pc, #212]	@ (8001000 <HAL_GPIO_Init+0x304>)
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	3302      	adds	r3, #2
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f36:	4b3a      	ldr	r3, [pc, #232]	@ (8001020 <HAL_GPIO_Init+0x324>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f5a:	4a31      	ldr	r2, [pc, #196]	@ (8001020 <HAL_GPIO_Init+0x324>)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f60:	4b2f      	ldr	r3, [pc, #188]	@ (8001020 <HAL_GPIO_Init+0x324>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f84:	4a26      	ldr	r2, [pc, #152]	@ (8001020 <HAL_GPIO_Init+0x324>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f8a:	4b25      	ldr	r3, [pc, #148]	@ (8001020 <HAL_GPIO_Init+0x324>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fae:	4a1c      	ldr	r2, [pc, #112]	@ (8001020 <HAL_GPIO_Init+0x324>)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <HAL_GPIO_Init+0x324>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fd8:	4a11      	ldr	r2, [pc, #68]	@ (8001020 <HAL_GPIO_Init+0x324>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	61fb      	str	r3, [r7, #28]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	2b0f      	cmp	r3, #15
 8000fe8:	f67f ae96 	bls.w	8000d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3724      	adds	r7, #36	@ 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40013800 	.word	0x40013800
 8001004:	40020000 	.word	0x40020000
 8001008:	40020400 	.word	0x40020400
 800100c:	40020800 	.word	0x40020800
 8001010:	40020c00 	.word	0x40020c00
 8001014:	40021000 	.word	0x40021000
 8001018:	40021400 	.word	0x40021400
 800101c:	40021800 	.word	0x40021800
 8001020:	40013c00 	.word	0x40013c00

08001024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	807b      	strh	r3, [r7, #2]
 8001030:	4613      	mov	r3, r2
 8001032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001034:	787b      	ldrb	r3, [r7, #1]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800103a:	887a      	ldrh	r2, [r7, #2]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001040:	e003      	b.n	800104a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001042:	887b      	ldrh	r3, [r7, #2]
 8001044:	041a      	lsls	r2, r3, #16
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	619a      	str	r2, [r3, #24]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800105c:	4b03      	ldr	r3, [pc, #12]	@ (800106c <HAL_RCC_GetHCLKFreq+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000000 	.word	0x20000000

08001070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001074:	f7ff fff0 	bl	8001058 <HAL_RCC_GetHCLKFreq>
 8001078:	4602      	mov	r2, r0
 800107a:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <HAL_RCC_GetPCLK1Freq+0x20>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	0a9b      	lsrs	r3, r3, #10
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	4903      	ldr	r1, [pc, #12]	@ (8001094 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001086:	5ccb      	ldrb	r3, [r1, r3]
 8001088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800108c:	4618      	mov	r0, r3
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40023800 	.word	0x40023800
 8001094:	0800229c 	.word	0x0800229c

08001098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800109c:	f7ff ffdc 	bl	8001058 <HAL_RCC_GetHCLKFreq>
 80010a0:	4602      	mov	r2, r0
 80010a2:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	0b5b      	lsrs	r3, r3, #13
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	4903      	ldr	r1, [pc, #12]	@ (80010bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80010ae:	5ccb      	ldrb	r3, [r1, r3]
 80010b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40023800 	.word	0x40023800
 80010bc:	0800229c 	.word	0x0800229c

080010c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e042      	b.n	8001158 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d106      	bne.n	80010ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fb2c 	bl	8000744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2224      	movs	r2, #36	@ 0x24
 80010f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68da      	ldr	r2, [r3, #12]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001102:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 fdff 	bl	8001d08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	691a      	ldr	r2, [r3, #16]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001118:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	695a      	ldr	r2, [r3, #20]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001128:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001138:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2220      	movs	r2, #32
 8001144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2220      	movs	r2, #32
 800114c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	@ 0x28
 8001164:	af02      	add	r7, sp, #8
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	4613      	mov	r3, r2
 800116e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b20      	cmp	r3, #32
 800117e:	d175      	bne.n	800126c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <HAL_UART_Transmit+0x2c>
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e06e      	b.n	800126e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2200      	movs	r2, #0
 8001194:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2221      	movs	r2, #33	@ 0x21
 800119a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800119e:	f7ff fbfd 	bl	800099c <HAL_GetTick>
 80011a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	88fa      	ldrh	r2, [r7, #6]
 80011a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	88fa      	ldrh	r2, [r7, #6]
 80011ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80011b8:	d108      	bne.n	80011cc <HAL_UART_Transmit+0x6c>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d104      	bne.n	80011cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	61bb      	str	r3, [r7, #24]
 80011ca:	e003      	b.n	80011d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80011d4:	e02e      	b.n	8001234 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	2200      	movs	r2, #0
 80011de:	2180      	movs	r1, #128	@ 0x80
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f000 fb9b 	bl	800191c <UART_WaitOnFlagUntilTimeout>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d005      	beq.n	80011f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2220      	movs	r2, #32
 80011f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e03a      	b.n	800126e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10b      	bne.n	8001216 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800120c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	3302      	adds	r3, #2
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	e007      	b.n	8001226 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	781a      	ldrb	r2, [r3, #0]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	3301      	adds	r3, #1
 8001224:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800122a:	b29b      	uxth	r3, r3
 800122c:	3b01      	subs	r3, #1
 800122e:	b29a      	uxth	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001238:	b29b      	uxth	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1cb      	bne.n	80011d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	2200      	movs	r2, #0
 8001246:	2140      	movs	r1, #64	@ 0x40
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f000 fb67 	bl	800191c <UART_WaitOnFlagUntilTimeout>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d005      	beq.n	8001260 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2220      	movs	r2, #32
 8001258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e006      	b.n	800126e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2220      	movs	r2, #32
 8001264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	e000      	b.n	800126e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800126c:	2302      	movs	r3, #2
  }
}
 800126e:	4618      	mov	r0, r3
 8001270:	3720      	adds	r7, #32
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b08a      	sub	sp, #40	@ 0x28
 800127a:	af02      	add	r7, sp, #8
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	4613      	mov	r3, r2
 8001284:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b20      	cmp	r3, #32
 8001294:	f040 8081 	bne.w	800139a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d002      	beq.n	80012a4 <HAL_UART_Receive+0x2e>
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e079      	b.n	800139c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2200      	movs	r2, #0
 80012ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2222      	movs	r2, #34	@ 0x22
 80012b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2200      	movs	r2, #0
 80012ba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80012bc:	f7ff fb6e 	bl	800099c <HAL_GetTick>
 80012c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	88fa      	ldrh	r2, [r7, #6]
 80012c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	88fa      	ldrh	r2, [r7, #6]
 80012cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012d6:	d108      	bne.n	80012ea <HAL_UART_Receive+0x74>
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d104      	bne.n	80012ea <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	e003      	b.n	80012f2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80012f2:	e047      	b.n	8001384 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	2200      	movs	r2, #0
 80012fc:	2120      	movs	r1, #32
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f000 fb0c 	bl	800191c <UART_WaitOnFlagUntilTimeout>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d005      	beq.n	8001316 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2220      	movs	r2, #32
 800130e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e042      	b.n	800139c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10c      	bne.n	8001336 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	b29b      	uxth	r3, r3
 8001324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001328:	b29a      	uxth	r2, r3
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	3302      	adds	r3, #2
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	e01f      	b.n	8001376 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800133e:	d007      	beq.n	8001350 <HAL_UART_Receive+0xda>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10a      	bne.n	800135e <HAL_UART_Receive+0xe8>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d106      	bne.n	800135e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	701a      	strb	r2, [r3, #0]
 800135c:	e008      	b.n	8001370 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800136a:	b2da      	uxtb	r2, r3
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	3301      	adds	r3, #1
 8001374:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800137a:	b29b      	uxth	r3, r3
 800137c:	3b01      	subs	r3, #1
 800137e:	b29a      	uxth	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001388:	b29b      	uxth	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1b2      	bne.n	80012f4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2220      	movs	r2, #32
 8001392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e000      	b.n	800139c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800139a:	2302      	movs	r3, #2
  }
}
 800139c:	4618      	mov	r0, r3
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0ba      	sub	sp, #232	@ 0xe8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80013d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80013e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10f      	bne.n	800140a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80013ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80013ee:	f003 0320 	and.w	r3, r3, #32
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <HAL_UART_IRQHandler+0x66>
 80013f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80013fa:	f003 0320 	and.w	r3, r3, #32
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 fbc2 	bl	8001b8c <UART_Receive_IT>
      return;
 8001408:	e25b      	b.n	80018c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800140a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 80de 	beq.w	80015d0 <HAL_UART_IRQHandler+0x22c>
 8001414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d106      	bne.n	800142e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001424:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 80d1 	beq.w	80015d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800142e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <HAL_UART_IRQHandler+0xae>
 800143a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800143e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001442:	2b00      	cmp	r3, #0
 8001444:	d005      	beq.n	8001452 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144a:	f043 0201 	orr.w	r2, r3, #1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00b      	beq.n	8001476 <HAL_UART_IRQHandler+0xd2>
 800145e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d005      	beq.n	8001476 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	f043 0202 	orr.w	r2, r3, #2
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00b      	beq.n	800149a <HAL_UART_IRQHandler+0xf6>
 8001482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	f043 0204 	orr.w	r2, r3, #4
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800149a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d011      	beq.n	80014ca <HAL_UART_IRQHandler+0x126>
 80014a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d105      	bne.n	80014be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80014b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c2:	f043 0208 	orr.w	r2, r3, #8
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 81f2 	beq.w	80018b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80014d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80014d8:	f003 0320 	and.w	r3, r3, #32
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d008      	beq.n	80014f2 <HAL_UART_IRQHandler+0x14e>
 80014e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80014e4:	f003 0320 	and.w	r3, r3, #32
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 fb4d 	bl	8001b8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014fc:	2b40      	cmp	r3, #64	@ 0x40
 80014fe:	bf0c      	ite	eq
 8001500:	2301      	moveq	r3, #1
 8001502:	2300      	movne	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d103      	bne.n	800151e <HAL_UART_IRQHandler+0x17a>
 8001516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800151a:	2b00      	cmp	r3, #0
 800151c:	d04f      	beq.n	80015be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 fa55 	bl	80019ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800152e:	2b40      	cmp	r3, #64	@ 0x40
 8001530:	d141      	bne.n	80015b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	3314      	adds	r3, #20
 8001538:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800153c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001540:	e853 3f00 	ldrex	r3, [r3]
 8001544:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001548:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800154c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001550:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3314      	adds	r3, #20
 800155a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800155e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001562:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001566:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800156a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800156e:	e841 2300 	strex	r3, r2, [r1]
 8001572:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1d9      	bne.n	8001532 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001582:	2b00      	cmp	r3, #0
 8001584:	d013      	beq.n	80015ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800158a:	4a7e      	ldr	r2, [pc, #504]	@ (8001784 <HAL_UART_IRQHandler+0x3e0>)
 800158c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fb8f 	bl	8000cb6 <HAL_DMA_Abort_IT>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d016      	beq.n	80015cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80015a8:	4610      	mov	r0, r2
 80015aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80015ac:	e00e      	b.n	80015cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f99e 	bl	80018f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80015b4:	e00a      	b.n	80015cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f99a 	bl	80018f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80015bc:	e006      	b.n	80015cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 f996 	bl	80018f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80015ca:	e175      	b.n	80018b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80015cc:	bf00      	nop
    return;
 80015ce:	e173      	b.n	80018b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	f040 814f 	bne.w	8001878 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80015da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8148 	beq.w	8001878 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80015e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 8141 	beq.w	8001878 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001616:	2b40      	cmp	r3, #64	@ 0x40
 8001618:	f040 80b6 	bne.w	8001788 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001628:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 8145 	beq.w	80018bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800163a:	429a      	cmp	r2, r3
 800163c:	f080 813e 	bcs.w	80018bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001646:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001652:	f000 8088 	beq.w	8001766 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	330c      	adds	r3, #12
 800165c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001660:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001664:	e853 3f00 	ldrex	r3, [r3]
 8001668:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800166c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001674:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	330c      	adds	r3, #12
 800167e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001682:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001686:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800168a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800168e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001692:	e841 2300 	strex	r3, r2, [r1]
 8001696:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800169a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1d9      	bne.n	8001656 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3314      	adds	r3, #20
 80016a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016ac:	e853 3f00 	ldrex	r3, [r3]
 80016b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80016b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3314      	adds	r3, #20
 80016c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80016c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80016ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80016ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80016d2:	e841 2300 	strex	r3, r2, [r1]
 80016d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80016d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1e1      	bne.n	80016a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3314      	adds	r3, #20
 80016e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016e8:	e853 3f00 	ldrex	r3, [r3]
 80016ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80016ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80016f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	3314      	adds	r3, #20
 80016fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001702:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001704:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001706:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001708:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800170a:	e841 2300 	strex	r3, r2, [r1]
 800170e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001710:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1e3      	bne.n	80016de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2220      	movs	r2, #32
 800171a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	330c      	adds	r3, #12
 800172a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800172c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800172e:	e853 3f00 	ldrex	r3, [r3]
 8001732:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001734:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001736:	f023 0310 	bic.w	r3, r3, #16
 800173a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	330c      	adds	r3, #12
 8001744:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001748:	65ba      	str	r2, [r7, #88]	@ 0x58
 800174a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800174c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800174e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001750:	e841 2300 	strex	r3, r2, [r1]
 8001754:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1e3      	bne.n	8001724 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fa38 	bl	8000bd6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2202      	movs	r2, #2
 800176a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001774:	b29b      	uxth	r3, r3
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	b29b      	uxth	r3, r3
 800177a:	4619      	mov	r1, r3
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 f8c1 	bl	8001904 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001782:	e09b      	b.n	80018bc <HAL_UART_IRQHandler+0x518>
 8001784:	08001a95 	.word	0x08001a95
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001790:	b29b      	uxth	r3, r3
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800179c:	b29b      	uxth	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 808e 	beq.w	80018c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80017a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 8089 	beq.w	80018c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	330c      	adds	r3, #12
 80017b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017b8:	e853 3f00 	ldrex	r3, [r3]
 80017bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80017be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80017c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	330c      	adds	r3, #12
 80017ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80017d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80017d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80017d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80017da:	e841 2300 	strex	r3, r2, [r1]
 80017de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80017e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1e3      	bne.n	80017ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	3314      	adds	r3, #20
 80017ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f0:	e853 3f00 	ldrex	r3, [r3]
 80017f4:	623b      	str	r3, [r7, #32]
   return(result);
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	f023 0301 	bic.w	r3, r3, #1
 80017fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3314      	adds	r3, #20
 8001806:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800180a:	633a      	str	r2, [r7, #48]	@ 0x30
 800180c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800180e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001812:	e841 2300 	strex	r3, r2, [r1]
 8001816:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1e3      	bne.n	80017e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2220      	movs	r2, #32
 8001822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	330c      	adds	r3, #12
 8001832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	e853 3f00 	ldrex	r3, [r3]
 800183a:	60fb      	str	r3, [r7, #12]
   return(result);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f023 0310 	bic.w	r3, r3, #16
 8001842:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	330c      	adds	r3, #12
 800184c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001850:	61fa      	str	r2, [r7, #28]
 8001852:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001854:	69b9      	ldr	r1, [r7, #24]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	e841 2300 	strex	r3, r2, [r1]
 800185c:	617b      	str	r3, [r7, #20]
   return(result);
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1e3      	bne.n	800182c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2202      	movs	r2, #2
 8001868:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800186a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800186e:	4619      	mov	r1, r3
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f847 	bl	8001904 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001876:	e023      	b.n	80018c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800187c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001880:	2b00      	cmp	r3, #0
 8001882:	d009      	beq.n	8001898 <HAL_UART_IRQHandler+0x4f4>
 8001884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f913 	bl	8001abc <UART_Transmit_IT>
    return;
 8001896:	e014      	b.n	80018c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800189c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00e      	beq.n	80018c2 <HAL_UART_IRQHandler+0x51e>
 80018a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80018a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f953 	bl	8001b5c <UART_EndTransmit_IT>
    return;
 80018b6:	e004      	b.n	80018c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80018b8:	bf00      	nop
 80018ba:	e002      	b.n	80018c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80018bc:	bf00      	nop
 80018be:	e000      	b.n	80018c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80018c0:	bf00      	nop
  }
}
 80018c2:	37e8      	adds	r7, #232	@ 0xe8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	4613      	mov	r3, r2
 800192a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800192c:	e03b      	b.n	80019a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001934:	d037      	beq.n	80019a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001936:	f7ff f831 	bl	800099c <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	6a3a      	ldr	r2, [r7, #32]
 8001942:	429a      	cmp	r2, r3
 8001944:	d302      	bcc.n	800194c <UART_WaitOnFlagUntilTimeout+0x30>
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e03a      	b.n	80019c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	2b00      	cmp	r3, #0
 800195c:	d023      	beq.n	80019a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2b80      	cmp	r3, #128	@ 0x80
 8001962:	d020      	beq.n	80019a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b40      	cmp	r3, #64	@ 0x40
 8001968:	d01d      	beq.n	80019a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b08      	cmp	r3, #8
 8001976:	d116      	bne.n	80019a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 f81d 	bl	80019ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2208      	movs	r2, #8
 8001998:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00f      	b.n	80019c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4013      	ands	r3, r2
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	bf0c      	ite	eq
 80019b6:	2301      	moveq	r3, #1
 80019b8:	2300      	movne	r3, #0
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	461a      	mov	r2, r3
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d0b4      	beq.n	800192e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b095      	sub	sp, #84	@ 0x54
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	330c      	adds	r3, #12
 80019dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019e0:	e853 3f00 	ldrex	r3, [r3]
 80019e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80019e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80019ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	330c      	adds	r3, #12
 80019f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80019f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80019fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80019fe:	e841 2300 	strex	r3, r2, [r1]
 8001a02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1e5      	bne.n	80019d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	3314      	adds	r3, #20
 8001a10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	e853 3f00 	ldrex	r3, [r3]
 8001a18:	61fb      	str	r3, [r7, #28]
   return(result);
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	3314      	adds	r3, #20
 8001a28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001a2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a32:	e841 2300 	strex	r3, r2, [r1]
 8001a36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1e5      	bne.n	8001a0a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d119      	bne.n	8001a7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	330c      	adds	r3, #12
 8001a4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	e853 3f00 	ldrex	r3, [r3]
 8001a54:	60bb      	str	r3, [r7, #8]
   return(result);
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f023 0310 	bic.w	r3, r3, #16
 8001a5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	330c      	adds	r3, #12
 8001a64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a66:	61ba      	str	r2, [r7, #24]
 8001a68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a6a:	6979      	ldr	r1, [r7, #20]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	e841 2300 	strex	r3, r2, [r1]
 8001a72:	613b      	str	r3, [r7, #16]
   return(result);
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1e5      	bne.n	8001a46 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001a88:	bf00      	nop
 8001a8a:	3754      	adds	r7, #84	@ 0x54
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f7ff ff1e 	bl	80018f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b21      	cmp	r3, #33	@ 0x21
 8001ace:	d13e      	bne.n	8001b4e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ad8:	d114      	bne.n	8001b04 <UART_Transmit_IT+0x48>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d110      	bne.n	8001b04 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001af6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	1c9a      	adds	r2, r3, #2
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	621a      	str	r2, [r3, #32]
 8001b02:	e008      	b.n	8001b16 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	1c59      	adds	r1, r3, #1
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6211      	str	r1, [r2, #32]
 8001b0e:	781a      	ldrb	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	4619      	mov	r1, r3
 8001b24:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10f      	bne.n	8001b4a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e000      	b.n	8001b50 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001b4e:	2302      	movs	r3, #2
  }
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2220      	movs	r2, #32
 8001b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff fea3 	bl	80018c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08c      	sub	sp, #48	@ 0x30
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b22      	cmp	r3, #34	@ 0x22
 8001b9e:	f040 80ae 	bne.w	8001cfe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001baa:	d117      	bne.n	8001bdc <UART_Receive_IT+0x50>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d113      	bne.n	8001bdc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd4:	1c9a      	adds	r2, r3, #2
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bda:	e026      	b.n	8001c2a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bee:	d007      	beq.n	8001c00 <UART_Receive_IT+0x74>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10a      	bne.n	8001c0e <UART_Receive_IT+0x82>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d106      	bne.n	8001c0e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c0a:	701a      	strb	r2, [r3, #0]
 8001c0c:	e008      	b.n	8001c20 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c1e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	4619      	mov	r1, r3
 8001c38:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d15d      	bne.n	8001cfa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0220 	bic.w	r2, r2, #32
 8001c4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	695a      	ldr	r2, [r3, #20]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0201 	bic.w	r2, r2, #1
 8001c6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2220      	movs	r2, #32
 8001c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d135      	bne.n	8001cf0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	330c      	adds	r3, #12
 8001c90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	e853 3f00 	ldrex	r3, [r3]
 8001c98:	613b      	str	r3, [r7, #16]
   return(result);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	f023 0310 	bic.w	r3, r3, #16
 8001ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	330c      	adds	r3, #12
 8001ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001caa:	623a      	str	r2, [r7, #32]
 8001cac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cae:	69f9      	ldr	r1, [r7, #28]
 8001cb0:	6a3a      	ldr	r2, [r7, #32]
 8001cb2:	e841 2300 	strex	r3, r2, [r1]
 8001cb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1e5      	bne.n	8001c8a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b10      	cmp	r3, #16
 8001cca:	d10a      	bne.n	8001ce2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff fe0b 	bl	8001904 <HAL_UARTEx_RxEventCallback>
 8001cee:	e002      	b.n	8001cf6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff fdf3 	bl	80018dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e002      	b.n	8001d00 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e000      	b.n	8001d00 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8001cfe:	2302      	movs	r3, #2
  }
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3730      	adds	r7, #48	@ 0x30
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d0c:	b0c0      	sub	sp, #256	@ 0x100
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d24:	68d9      	ldr	r1, [r3, #12]
 8001d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	ea40 0301 	orr.w	r3, r0, r1
 8001d30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	431a      	orrs	r2, r3
 8001d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001d60:	f021 010c 	bic.w	r1, r1, #12
 8001d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001d6e:	430b      	orrs	r3, r1
 8001d70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d82:	6999      	ldr	r1, [r3, #24]
 8001d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	ea40 0301 	orr.w	r3, r0, r1
 8001d8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	4b8f      	ldr	r3, [pc, #572]	@ (8001fd4 <UART_SetConfig+0x2cc>)
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d005      	beq.n	8001da8 <UART_SetConfig+0xa0>
 8001d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	4b8d      	ldr	r3, [pc, #564]	@ (8001fd8 <UART_SetConfig+0x2d0>)
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d104      	bne.n	8001db2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001da8:	f7ff f976 	bl	8001098 <HAL_RCC_GetPCLK2Freq>
 8001dac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001db0:	e003      	b.n	8001dba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001db2:	f7ff f95d 	bl	8001070 <HAL_RCC_GetPCLK1Freq>
 8001db6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001dc4:	f040 810c 	bne.w	8001fe0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001dd2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001dd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001dda:	4622      	mov	r2, r4
 8001ddc:	462b      	mov	r3, r5
 8001dde:	1891      	adds	r1, r2, r2
 8001de0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001de2:	415b      	adcs	r3, r3
 8001de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001de6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001dea:	4621      	mov	r1, r4
 8001dec:	eb12 0801 	adds.w	r8, r2, r1
 8001df0:	4629      	mov	r1, r5
 8001df2:	eb43 0901 	adc.w	r9, r3, r1
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e0a:	4690      	mov	r8, r2
 8001e0c:	4699      	mov	r9, r3
 8001e0e:	4623      	mov	r3, r4
 8001e10:	eb18 0303 	adds.w	r3, r8, r3
 8001e14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001e18:	462b      	mov	r3, r5
 8001e1a:	eb49 0303 	adc.w	r3, r9, r3
 8001e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001e2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001e36:	460b      	mov	r3, r1
 8001e38:	18db      	adds	r3, r3, r3
 8001e3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	eb42 0303 	adc.w	r3, r2, r3
 8001e42:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001e4c:	f7fe f9e2 	bl	8000214 <__aeabi_uldivmod>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4b61      	ldr	r3, [pc, #388]	@ (8001fdc <UART_SetConfig+0x2d4>)
 8001e56:	fba3 2302 	umull	r2, r3, r3, r2
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	011c      	lsls	r4, r3, #4
 8001e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e62:	2200      	movs	r2, #0
 8001e64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e68:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001e6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001e70:	4642      	mov	r2, r8
 8001e72:	464b      	mov	r3, r9
 8001e74:	1891      	adds	r1, r2, r2
 8001e76:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001e78:	415b      	adcs	r3, r3
 8001e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e80:	4641      	mov	r1, r8
 8001e82:	eb12 0a01 	adds.w	sl, r2, r1
 8001e86:	4649      	mov	r1, r9
 8001e88:	eb43 0b01 	adc.w	fp, r3, r1
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ea0:	4692      	mov	sl, r2
 8001ea2:	469b      	mov	fp, r3
 8001ea4:	4643      	mov	r3, r8
 8001ea6:	eb1a 0303 	adds.w	r3, sl, r3
 8001eaa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001eae:	464b      	mov	r3, r9
 8001eb0:	eb4b 0303 	adc.w	r3, fp, r3
 8001eb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001ec4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001ec8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	18db      	adds	r3, r3, r3
 8001ed0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	eb42 0303 	adc.w	r3, r2, r3
 8001ed8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001eda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001ede:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001ee2:	f7fe f997 	bl	8000214 <__aeabi_uldivmod>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4611      	mov	r1, r2
 8001eec:	4b3b      	ldr	r3, [pc, #236]	@ (8001fdc <UART_SetConfig+0x2d4>)
 8001eee:	fba3 2301 	umull	r2, r3, r3, r1
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	2264      	movs	r2, #100	@ 0x64
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	1acb      	subs	r3, r1, r3
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001f02:	4b36      	ldr	r3, [pc, #216]	@ (8001fdc <UART_SetConfig+0x2d4>)
 8001f04:	fba3 2302 	umull	r2, r3, r3, r2
 8001f08:	095b      	lsrs	r3, r3, #5
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001f10:	441c      	add	r4, r3
 8001f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f16:	2200      	movs	r2, #0
 8001f18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001f20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001f24:	4642      	mov	r2, r8
 8001f26:	464b      	mov	r3, r9
 8001f28:	1891      	adds	r1, r2, r2
 8001f2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f2c:	415b      	adcs	r3, r3
 8001f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001f34:	4641      	mov	r1, r8
 8001f36:	1851      	adds	r1, r2, r1
 8001f38:	6339      	str	r1, [r7, #48]	@ 0x30
 8001f3a:	4649      	mov	r1, r9
 8001f3c:	414b      	adcs	r3, r1
 8001f3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001f4c:	4659      	mov	r1, fp
 8001f4e:	00cb      	lsls	r3, r1, #3
 8001f50:	4651      	mov	r1, sl
 8001f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f56:	4651      	mov	r1, sl
 8001f58:	00ca      	lsls	r2, r1, #3
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4642      	mov	r2, r8
 8001f62:	189b      	adds	r3, r3, r2
 8001f64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f68:	464b      	mov	r3, r9
 8001f6a:	460a      	mov	r2, r1
 8001f6c:	eb42 0303 	adc.w	r3, r2, r3
 8001f70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001f80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001f84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001f88:	460b      	mov	r3, r1
 8001f8a:	18db      	adds	r3, r3, r3
 8001f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f8e:	4613      	mov	r3, r2
 8001f90:	eb42 0303 	adc.w	r3, r2, r3
 8001f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001f9e:	f7fe f939 	bl	8000214 <__aeabi_uldivmod>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8001fdc <UART_SetConfig+0x2d4>)
 8001fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fac:	095b      	lsrs	r3, r3, #5
 8001fae:	2164      	movs	r1, #100	@ 0x64
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	3332      	adds	r3, #50	@ 0x32
 8001fba:	4a08      	ldr	r2, [pc, #32]	@ (8001fdc <UART_SetConfig+0x2d4>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	095b      	lsrs	r3, r3, #5
 8001fc2:	f003 0207 	and.w	r2, r3, #7
 8001fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4422      	add	r2, r4
 8001fce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001fd0:	e106      	b.n	80021e0 <UART_SetConfig+0x4d8>
 8001fd2:	bf00      	nop
 8001fd4:	40011000 	.word	0x40011000
 8001fd8:	40011400 	.word	0x40011400
 8001fdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001fea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001fee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001ff2:	4642      	mov	r2, r8
 8001ff4:	464b      	mov	r3, r9
 8001ff6:	1891      	adds	r1, r2, r2
 8001ff8:	6239      	str	r1, [r7, #32]
 8001ffa:	415b      	adcs	r3, r3
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ffe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002002:	4641      	mov	r1, r8
 8002004:	1854      	adds	r4, r2, r1
 8002006:	4649      	mov	r1, r9
 8002008:	eb43 0501 	adc.w	r5, r3, r1
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	00eb      	lsls	r3, r5, #3
 8002016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800201a:	00e2      	lsls	r2, r4, #3
 800201c:	4614      	mov	r4, r2
 800201e:	461d      	mov	r5, r3
 8002020:	4643      	mov	r3, r8
 8002022:	18e3      	adds	r3, r4, r3
 8002024:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002028:	464b      	mov	r3, r9
 800202a:	eb45 0303 	adc.w	r3, r5, r3
 800202e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800203e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800204e:	4629      	mov	r1, r5
 8002050:	008b      	lsls	r3, r1, #2
 8002052:	4621      	mov	r1, r4
 8002054:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002058:	4621      	mov	r1, r4
 800205a:	008a      	lsls	r2, r1, #2
 800205c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002060:	f7fe f8d8 	bl	8000214 <__aeabi_uldivmod>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4b60      	ldr	r3, [pc, #384]	@ (80021ec <UART_SetConfig+0x4e4>)
 800206a:	fba3 2302 	umull	r2, r3, r3, r2
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	011c      	lsls	r4, r3, #4
 8002072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002076:	2200      	movs	r2, #0
 8002078:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800207c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002080:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002084:	4642      	mov	r2, r8
 8002086:	464b      	mov	r3, r9
 8002088:	1891      	adds	r1, r2, r2
 800208a:	61b9      	str	r1, [r7, #24]
 800208c:	415b      	adcs	r3, r3
 800208e:	61fb      	str	r3, [r7, #28]
 8002090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002094:	4641      	mov	r1, r8
 8002096:	1851      	adds	r1, r2, r1
 8002098:	6139      	str	r1, [r7, #16]
 800209a:	4649      	mov	r1, r9
 800209c:	414b      	adcs	r3, r1
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	f04f 0300 	mov.w	r3, #0
 80020a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020ac:	4659      	mov	r1, fp
 80020ae:	00cb      	lsls	r3, r1, #3
 80020b0:	4651      	mov	r1, sl
 80020b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020b6:	4651      	mov	r1, sl
 80020b8:	00ca      	lsls	r2, r1, #3
 80020ba:	4610      	mov	r0, r2
 80020bc:	4619      	mov	r1, r3
 80020be:	4603      	mov	r3, r0
 80020c0:	4642      	mov	r2, r8
 80020c2:	189b      	adds	r3, r3, r2
 80020c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020c8:	464b      	mov	r3, r9
 80020ca:	460a      	mov	r2, r1
 80020cc:	eb42 0303 	adc.w	r3, r2, r3
 80020d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80020d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80020ec:	4649      	mov	r1, r9
 80020ee:	008b      	lsls	r3, r1, #2
 80020f0:	4641      	mov	r1, r8
 80020f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020f6:	4641      	mov	r1, r8
 80020f8:	008a      	lsls	r2, r1, #2
 80020fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80020fe:	f7fe f889 	bl	8000214 <__aeabi_uldivmod>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4611      	mov	r1, r2
 8002108:	4b38      	ldr	r3, [pc, #224]	@ (80021ec <UART_SetConfig+0x4e4>)
 800210a:	fba3 2301 	umull	r2, r3, r3, r1
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	2264      	movs	r2, #100	@ 0x64
 8002112:	fb02 f303 	mul.w	r3, r2, r3
 8002116:	1acb      	subs	r3, r1, r3
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	3332      	adds	r3, #50	@ 0x32
 800211c:	4a33      	ldr	r2, [pc, #204]	@ (80021ec <UART_SetConfig+0x4e4>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002128:	441c      	add	r4, r3
 800212a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800212e:	2200      	movs	r2, #0
 8002130:	673b      	str	r3, [r7, #112]	@ 0x70
 8002132:	677a      	str	r2, [r7, #116]	@ 0x74
 8002134:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002138:	4642      	mov	r2, r8
 800213a:	464b      	mov	r3, r9
 800213c:	1891      	adds	r1, r2, r2
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	415b      	adcs	r3, r3
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002148:	4641      	mov	r1, r8
 800214a:	1851      	adds	r1, r2, r1
 800214c:	6039      	str	r1, [r7, #0]
 800214e:	4649      	mov	r1, r9
 8002150:	414b      	adcs	r3, r1
 8002152:	607b      	str	r3, [r7, #4]
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002160:	4659      	mov	r1, fp
 8002162:	00cb      	lsls	r3, r1, #3
 8002164:	4651      	mov	r1, sl
 8002166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800216a:	4651      	mov	r1, sl
 800216c:	00ca      	lsls	r2, r1, #3
 800216e:	4610      	mov	r0, r2
 8002170:	4619      	mov	r1, r3
 8002172:	4603      	mov	r3, r0
 8002174:	4642      	mov	r2, r8
 8002176:	189b      	adds	r3, r3, r2
 8002178:	66bb      	str	r3, [r7, #104]	@ 0x68
 800217a:	464b      	mov	r3, r9
 800217c:	460a      	mov	r2, r1
 800217e:	eb42 0303 	adc.w	r3, r2, r3
 8002182:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	663b      	str	r3, [r7, #96]	@ 0x60
 800218e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800219c:	4649      	mov	r1, r9
 800219e:	008b      	lsls	r3, r1, #2
 80021a0:	4641      	mov	r1, r8
 80021a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021a6:	4641      	mov	r1, r8
 80021a8:	008a      	lsls	r2, r1, #2
 80021aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80021ae:	f7fe f831 	bl	8000214 <__aeabi_uldivmod>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4b0d      	ldr	r3, [pc, #52]	@ (80021ec <UART_SetConfig+0x4e4>)
 80021b8:	fba3 1302 	umull	r1, r3, r3, r2
 80021bc:	095b      	lsrs	r3, r3, #5
 80021be:	2164      	movs	r1, #100	@ 0x64
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	3332      	adds	r3, #50	@ 0x32
 80021ca:	4a08      	ldr	r2, [pc, #32]	@ (80021ec <UART_SetConfig+0x4e4>)
 80021cc:	fba2 2303 	umull	r2, r3, r2, r3
 80021d0:	095b      	lsrs	r3, r3, #5
 80021d2:	f003 020f 	and.w	r2, r3, #15
 80021d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4422      	add	r2, r4
 80021de:	609a      	str	r2, [r3, #8]
}
 80021e0:	bf00      	nop
 80021e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80021e6:	46bd      	mov	sp, r7
 80021e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ec:	51eb851f 	.word	0x51eb851f

080021f0 <__libc_init_array>:
 80021f0:	b570      	push	{r4, r5, r6, lr}
 80021f2:	4d0d      	ldr	r5, [pc, #52]	@ (8002228 <__libc_init_array+0x38>)
 80021f4:	4c0d      	ldr	r4, [pc, #52]	@ (800222c <__libc_init_array+0x3c>)
 80021f6:	1b64      	subs	r4, r4, r5
 80021f8:	10a4      	asrs	r4, r4, #2
 80021fa:	2600      	movs	r6, #0
 80021fc:	42a6      	cmp	r6, r4
 80021fe:	d109      	bne.n	8002214 <__libc_init_array+0x24>
 8002200:	4d0b      	ldr	r5, [pc, #44]	@ (8002230 <__libc_init_array+0x40>)
 8002202:	4c0c      	ldr	r4, [pc, #48]	@ (8002234 <__libc_init_array+0x44>)
 8002204:	f000 f818 	bl	8002238 <_init>
 8002208:	1b64      	subs	r4, r4, r5
 800220a:	10a4      	asrs	r4, r4, #2
 800220c:	2600      	movs	r6, #0
 800220e:	42a6      	cmp	r6, r4
 8002210:	d105      	bne.n	800221e <__libc_init_array+0x2e>
 8002212:	bd70      	pop	{r4, r5, r6, pc}
 8002214:	f855 3b04 	ldr.w	r3, [r5], #4
 8002218:	4798      	blx	r3
 800221a:	3601      	adds	r6, #1
 800221c:	e7ee      	b.n	80021fc <__libc_init_array+0xc>
 800221e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002222:	4798      	blx	r3
 8002224:	3601      	adds	r6, #1
 8002226:	e7f2      	b.n	800220e <__libc_init_array+0x1e>
 8002228:	080022ac 	.word	0x080022ac
 800222c:	080022ac 	.word	0x080022ac
 8002230:	080022ac 	.word	0x080022ac
 8002234:	080022b0 	.word	0x080022b0

08002238 <_init>:
 8002238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800223a:	bf00      	nop
 800223c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800223e:	bc08      	pop	{r3}
 8002240:	469e      	mov	lr, r3
 8002242:	4770      	bx	lr

08002244 <_fini>:
 8002244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002246:	bf00      	nop
 8002248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800224a:	bc08      	pop	{r3}
 800224c:	469e      	mov	lr, r3
 800224e:	4770      	bx	lr
