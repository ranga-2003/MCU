
lcd display 6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c40  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002e10  08002e10  00003e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e78  08002e78  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e78  08002e78  00003e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e80  08002e80  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e80  08002e80  00003e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e84  08002e84  00003e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002e88  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000005c  08002ee4  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08002ee4  00004274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083b3  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016fc  00000000  00000000  0000c43f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  0000db40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000565  00000000  00000000  0000e258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d5f  00000000  00000000  0000e7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008fb9  00000000  00000000  0002f51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7e2c  00000000  00000000  000384d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100301  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020f8  00000000  00000000  00100344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  0010243c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002df8 	.word	0x08002df8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08002df8 	.word	0x08002df8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
void LCD_EnablePulse(void);

char rx_buffer[100]; // Buffer to store received data

int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
    HAL_Init();
 80005b4:	f000 fac0 	bl	8000b38 <HAL_Init>
    SystemClock_Config();
 80005b8:	f000 f992 	bl	80008e0 <SystemClock_Config>
    MX_GPIO_Init();
 80005bc:	f000 f928 	bl	8000810 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80005c0:	f000 f854 	bl	800066c <MX_USART2_UART_Init>
    LCD_Init();
 80005c4:	f000 f87c 	bl	80006c0 <LCD_Init>

    UART_Transmit("STM32F4 UART Initialized\r\n");
 80005c8:	480a      	ldr	r0, [pc, #40]	@ (80005f4 <main+0x44>)
 80005ca:	f000 f819 	bl	8000600 <UART_Transmit>

    while (1)
    {
        UART_Receive();
 80005ce:	f000 f82d 	bl	800062c <UART_Receive>
        LCD_SetCursor(0, 0);
 80005d2:	2100      	movs	r1, #0
 80005d4:	2000      	movs	r0, #0
 80005d6:	f000 f8ea 	bl	80007ae <LCD_SetCursor>
        LCD_String("Received:");
 80005da:	4807      	ldr	r0, [pc, #28]	@ (80005f8 <main+0x48>)
 80005dc:	f000 f8d2 	bl	8000784 <LCD_String>
        LCD_SetCursor(1, 0);
 80005e0:	2100      	movs	r1, #0
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 f8e3 	bl	80007ae <LCD_SetCursor>
        LCD_String(rx_buffer);
 80005e8:	4804      	ldr	r0, [pc, #16]	@ (80005fc <main+0x4c>)
 80005ea:	f000 f8cb 	bl	8000784 <LCD_String>
        UART_Receive();
 80005ee:	bf00      	nop
 80005f0:	e7ed      	b.n	80005ce <main+0x1e>
 80005f2:	bf00      	nop
 80005f4:	08002e10 	.word	0x08002e10
 80005f8:	08002e2c 	.word	0x08002e2c
 80005fc:	200000c0 	.word	0x200000c0

08000600 <UART_Transmit>:
    }
}

// UART Transmit Function
void UART_Transmit(char *string)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)string, strlen(string), HAL_MAX_DELAY);
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff fe01 	bl	8000210 <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	b29a      	uxth	r2, r3
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	4803      	ldr	r0, [pc, #12]	@ (8000628 <UART_Transmit+0x28>)
 800061a:	f000 fef9 	bl	8001410 <HAL_UART_Transmit>
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000078 	.word	0x20000078

0800062c <UART_Receive>:

// UART Receive Function
void UART_Receive(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
    uint8_t rx_data;
    if (HAL_UART_Receive(&huart2, &rx_data, 1, HAL_MAX_DELAY) == HAL_OK)
 8000632:	1df9      	adds	r1, r7, #7
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	2201      	movs	r2, #1
 800063a:	4809      	ldr	r0, [pc, #36]	@ (8000660 <UART_Receive+0x34>)
 800063c:	f000 ff73 	bl	8001526 <HAL_UART_Receive>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d108      	bne.n	8000658 <UART_Receive+0x2c>
    {
        snprintf(rx_buffer, sizeof(rx_buffer), "%c", rx_data);
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	4a06      	ldr	r2, [pc, #24]	@ (8000664 <UART_Receive+0x38>)
 800064a:	2164      	movs	r1, #100	@ 0x64
 800064c:	4806      	ldr	r0, [pc, #24]	@ (8000668 <UART_Receive+0x3c>)
 800064e:	f001 ff27 	bl	80024a0 <sniprintf>
        UART_Transmit(rx_buffer); // Echo back received data
 8000652:	4805      	ldr	r0, [pc, #20]	@ (8000668 <UART_Receive+0x3c>)
 8000654:	f7ff ffd4 	bl	8000600 <UART_Transmit>
    }
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000078 	.word	0x20000078
 8000664:	08002e38 	.word	0x08002e38
 8000668:	200000c0 	.word	0x200000c0

0800066c <MX_USART2_UART_Init>:

// UART2 Initialization
static void MX_USART2_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000670:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000672:	4a12      	ldr	r2, [pc, #72]	@ (80006bc <MX_USART2_UART_Init+0x50>)
 8000674:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000676:	4b10      	ldr	r3, [pc, #64]	@ (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000678:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800067c:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000684:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000690:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000692:	220c      	movs	r2, #12
 8000694:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800069c:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <MX_USART2_UART_Init+0x4c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <MX_USART2_UART_Init+0x4c>)
 80006a4:	f000 fe64 	bl	8001370 <HAL_UART_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART2_UART_Init+0x46>
    {
        while (1); // Error handler
 80006ae:	bf00      	nop
 80006b0:	e7fd      	b.n	80006ae <MX_USART2_UART_Init+0x42>
    }
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000078 	.word	0x20000078
 80006bc:	40004400 	.word	0x40004400

080006c0 <LCD_Init>:

// LCD Initialization
void LCD_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 80006c4:	2032      	movs	r0, #50	@ 0x32
 80006c6:	f000 faa9 	bl	8000c1c <HAL_Delay>
    LCD_Command(0x38); // 8-bit mode, 2-line
 80006ca:	2038      	movs	r0, #56	@ 0x38
 80006cc:	f000 f80e 	bl	80006ec <LCD_Command>
    LCD_Command(0x0C); // Display ON, Cursor OFF
 80006d0:	200c      	movs	r0, #12
 80006d2:	f000 f80b 	bl	80006ec <LCD_Command>
    LCD_Command(0x06); // Auto increment cursor
 80006d6:	2006      	movs	r0, #6
 80006d8:	f000 f808 	bl	80006ec <LCD_Command>
    LCD_Command(0x01); // Clear display
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 f805 	bl	80006ec <LCD_Command>
    HAL_Delay(5);
 80006e2:	2005      	movs	r0, #5
 80006e4:	f000 fa9a 	bl	8000c1c <HAL_Delay>
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <LCD_Command>:

// Send command to LCD
void LCD_Command(uint8_t cmd)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_CTRL_PORT, RS_PIN, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2120      	movs	r1, #32
 80006fa:	480d      	ldr	r0, [pc, #52]	@ (8000730 <LCD_Command+0x44>)
 80006fc:	f000 fdea 	bl	80012d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CTRL_PORT, RW_PIN, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	2140      	movs	r1, #64	@ 0x40
 8000704:	480a      	ldr	r0, [pc, #40]	@ (8000730 <LCD_Command+0x44>)
 8000706:	f000 fde5 	bl	80012d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_DATA_PORT, 0xFF, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	21ff      	movs	r1, #255	@ 0xff
 800070e:	4809      	ldr	r0, [pc, #36]	@ (8000734 <LCD_Command+0x48>)
 8000710:	f000 fde0 	bl	80012d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_DATA_PORT, cmd, GPIO_PIN_SET);
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	b29b      	uxth	r3, r3
 8000718:	2201      	movs	r2, #1
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	@ (8000734 <LCD_Command+0x48>)
 800071e:	f000 fdd9 	bl	80012d4 <HAL_GPIO_WritePin>
    LCD_EnablePulse();
 8000722:	f000 f85f 	bl	80007e4 <LCD_EnablePulse>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40020400 	.word	0x40020400
 8000734:	40020800 	.word	0x40020800

08000738 <LCD_Char>:

// Send character to LCD
void LCD_Char(char data)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_CTRL_PORT, RS_PIN, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	2120      	movs	r1, #32
 8000746:	480d      	ldr	r0, [pc, #52]	@ (800077c <LCD_Char+0x44>)
 8000748:	f000 fdc4 	bl	80012d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CTRL_PORT, RW_PIN, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2140      	movs	r1, #64	@ 0x40
 8000750:	480a      	ldr	r0, [pc, #40]	@ (800077c <LCD_Char+0x44>)
 8000752:	f000 fdbf 	bl	80012d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_DATA_PORT, 0xFF, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	21ff      	movs	r1, #255	@ 0xff
 800075a:	4809      	ldr	r0, [pc, #36]	@ (8000780 <LCD_Char+0x48>)
 800075c:	f000 fdba 	bl	80012d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_DATA_PORT, data, GPIO_PIN_SET);
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	b29b      	uxth	r3, r3
 8000764:	2201      	movs	r2, #1
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	@ (8000780 <LCD_Char+0x48>)
 800076a:	f000 fdb3 	bl	80012d4 <HAL_GPIO_WritePin>
    LCD_EnablePulse();
 800076e:	f000 f839 	bl	80007e4 <LCD_EnablePulse>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40020400 	.word	0x40020400
 8000780:	40020800 	.word	0x40020800

08000784 <LCD_String>:

// Send string to LCD
void LCD_String(char *str)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    while (*str) LCD_Char(*str++);
 800078c:	e006      	b.n	800079c <LCD_String+0x18>
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	1c5a      	adds	r2, r3, #1
 8000792:	607a      	str	r2, [r7, #4]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ffce 	bl	8000738 <LCD_Char>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1f4      	bne.n	800078e <LCD_String+0xa>
}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <LCD_SetCursor>:

// Set cursor position
void LCD_SetCursor(uint8_t row, uint8_t col)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b084      	sub	sp, #16
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	460a      	mov	r2, r1
 80007b8:	71fb      	strb	r3, [r7, #7]
 80007ba:	4613      	mov	r3, r2
 80007bc:	71bb      	strb	r3, [r7, #6]
    uint8_t address = (row == 0) ? (0x80 + col) : (0xC0 + col);
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d103      	bne.n	80007cc <LCD_SetCursor+0x1e>
 80007c4:	79bb      	ldrb	r3, [r7, #6]
 80007c6:	3b80      	subs	r3, #128	@ 0x80
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	e002      	b.n	80007d2 <LCD_SetCursor+0x24>
 80007cc:	79bb      	ldrb	r3, [r7, #6]
 80007ce:	3b40      	subs	r3, #64	@ 0x40
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	73fb      	strb	r3, [r7, #15]
    LCD_Command(address);
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff88 	bl	80006ec <LCD_Command>
}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <LCD_EnablePulse>:

// Enable Pulse
void LCD_EnablePulse(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_CTRL_PORT, EN_PIN, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2180      	movs	r1, #128	@ 0x80
 80007ec:	4807      	ldr	r0, [pc, #28]	@ (800080c <LCD_EnablePulse+0x28>)
 80007ee:	f000 fd71 	bl	80012d4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80007f2:	2001      	movs	r0, #1
 80007f4:	f000 fa12 	bl	8000c1c <HAL_Delay>
    HAL_GPIO_WritePin(LCD_CTRL_PORT, EN_PIN, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2180      	movs	r1, #128	@ 0x80
 80007fc:	4803      	ldr	r0, [pc, #12]	@ (800080c <LCD_EnablePulse+0x28>)
 80007fe:	f000 fd69 	bl	80012d4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000802:	2001      	movs	r0, #1
 8000804:	f000 fa0a 	bl	8000c1c <HAL_Delay>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40020400 	.word	0x40020400

08000810 <MX_GPIO_Init>:

// GPIO Initialization
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b2d      	ldr	r3, [pc, #180]	@ (80008d0 <MX_GPIO_Init+0xc0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a2c      	ldr	r2, [pc, #176]	@ (80008d0 <MX_GPIO_Init+0xc0>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b2a      	ldr	r3, [pc, #168]	@ (80008d0 <MX_GPIO_Init+0xc0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b26      	ldr	r3, [pc, #152]	@ (80008d0 <MX_GPIO_Init+0xc0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a25      	ldr	r2, [pc, #148]	@ (80008d0 <MX_GPIO_Init+0xc0>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b23      	ldr	r3, [pc, #140]	@ (80008d0 <MX_GPIO_Init+0xc0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b1f      	ldr	r3, [pc, #124]	@ (80008d0 <MX_GPIO_Init+0xc0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a1e      	ldr	r2, [pc, #120]	@ (80008d0 <MX_GPIO_Init+0xc0>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b1c      	ldr	r3, [pc, #112]	@ (80008d0 <MX_GPIO_Init+0xc0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]

    // LCD Control Pins
    GPIO_InitStruct.Pin = RS_PIN | RW_PIN | EN_PIN;
 800087a:	23e0      	movs	r3, #224	@ 0xe0
 800087c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_CTRL_PORT, &GPIO_InitStruct);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4619      	mov	r1, r3
 8000890:	4810      	ldr	r0, [pc, #64]	@ (80008d4 <MX_GPIO_Init+0xc4>)
 8000892:	f000 fb8b 	bl	8000fac <HAL_GPIO_Init>

    // LCD Data Pins
    GPIO_InitStruct.Pin = GPIO_PIN_All;
 8000896:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800089a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(LCD_DATA_PORT, &GPIO_InitStruct);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	480d      	ldr	r0, [pc, #52]	@ (80008d8 <MX_GPIO_Init+0xc8>)
 80008a4:	f000 fb82 	bl	8000fac <HAL_GPIO_Init>

    // UART Pins (PA2 TX, PA3 RX)
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80008a8:	230c      	movs	r3, #12
 80008aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008b8:	2307      	movs	r3, #7
 80008ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	4619      	mov	r1, r3
 80008c2:	4806      	ldr	r0, [pc, #24]	@ (80008dc <MX_GPIO_Init+0xcc>)
 80008c4:	f000 fb72 	bl	8000fac <HAL_GPIO_Init>
}
 80008c8:	bf00      	nop
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020400 	.word	0x40020400
 80008d8:	40020800 	.word	0x40020800
 80008dc:	40020000 	.word	0x40020000

080008e0 <SystemClock_Config>:

// System Clock Configuration
void SystemClock_Config(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
    // System clock setup (Generated via CubeMX)
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
	...

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b10      	ldr	r3, [pc, #64]	@ (800093c <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fe:	4a0f      	ldr	r2, [pc, #60]	@ (800093c <HAL_MspInit+0x4c>)
 8000900:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000904:	6453      	str	r3, [r2, #68]	@ 0x44
 8000906:	4b0d      	ldr	r3, [pc, #52]	@ (800093c <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b09      	ldr	r3, [pc, #36]	@ (800093c <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	4a08      	ldr	r2, [pc, #32]	@ (800093c <HAL_MspInit+0x4c>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000920:	6413      	str	r3, [r2, #64]	@ 0x40
 8000922:	4b06      	ldr	r3, [pc, #24]	@ (800093c <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800092e:	2007      	movs	r0, #7
 8000930:	f000 fa68 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800

08000940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	@ 0x28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a1d      	ldr	r2, [pc, #116]	@ (80009d4 <HAL_UART_MspInit+0x94>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d133      	bne.n	80009ca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <HAL_UART_MspInit+0x98>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	4a1b      	ldr	r2, [pc, #108]	@ (80009d8 <HAL_UART_MspInit+0x98>)
 800096c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000970:	6413      	str	r3, [r2, #64]	@ 0x40
 8000972:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <HAL_UART_MspInit+0x98>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b15      	ldr	r3, [pc, #84]	@ (80009d8 <HAL_UART_MspInit+0x98>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a14      	ldr	r2, [pc, #80]	@ (80009d8 <HAL_UART_MspInit+0x98>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <HAL_UART_MspInit+0x98>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800099a:	230f      	movs	r3, #15
 800099c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009aa:	2307      	movs	r3, #7
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4809      	ldr	r0, [pc, #36]	@ (80009dc <HAL_UART_MspInit+0x9c>)
 80009b6:	f000 faf9 	bl	8000fac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	2026      	movs	r0, #38	@ 0x26
 80009c0:	f000 fa2b 	bl	8000e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009c4:	2026      	movs	r0, #38	@ 0x26
 80009c6:	f000 fa44 	bl	8000e52 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	@ 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40004400 	.word	0x40004400
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020000 	.word	0x40020000

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <NMI_Handler+0x4>

080009e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <MemManage_Handler+0x4>

080009f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a36:	f000 f8d1 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a44:	4802      	ldr	r0, [pc, #8]	@ (8000a50 <USART2_IRQHandler+0x10>)
 8000a46:	f000 fe05 	bl	8001654 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000078 	.word	0x20000078

08000a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a5c:	4a14      	ldr	r2, [pc, #80]	@ (8000ab0 <_sbrk+0x5c>)
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <_sbrk+0x60>)
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a68:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <_sbrk+0x64>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	@ (8000abc <_sbrk+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a76:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d207      	bcs.n	8000a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a84:	f001 fd40 	bl	8002508 <__errno>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a92:	e009      	b.n	8000aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a94:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4a05      	ldr	r2, [pc, #20]	@ (8000ab8 <_sbrk+0x64>)
 8000aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20020000 	.word	0x20020000
 8000ab4:	00000400 	.word	0x00000400
 8000ab8:	20000124 	.word	0x20000124
 8000abc:	20000278 	.word	0x20000278

08000ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	@ (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ae8:	f7ff ffea 	bl	8000ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	@ (8000b20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	@ (8000b24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	@ (8000b30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b12:	f001 fcff 	bl	8002514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b16:	f7ff fd4b 	bl	80005b0 <main>
  bx  lr    
 8000b1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b28:	08002e88 	.word	0x08002e88
  ldr r2, =_sbss
 8000b2c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b30:	20000274 	.word	0x20000274

08000b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0d      	ldr	r2, [pc, #52]	@ (8000b78 <HAL_Init+0x40>)
 8000b42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b48:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <HAL_Init+0x40>)
 8000b4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b54:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <HAL_Init+0x40>)
 8000b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f94f 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f000 f808 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6c:	f7ff fec0 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023c00 	.word	0x40023c00

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b84:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <HAL_InitTick+0x54>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <HAL_InitTick+0x58>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f967 	bl	8000e6e <HAL_SYSTICK_Config>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00e      	b.n	8000bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d80a      	bhi.n	8000bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f000 f92f 	bl	8000e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bbc:	4a06      	ldr	r2, [pc, #24]	@ (8000bd8 <HAL_InitTick+0x5c>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	20000004 	.word	0x20000004

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000128 	.word	0x20000128

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b03      	ldr	r3, [pc, #12]	@ (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000128 	.word	0x20000128

08000c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c24:	f7ff ffee 	bl	8000c04 <HAL_GetTick>
 8000c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d005      	beq.n	8000c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c36:	4b0a      	ldr	r3, [pc, #40]	@ (8000c60 <HAL_Delay+0x44>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c42:	bf00      	nop
 8000c44:	f7ff ffde 	bl	8000c04 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d8f7      	bhi.n	8000c44 <HAL_Delay+0x28>
  {
  }
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	@ (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db0b      	blt.n	8000cf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 021f 	and.w	r2, r3, #31
 8000ce0:	4907      	ldr	r1, [pc, #28]	@ (8000d00 <__NVIC_EnableIRQ+0x38>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	2001      	movs	r0, #1
 8000cea:	fa00 f202 	lsl.w	r2, r0, r2
 8000cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	@ (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	@ (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	@ 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	@ 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dd0:	d301      	bcc.n	8000dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00f      	b.n	8000df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e00 <SysTick_Config+0x40>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dde:	210f      	movs	r1, #15
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f7ff ff8e 	bl	8000d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de8:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <SysTick_Config+0x40>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dee:	4b04      	ldr	r3, [pc, #16]	@ (8000e00 <SysTick_Config+0x40>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e000e010 	.word	0xe000e010

08000e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff29 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2c:	f7ff ff3e 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff8e 	bl	8000d58 <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5d 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff31 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffa2 	bl	8000dc0 <SysTick_Config>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b084      	sub	sp, #16
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e92:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e94:	f7ff feb6 	bl	8000c04 <HAL_GetTick>
 8000e98:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d008      	beq.n	8000eb8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2280      	movs	r2, #128	@ 0x80
 8000eaa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e052      	b.n	8000f5e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 0216 	bic.w	r2, r2, #22
 8000ec6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	695a      	ldr	r2, [r3, #20]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ed6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d103      	bne.n	8000ee8 <HAL_DMA_Abort+0x62>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d007      	beq.n	8000ef8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f022 0208 	bic.w	r2, r2, #8
 8000ef6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f022 0201 	bic.w	r2, r2, #1
 8000f06:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f08:	e013      	b.n	8000f32 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f0a:	f7ff fe7b 	bl	8000c04 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b05      	cmp	r3, #5
 8000f16:	d90c      	bls.n	8000f32 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2220      	movs	r2, #32
 8000f1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2203      	movs	r2, #3
 8000f22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e015      	b.n	8000f5e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1e4      	bne.n	8000f0a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f44:	223f      	movs	r2, #63	@ 0x3f
 8000f46:	409a      	lsls	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d004      	beq.n	8000f84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2280      	movs	r2, #128	@ 0x80
 8000f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e00c      	b.n	8000f9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2205      	movs	r2, #5
 8000f88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 0201 	bic.w	r2, r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	@ 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	e165      	b.n	8001294 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	f040 8154 	bne.w	800128e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d005      	beq.n	8000ffe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d130      	bne.n	8001060 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2203      	movs	r2, #3
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001034:	2201      	movs	r2, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	091b      	lsrs	r3, r3, #4
 800104a:	f003 0201 	and.w	r2, r3, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b03      	cmp	r3, #3
 800106a:	d017      	beq.n	800109c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d123      	bne.n	80010f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	08da      	lsrs	r2, r3, #3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3208      	adds	r2, #8
 80010b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	220f      	movs	r2, #15
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	08da      	lsrs	r2, r3, #3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3208      	adds	r2, #8
 80010ea:	69b9      	ldr	r1, [r7, #24]
 80010ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0203 	and.w	r2, r3, #3
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 80ae 	beq.w	800128e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b5d      	ldr	r3, [pc, #372]	@ (80012ac <HAL_GPIO_Init+0x300>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	4a5c      	ldr	r2, [pc, #368]	@ (80012ac <HAL_GPIO_Init+0x300>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001140:	6453      	str	r3, [r2, #68]	@ 0x44
 8001142:	4b5a      	ldr	r3, [pc, #360]	@ (80012ac <HAL_GPIO_Init+0x300>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800114e:	4a58      	ldr	r2, [pc, #352]	@ (80012b0 <HAL_GPIO_Init+0x304>)
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	3302      	adds	r3, #2
 8001156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	220f      	movs	r2, #15
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4f      	ldr	r2, [pc, #316]	@ (80012b4 <HAL_GPIO_Init+0x308>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d025      	beq.n	80011c6 <HAL_GPIO_Init+0x21a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4e      	ldr	r2, [pc, #312]	@ (80012b8 <HAL_GPIO_Init+0x30c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d01f      	beq.n	80011c2 <HAL_GPIO_Init+0x216>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4d      	ldr	r2, [pc, #308]	@ (80012bc <HAL_GPIO_Init+0x310>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d019      	beq.n	80011be <HAL_GPIO_Init+0x212>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4c      	ldr	r2, [pc, #304]	@ (80012c0 <HAL_GPIO_Init+0x314>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d013      	beq.n	80011ba <HAL_GPIO_Init+0x20e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4b      	ldr	r2, [pc, #300]	@ (80012c4 <HAL_GPIO_Init+0x318>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d00d      	beq.n	80011b6 <HAL_GPIO_Init+0x20a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4a      	ldr	r2, [pc, #296]	@ (80012c8 <HAL_GPIO_Init+0x31c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d007      	beq.n	80011b2 <HAL_GPIO_Init+0x206>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a49      	ldr	r2, [pc, #292]	@ (80012cc <HAL_GPIO_Init+0x320>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d101      	bne.n	80011ae <HAL_GPIO_Init+0x202>
 80011aa:	2306      	movs	r3, #6
 80011ac:	e00c      	b.n	80011c8 <HAL_GPIO_Init+0x21c>
 80011ae:	2307      	movs	r3, #7
 80011b0:	e00a      	b.n	80011c8 <HAL_GPIO_Init+0x21c>
 80011b2:	2305      	movs	r3, #5
 80011b4:	e008      	b.n	80011c8 <HAL_GPIO_Init+0x21c>
 80011b6:	2304      	movs	r3, #4
 80011b8:	e006      	b.n	80011c8 <HAL_GPIO_Init+0x21c>
 80011ba:	2303      	movs	r3, #3
 80011bc:	e004      	b.n	80011c8 <HAL_GPIO_Init+0x21c>
 80011be:	2302      	movs	r3, #2
 80011c0:	e002      	b.n	80011c8 <HAL_GPIO_Init+0x21c>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <HAL_GPIO_Init+0x21c>
 80011c6:	2300      	movs	r3, #0
 80011c8:	69fa      	ldr	r2, [r7, #28]
 80011ca:	f002 0203 	and.w	r2, r2, #3
 80011ce:	0092      	lsls	r2, r2, #2
 80011d0:	4093      	lsls	r3, r2
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d8:	4935      	ldr	r1, [pc, #212]	@ (80012b0 <HAL_GPIO_Init+0x304>)
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	089b      	lsrs	r3, r3, #2
 80011de:	3302      	adds	r3, #2
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011e6:	4b3a      	ldr	r3, [pc, #232]	@ (80012d0 <HAL_GPIO_Init+0x324>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800120a:	4a31      	ldr	r2, [pc, #196]	@ (80012d0 <HAL_GPIO_Init+0x324>)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001210:	4b2f      	ldr	r3, [pc, #188]	@ (80012d0 <HAL_GPIO_Init+0x324>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001234:	4a26      	ldr	r2, [pc, #152]	@ (80012d0 <HAL_GPIO_Init+0x324>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800123a:	4b25      	ldr	r3, [pc, #148]	@ (80012d0 <HAL_GPIO_Init+0x324>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800125e:	4a1c      	ldr	r2, [pc, #112]	@ (80012d0 <HAL_GPIO_Init+0x324>)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001264:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <HAL_GPIO_Init+0x324>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001288:	4a11      	ldr	r2, [pc, #68]	@ (80012d0 <HAL_GPIO_Init+0x324>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3301      	adds	r3, #1
 8001292:	61fb      	str	r3, [r7, #28]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	2b0f      	cmp	r3, #15
 8001298:	f67f ae96 	bls.w	8000fc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3724      	adds	r7, #36	@ 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40013800 	.word	0x40013800
 80012b4:	40020000 	.word	0x40020000
 80012b8:	40020400 	.word	0x40020400
 80012bc:	40020800 	.word	0x40020800
 80012c0:	40020c00 	.word	0x40020c00
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40021400 	.word	0x40021400
 80012cc:	40021800 	.word	0x40021800
 80012d0:	40013c00 	.word	0x40013c00

080012d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
 80012e0:	4613      	mov	r3, r2
 80012e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e4:	787b      	ldrb	r3, [r7, #1]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ea:	887a      	ldrh	r2, [r7, #2]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f0:	e003      	b.n	80012fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012f2:	887b      	ldrh	r3, [r7, #2]
 80012f4:	041a      	lsls	r2, r3, #16
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	619a      	str	r2, [r3, #24]
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <HAL_RCC_GetHCLKFreq+0x14>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000000 	.word	0x20000000

08001320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001324:	f7ff fff0 	bl	8001308 <HAL_RCC_GetHCLKFreq>
 8001328:	4602      	mov	r2, r0
 800132a:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	0a9b      	lsrs	r3, r3, #10
 8001330:	f003 0307 	and.w	r3, r3, #7
 8001334:	4903      	ldr	r1, [pc, #12]	@ (8001344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001336:	5ccb      	ldrb	r3, [r1, r3]
 8001338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800133c:	4618      	mov	r0, r3
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800
 8001344:	08002e3c 	.word	0x08002e3c

08001348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800134c:	f7ff ffdc 	bl	8001308 <HAL_RCC_GetHCLKFreq>
 8001350:	4602      	mov	r2, r0
 8001352:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	0b5b      	lsrs	r3, r3, #13
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	4903      	ldr	r1, [pc, #12]	@ (800136c <HAL_RCC_GetPCLK2Freq+0x24>)
 800135e:	5ccb      	ldrb	r3, [r1, r3]
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001364:	4618      	mov	r0, r3
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	08002e3c 	.word	0x08002e3c

08001370 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e042      	b.n	8001408 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d106      	bne.n	800139c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fad2 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2224      	movs	r2, #36	@ 0x24
 80013a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68da      	ldr	r2, [r3, #12]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80013b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 fdff 	bl	8001fb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	691a      	ldr	r2, [r3, #16]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80013c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	695a      	ldr	r2, [r3, #20]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80013d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80013e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2220      	movs	r2, #32
 80013f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2220      	movs	r2, #32
 80013fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	@ 0x28
 8001414:	af02      	add	r7, sp, #8
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	4613      	mov	r3, r2
 800141e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b20      	cmp	r3, #32
 800142e:	d175      	bne.n	800151c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <HAL_UART_Transmit+0x2c>
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e06e      	b.n	800151e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2200      	movs	r2, #0
 8001444:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2221      	movs	r2, #33	@ 0x21
 800144a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800144e:	f7ff fbd9 	bl	8000c04 <HAL_GetTick>
 8001452:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	88fa      	ldrh	r2, [r7, #6]
 8001458:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	88fa      	ldrh	r2, [r7, #6]
 800145e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001468:	d108      	bne.n	800147c <HAL_UART_Transmit+0x6c>
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d104      	bne.n	800147c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	61bb      	str	r3, [r7, #24]
 800147a:	e003      	b.n	8001484 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001484:	e02e      	b.n	80014e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	2200      	movs	r2, #0
 800148e:	2180      	movs	r1, #128	@ 0x80
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 fb9b 	bl	8001bcc <UART_WaitOnFlagUntilTimeout>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2220      	movs	r2, #32
 80014a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e03a      	b.n	800151e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10b      	bne.n	80014c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	3302      	adds	r3, #2
 80014c2:	61bb      	str	r3, [r7, #24]
 80014c4:	e007      	b.n	80014d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	781a      	ldrb	r2, [r3, #0]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	3301      	adds	r3, #1
 80014d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80014da:	b29b      	uxth	r3, r3
 80014dc:	3b01      	subs	r3, #1
 80014de:	b29a      	uxth	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1cb      	bne.n	8001486 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	2200      	movs	r2, #0
 80014f6:	2140      	movs	r1, #64	@ 0x40
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f000 fb67 	bl	8001bcc <UART_WaitOnFlagUntilTimeout>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d005      	beq.n	8001510 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2220      	movs	r2, #32
 8001508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e006      	b.n	800151e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2220      	movs	r2, #32
 8001514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	e000      	b.n	800151e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800151c:	2302      	movs	r3, #2
  }
}
 800151e:	4618      	mov	r0, r3
 8001520:	3720      	adds	r7, #32
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b08a      	sub	sp, #40	@ 0x28
 800152a:	af02      	add	r7, sp, #8
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	4613      	mov	r3, r2
 8001534:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b20      	cmp	r3, #32
 8001544:	f040 8081 	bne.w	800164a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d002      	beq.n	8001554 <HAL_UART_Receive+0x2e>
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e079      	b.n	800164c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2222      	movs	r2, #34	@ 0x22
 8001562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800156c:	f7ff fb4a 	bl	8000c04 <HAL_GetTick>
 8001570:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	88fa      	ldrh	r2, [r7, #6]
 8001576:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	88fa      	ldrh	r2, [r7, #6]
 800157c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001586:	d108      	bne.n	800159a <HAL_UART_Receive+0x74>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d104      	bne.n	800159a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	61bb      	str	r3, [r7, #24]
 8001598:	e003      	b.n	80015a2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80015a2:	e047      	b.n	8001634 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	2200      	movs	r2, #0
 80015ac:	2120      	movs	r1, #32
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 fb0c 	bl	8001bcc <UART_WaitOnFlagUntilTimeout>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d005      	beq.n	80015c6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2220      	movs	r2, #32
 80015be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e042      	b.n	800164c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10c      	bne.n	80015e6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015d8:	b29a      	uxth	r2, r3
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	3302      	adds	r3, #2
 80015e2:	61bb      	str	r3, [r7, #24]
 80015e4:	e01f      	b.n	8001626 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015ee:	d007      	beq.n	8001600 <HAL_UART_Receive+0xda>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10a      	bne.n	800160e <HAL_UART_Receive+0xe8>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d106      	bne.n	800160e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	701a      	strb	r2, [r3, #0]
 800160c:	e008      	b.n	8001620 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800161a:	b2da      	uxtb	r2, r3
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	3301      	adds	r3, #1
 8001624:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800162a:	b29b      	uxth	r3, r3
 800162c:	3b01      	subs	r3, #1
 800162e:	b29a      	uxth	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001638:	b29b      	uxth	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1b2      	bne.n	80015a4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2220      	movs	r2, #32
 8001642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	e000      	b.n	800164c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800164a:	2302      	movs	r3, #2
  }
}
 800164c:	4618      	mov	r0, r3
 800164e:	3720      	adds	r7, #32
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b0ba      	sub	sp, #232	@ 0xe8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001692:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10f      	bne.n	80016ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800169a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800169e:	f003 0320 	and.w	r3, r3, #32
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d009      	beq.n	80016ba <HAL_UART_IRQHandler+0x66>
 80016a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80016aa:	f003 0320 	and.w	r3, r3, #32
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 fbc2 	bl	8001e3c <UART_Receive_IT>
      return;
 80016b8:	e25b      	b.n	8001b72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80016ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 80de 	beq.w	8001880 <HAL_UART_IRQHandler+0x22c>
 80016c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d106      	bne.n	80016de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80016d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80016d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 80d1 	beq.w	8001880 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80016de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00b      	beq.n	8001702 <HAL_UART_IRQHandler+0xae>
 80016ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80016ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fa:	f043 0201 	orr.w	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00b      	beq.n	8001726 <HAL_UART_IRQHandler+0xd2>
 800170e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d005      	beq.n	8001726 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171e:	f043 0202 	orr.w	r2, r3, #2
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00b      	beq.n	800174a <HAL_UART_IRQHandler+0xf6>
 8001732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d005      	beq.n	800174a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001742:	f043 0204 	orr.w	r2, r3, #4
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800174a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b00      	cmp	r3, #0
 8001754:	d011      	beq.n	800177a <HAL_UART_IRQHandler+0x126>
 8001756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800175a:	f003 0320 	and.w	r3, r3, #32
 800175e:	2b00      	cmp	r3, #0
 8001760:	d105      	bne.n	800176e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d005      	beq.n	800177a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001772:	f043 0208 	orr.w	r2, r3, #8
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 81f2 	beq.w	8001b68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001788:	f003 0320 	and.w	r3, r3, #32
 800178c:	2b00      	cmp	r3, #0
 800178e:	d008      	beq.n	80017a2 <HAL_UART_IRQHandler+0x14e>
 8001790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001794:	f003 0320 	and.w	r3, r3, #32
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 fb4d 	bl	8001e3c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017ac:	2b40      	cmp	r3, #64	@ 0x40
 80017ae:	bf0c      	ite	eq
 80017b0:	2301      	moveq	r3, #1
 80017b2:	2300      	movne	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d103      	bne.n	80017ce <HAL_UART_IRQHandler+0x17a>
 80017c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d04f      	beq.n	800186e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 fa55 	bl	8001c7e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017de:	2b40      	cmp	r3, #64	@ 0x40
 80017e0:	d141      	bne.n	8001866 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3314      	adds	r3, #20
 80017e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80017f0:	e853 3f00 	ldrex	r3, [r3]
 80017f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80017f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001800:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	3314      	adds	r3, #20
 800180a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800180e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001812:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001816:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800181a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800181e:	e841 2300 	strex	r3, r2, [r1]
 8001822:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001826:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1d9      	bne.n	80017e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001832:	2b00      	cmp	r3, #0
 8001834:	d013      	beq.n	800185e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800183a:	4a7e      	ldr	r2, [pc, #504]	@ (8001a34 <HAL_UART_IRQHandler+0x3e0>)
 800183c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fb8f 	bl	8000f66 <HAL_DMA_Abort_IT>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d016      	beq.n	800187c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001858:	4610      	mov	r0, r2
 800185a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800185c:	e00e      	b.n	800187c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f99e 	bl	8001ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001864:	e00a      	b.n	800187c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f99a 	bl	8001ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800186c:	e006      	b.n	800187c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f996 	bl	8001ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800187a:	e175      	b.n	8001b68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800187c:	bf00      	nop
    return;
 800187e:	e173      	b.n	8001b68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001884:	2b01      	cmp	r3, #1
 8001886:	f040 814f 	bne.w	8001b28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800188a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 8148 	beq.w	8001b28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 8141 	beq.w	8001b28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018c6:	2b40      	cmp	r3, #64	@ 0x40
 80018c8:	f040 80b6 	bne.w	8001a38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80018d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 8145 	beq.w	8001b6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80018e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80018ea:	429a      	cmp	r2, r3
 80018ec:	f080 813e 	bcs.w	8001b6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80018f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001902:	f000 8088 	beq.w	8001a16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	330c      	adds	r3, #12
 800190c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001910:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001914:	e853 3f00 	ldrex	r3, [r3]
 8001918:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800191c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001920:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001924:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	330c      	adds	r3, #12
 800192e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001932:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001936:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800193a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800193e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001942:	e841 2300 	strex	r3, r2, [r1]
 8001946:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800194a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1d9      	bne.n	8001906 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	3314      	adds	r3, #20
 8001958:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800195a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800195c:	e853 3f00 	ldrex	r3, [r3]
 8001960:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001962:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	3314      	adds	r3, #20
 8001972:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001976:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800197a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800197c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800197e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001982:	e841 2300 	strex	r3, r2, [r1]
 8001986:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001988:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1e1      	bne.n	8001952 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	3314      	adds	r3, #20
 8001994:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001996:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001998:	e853 3f00 	ldrex	r3, [r3]
 800199c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800199e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80019a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3314      	adds	r3, #20
 80019ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80019b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80019b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80019b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80019ba:	e841 2300 	strex	r3, r2, [r1]
 80019be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80019c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1e3      	bne.n	800198e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2220      	movs	r2, #32
 80019ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	330c      	adds	r3, #12
 80019da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80019de:	e853 3f00 	ldrex	r3, [r3]
 80019e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80019e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019e6:	f023 0310 	bic.w	r3, r3, #16
 80019ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	330c      	adds	r3, #12
 80019f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80019f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80019fa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80019fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001a00:	e841 2300 	strex	r3, r2, [r1]
 8001a04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001a06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1e3      	bne.n	80019d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fa38 	bl	8000e86 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2202      	movs	r2, #2
 8001a1a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f8c1 	bl	8001bb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001a32:	e09b      	b.n	8001b6c <HAL_UART_IRQHandler+0x518>
 8001a34:	08001d45 	.word	0x08001d45
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 808e 	beq.w	8001b70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001a54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 8089 	beq.w	8001b70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	330c      	adds	r3, #12
 8001a64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a68:	e853 3f00 	ldrex	r3, [r3]
 8001a6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001a74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	330c      	adds	r3, #12
 8001a7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001a82:	647a      	str	r2, [r7, #68]	@ 0x44
 8001a84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001a88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a8a:	e841 2300 	strex	r3, r2, [r1]
 8001a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1e3      	bne.n	8001a5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	3314      	adds	r3, #20
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa0:	e853 3f00 	ldrex	r3, [r3]
 8001aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	3314      	adds	r3, #20
 8001ab6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001aba:	633a      	str	r2, [r7, #48]	@ 0x30
 8001abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001abe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001ac0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ac2:	e841 2300 	strex	r3, r2, [r1]
 8001ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1e3      	bne.n	8001a96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	330c      	adds	r3, #12
 8001ae2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	e853 3f00 	ldrex	r3, [r3]
 8001aea:	60fb      	str	r3, [r7, #12]
   return(result);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f023 0310 	bic.w	r3, r3, #16
 8001af2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	330c      	adds	r3, #12
 8001afc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001b00:	61fa      	str	r2, [r7, #28]
 8001b02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b04:	69b9      	ldr	r1, [r7, #24]
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	e841 2300 	strex	r3, r2, [r1]
 8001b0c:	617b      	str	r3, [r7, #20]
   return(result);
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1e3      	bne.n	8001adc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2202      	movs	r2, #2
 8001b18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001b1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001b1e:	4619      	mov	r1, r3
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f847 	bl	8001bb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001b26:	e023      	b.n	8001b70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d009      	beq.n	8001b48 <HAL_UART_IRQHandler+0x4f4>
 8001b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f913 	bl	8001d6c <UART_Transmit_IT>
    return;
 8001b46:	e014      	b.n	8001b72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00e      	beq.n	8001b72 <HAL_UART_IRQHandler+0x51e>
 8001b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f953 	bl	8001e0c <UART_EndTransmit_IT>
    return;
 8001b66:	e004      	b.n	8001b72 <HAL_UART_IRQHandler+0x51e>
    return;
 8001b68:	bf00      	nop
 8001b6a:	e002      	b.n	8001b72 <HAL_UART_IRQHandler+0x51e>
      return;
 8001b6c:	bf00      	nop
 8001b6e:	e000      	b.n	8001b72 <HAL_UART_IRQHandler+0x51e>
      return;
 8001b70:	bf00      	nop
  }
}
 8001b72:	37e8      	adds	r7, #232	@ 0xe8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bdc:	e03b      	b.n	8001c56 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be4:	d037      	beq.n	8001c56 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001be6:	f7ff f80d 	bl	8000c04 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	6a3a      	ldr	r2, [r7, #32]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d302      	bcc.n	8001bfc <UART_WaitOnFlagUntilTimeout+0x30>
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e03a      	b.n	8001c76 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d023      	beq.n	8001c56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b80      	cmp	r3, #128	@ 0x80
 8001c12:	d020      	beq.n	8001c56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b40      	cmp	r3, #64	@ 0x40
 8001c18:	d01d      	beq.n	8001c56 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d116      	bne.n	8001c56 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 f81d 	bl	8001c7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2208      	movs	r2, #8
 8001c48:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00f      	b.n	8001c76 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	bf0c      	ite	eq
 8001c66:	2301      	moveq	r3, #1
 8001c68:	2300      	movne	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d0b4      	beq.n	8001bde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b095      	sub	sp, #84	@ 0x54
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	330c      	adds	r3, #12
 8001c8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c90:	e853 3f00 	ldrex	r3, [r3]
 8001c94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	330c      	adds	r3, #12
 8001ca4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ca6:	643a      	str	r2, [r7, #64]	@ 0x40
 8001ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001caa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001cac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001cae:	e841 2300 	strex	r3, r2, [r1]
 8001cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1e5      	bne.n	8001c86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	3314      	adds	r3, #20
 8001cc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	e853 3f00 	ldrex	r3, [r3]
 8001cc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	3314      	adds	r3, #20
 8001cd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001cda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ce0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ce2:	e841 2300 	strex	r3, r2, [r1]
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1e5      	bne.n	8001cba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d119      	bne.n	8001d2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	330c      	adds	r3, #12
 8001cfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	e853 3f00 	ldrex	r3, [r3]
 8001d04:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	f023 0310 	bic.w	r3, r3, #16
 8001d0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	330c      	adds	r3, #12
 8001d14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d16:	61ba      	str	r2, [r7, #24]
 8001d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d1a:	6979      	ldr	r1, [r7, #20]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	e841 2300 	strex	r3, r2, [r1]
 8001d22:	613b      	str	r3, [r7, #16]
   return(result);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1e5      	bne.n	8001cf6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001d38:	bf00      	nop
 8001d3a:	3754      	adds	r7, #84	@ 0x54
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f7ff ff1e 	bl	8001ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d64:	bf00      	nop
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b21      	cmp	r3, #33	@ 0x21
 8001d7e:	d13e      	bne.n	8001dfe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d88:	d114      	bne.n	8001db4 <UART_Transmit_IT+0x48>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d110      	bne.n	8001db4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001da6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	1c9a      	adds	r2, r3, #2
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	621a      	str	r2, [r3, #32]
 8001db2:	e008      	b.n	8001dc6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	1c59      	adds	r1, r3, #1
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6211      	str	r1, [r2, #32]
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10f      	bne.n	8001dfa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001de8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001df8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e000      	b.n	8001e00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001dfe:	2302      	movs	r3, #2
  }
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e22:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2220      	movs	r2, #32
 8001e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff fea3 	bl	8001b78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08c      	sub	sp, #48	@ 0x30
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b22      	cmp	r3, #34	@ 0x22
 8001e4e:	f040 80ae 	bne.w	8001fae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e5a:	d117      	bne.n	8001e8c <UART_Receive_IT+0x50>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d113      	bne.n	8001e8c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e7e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e84:	1c9a      	adds	r2, r3, #2
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e8a:	e026      	b.n	8001eda <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e9e:	d007      	beq.n	8001eb0 <UART_Receive_IT+0x74>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10a      	bne.n	8001ebe <UART_Receive_IT+0x82>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d106      	bne.n	8001ebe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eba:	701a      	strb	r2, [r3, #0]
 8001ebc:	e008      	b.n	8001ed0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ece:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d15d      	bne.n	8001faa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0220 	bic.w	r2, r2, #32
 8001efc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0201 	bic.w	r2, r2, #1
 8001f1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2220      	movs	r2, #32
 8001f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d135      	bne.n	8001fa0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	330c      	adds	r3, #12
 8001f40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	e853 3f00 	ldrex	r3, [r3]
 8001f48:	613b      	str	r3, [r7, #16]
   return(result);
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	f023 0310 	bic.w	r3, r3, #16
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	330c      	adds	r3, #12
 8001f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f5a:	623a      	str	r2, [r7, #32]
 8001f5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f5e:	69f9      	ldr	r1, [r7, #28]
 8001f60:	6a3a      	ldr	r2, [r7, #32]
 8001f62:	e841 2300 	strex	r3, r2, [r1]
 8001f66:	61bb      	str	r3, [r7, #24]
   return(result);
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1e5      	bne.n	8001f3a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0310 	and.w	r3, r3, #16
 8001f78:	2b10      	cmp	r3, #16
 8001f7a:	d10a      	bne.n	8001f92 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001f96:	4619      	mov	r1, r3
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff fe0b 	bl	8001bb4 <HAL_UARTEx_RxEventCallback>
 8001f9e:	e002      	b.n	8001fa6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff fdf3 	bl	8001b8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e002      	b.n	8001fb0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e000      	b.n	8001fb0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8001fae:	2302      	movs	r3, #2
  }
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3730      	adds	r7, #48	@ 0x30
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fbc:	b0c0      	sub	sp, #256	@ 0x100
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fd4:	68d9      	ldr	r1, [r3, #12]
 8001fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	ea40 0301 	orr.w	r3, r0, r1
 8001fe0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002010:	f021 010c 	bic.w	r1, r1, #12
 8002014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800201e:	430b      	orrs	r3, r1
 8002020:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800202e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002032:	6999      	ldr	r1, [r3, #24]
 8002034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	ea40 0301 	orr.w	r3, r0, r1
 800203e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	4b8f      	ldr	r3, [pc, #572]	@ (8002284 <UART_SetConfig+0x2cc>)
 8002048:	429a      	cmp	r2, r3
 800204a:	d005      	beq.n	8002058 <UART_SetConfig+0xa0>
 800204c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4b8d      	ldr	r3, [pc, #564]	@ (8002288 <UART_SetConfig+0x2d0>)
 8002054:	429a      	cmp	r2, r3
 8002056:	d104      	bne.n	8002062 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002058:	f7ff f976 	bl	8001348 <HAL_RCC_GetPCLK2Freq>
 800205c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002060:	e003      	b.n	800206a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002062:	f7ff f95d 	bl	8001320 <HAL_RCC_GetPCLK1Freq>
 8002066:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800206a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002074:	f040 810c 	bne.w	8002290 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800207c:	2200      	movs	r2, #0
 800207e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002082:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002086:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800208a:	4622      	mov	r2, r4
 800208c:	462b      	mov	r3, r5
 800208e:	1891      	adds	r1, r2, r2
 8002090:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002092:	415b      	adcs	r3, r3
 8002094:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002096:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800209a:	4621      	mov	r1, r4
 800209c:	eb12 0801 	adds.w	r8, r2, r1
 80020a0:	4629      	mov	r1, r5
 80020a2:	eb43 0901 	adc.w	r9, r3, r1
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020ba:	4690      	mov	r8, r2
 80020bc:	4699      	mov	r9, r3
 80020be:	4623      	mov	r3, r4
 80020c0:	eb18 0303 	adds.w	r3, r8, r3
 80020c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80020c8:	462b      	mov	r3, r5
 80020ca:	eb49 0303 	adc.w	r3, r9, r3
 80020ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80020d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80020de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80020e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80020e6:	460b      	mov	r3, r1
 80020e8:	18db      	adds	r3, r3, r3
 80020ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80020ec:	4613      	mov	r3, r2
 80020ee:	eb42 0303 	adc.w	r3, r2, r3
 80020f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80020f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80020f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80020fc:	f7fe f8e0 	bl	80002c0 <__aeabi_uldivmod>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4b61      	ldr	r3, [pc, #388]	@ (800228c <UART_SetConfig+0x2d4>)
 8002106:	fba3 2302 	umull	r2, r3, r3, r2
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	011c      	lsls	r4, r3, #4
 800210e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002112:	2200      	movs	r2, #0
 8002114:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002118:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800211c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002120:	4642      	mov	r2, r8
 8002122:	464b      	mov	r3, r9
 8002124:	1891      	adds	r1, r2, r2
 8002126:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002128:	415b      	adcs	r3, r3
 800212a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800212c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002130:	4641      	mov	r1, r8
 8002132:	eb12 0a01 	adds.w	sl, r2, r1
 8002136:	4649      	mov	r1, r9
 8002138:	eb43 0b01 	adc.w	fp, r3, r1
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002148:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800214c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002150:	4692      	mov	sl, r2
 8002152:	469b      	mov	fp, r3
 8002154:	4643      	mov	r3, r8
 8002156:	eb1a 0303 	adds.w	r3, sl, r3
 800215a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800215e:	464b      	mov	r3, r9
 8002160:	eb4b 0303 	adc.w	r3, fp, r3
 8002164:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002174:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002178:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800217c:	460b      	mov	r3, r1
 800217e:	18db      	adds	r3, r3, r3
 8002180:	643b      	str	r3, [r7, #64]	@ 0x40
 8002182:	4613      	mov	r3, r2
 8002184:	eb42 0303 	adc.w	r3, r2, r3
 8002188:	647b      	str	r3, [r7, #68]	@ 0x44
 800218a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800218e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002192:	f7fe f895 	bl	80002c0 <__aeabi_uldivmod>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4611      	mov	r1, r2
 800219c:	4b3b      	ldr	r3, [pc, #236]	@ (800228c <UART_SetConfig+0x2d4>)
 800219e:	fba3 2301 	umull	r2, r3, r3, r1
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	2264      	movs	r2, #100	@ 0x64
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	1acb      	subs	r3, r1, r3
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80021b2:	4b36      	ldr	r3, [pc, #216]	@ (800228c <UART_SetConfig+0x2d4>)
 80021b4:	fba3 2302 	umull	r2, r3, r3, r2
 80021b8:	095b      	lsrs	r3, r3, #5
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80021c0:	441c      	add	r4, r3
 80021c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021c6:	2200      	movs	r2, #0
 80021c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80021cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80021d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80021d4:	4642      	mov	r2, r8
 80021d6:	464b      	mov	r3, r9
 80021d8:	1891      	adds	r1, r2, r2
 80021da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80021dc:	415b      	adcs	r3, r3
 80021de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80021e4:	4641      	mov	r1, r8
 80021e6:	1851      	adds	r1, r2, r1
 80021e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80021ea:	4649      	mov	r1, r9
 80021ec:	414b      	adcs	r3, r1
 80021ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80021fc:	4659      	mov	r1, fp
 80021fe:	00cb      	lsls	r3, r1, #3
 8002200:	4651      	mov	r1, sl
 8002202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002206:	4651      	mov	r1, sl
 8002208:	00ca      	lsls	r2, r1, #3
 800220a:	4610      	mov	r0, r2
 800220c:	4619      	mov	r1, r3
 800220e:	4603      	mov	r3, r0
 8002210:	4642      	mov	r2, r8
 8002212:	189b      	adds	r3, r3, r2
 8002214:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002218:	464b      	mov	r3, r9
 800221a:	460a      	mov	r2, r1
 800221c:	eb42 0303 	adc.w	r3, r2, r3
 8002220:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002230:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002234:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002238:	460b      	mov	r3, r1
 800223a:	18db      	adds	r3, r3, r3
 800223c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800223e:	4613      	mov	r3, r2
 8002240:	eb42 0303 	adc.w	r3, r2, r3
 8002244:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002246:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800224a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800224e:	f7fe f837 	bl	80002c0 <__aeabi_uldivmod>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	4b0d      	ldr	r3, [pc, #52]	@ (800228c <UART_SetConfig+0x2d4>)
 8002258:	fba3 1302 	umull	r1, r3, r3, r2
 800225c:	095b      	lsrs	r3, r3, #5
 800225e:	2164      	movs	r1, #100	@ 0x64
 8002260:	fb01 f303 	mul.w	r3, r1, r3
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	3332      	adds	r3, #50	@ 0x32
 800226a:	4a08      	ldr	r2, [pc, #32]	@ (800228c <UART_SetConfig+0x2d4>)
 800226c:	fba2 2303 	umull	r2, r3, r2, r3
 8002270:	095b      	lsrs	r3, r3, #5
 8002272:	f003 0207 	and.w	r2, r3, #7
 8002276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4422      	add	r2, r4
 800227e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002280:	e106      	b.n	8002490 <UART_SetConfig+0x4d8>
 8002282:	bf00      	nop
 8002284:	40011000 	.word	0x40011000
 8002288:	40011400 	.word	0x40011400
 800228c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002294:	2200      	movs	r2, #0
 8002296:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800229a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800229e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80022a2:	4642      	mov	r2, r8
 80022a4:	464b      	mov	r3, r9
 80022a6:	1891      	adds	r1, r2, r2
 80022a8:	6239      	str	r1, [r7, #32]
 80022aa:	415b      	adcs	r3, r3
 80022ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022b2:	4641      	mov	r1, r8
 80022b4:	1854      	adds	r4, r2, r1
 80022b6:	4649      	mov	r1, r9
 80022b8:	eb43 0501 	adc.w	r5, r3, r1
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	00eb      	lsls	r3, r5, #3
 80022c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022ca:	00e2      	lsls	r2, r4, #3
 80022cc:	4614      	mov	r4, r2
 80022ce:	461d      	mov	r5, r3
 80022d0:	4643      	mov	r3, r8
 80022d2:	18e3      	adds	r3, r4, r3
 80022d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022d8:	464b      	mov	r3, r9
 80022da:	eb45 0303 	adc.w	r3, r5, r3
 80022de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80022e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80022fe:	4629      	mov	r1, r5
 8002300:	008b      	lsls	r3, r1, #2
 8002302:	4621      	mov	r1, r4
 8002304:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002308:	4621      	mov	r1, r4
 800230a:	008a      	lsls	r2, r1, #2
 800230c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002310:	f7fd ffd6 	bl	80002c0 <__aeabi_uldivmod>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4b60      	ldr	r3, [pc, #384]	@ (800249c <UART_SetConfig+0x4e4>)
 800231a:	fba3 2302 	umull	r2, r3, r3, r2
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	011c      	lsls	r4, r3, #4
 8002322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002326:	2200      	movs	r2, #0
 8002328:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800232c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002330:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002334:	4642      	mov	r2, r8
 8002336:	464b      	mov	r3, r9
 8002338:	1891      	adds	r1, r2, r2
 800233a:	61b9      	str	r1, [r7, #24]
 800233c:	415b      	adcs	r3, r3
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002344:	4641      	mov	r1, r8
 8002346:	1851      	adds	r1, r2, r1
 8002348:	6139      	str	r1, [r7, #16]
 800234a:	4649      	mov	r1, r9
 800234c:	414b      	adcs	r3, r1
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800235c:	4659      	mov	r1, fp
 800235e:	00cb      	lsls	r3, r1, #3
 8002360:	4651      	mov	r1, sl
 8002362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002366:	4651      	mov	r1, sl
 8002368:	00ca      	lsls	r2, r1, #3
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	4603      	mov	r3, r0
 8002370:	4642      	mov	r2, r8
 8002372:	189b      	adds	r3, r3, r2
 8002374:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002378:	464b      	mov	r3, r9
 800237a:	460a      	mov	r2, r1
 800237c:	eb42 0303 	adc.w	r3, r2, r3
 8002380:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800238e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800239c:	4649      	mov	r1, r9
 800239e:	008b      	lsls	r3, r1, #2
 80023a0:	4641      	mov	r1, r8
 80023a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023a6:	4641      	mov	r1, r8
 80023a8:	008a      	lsls	r2, r1, #2
 80023aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80023ae:	f7fd ff87 	bl	80002c0 <__aeabi_uldivmod>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4611      	mov	r1, r2
 80023b8:	4b38      	ldr	r3, [pc, #224]	@ (800249c <UART_SetConfig+0x4e4>)
 80023ba:	fba3 2301 	umull	r2, r3, r3, r1
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	2264      	movs	r2, #100	@ 0x64
 80023c2:	fb02 f303 	mul.w	r3, r2, r3
 80023c6:	1acb      	subs	r3, r1, r3
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	3332      	adds	r3, #50	@ 0x32
 80023cc:	4a33      	ldr	r2, [pc, #204]	@ (800249c <UART_SetConfig+0x4e4>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023d8:	441c      	add	r4, r3
 80023da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023de:	2200      	movs	r2, #0
 80023e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80023e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80023e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80023e8:	4642      	mov	r2, r8
 80023ea:	464b      	mov	r3, r9
 80023ec:	1891      	adds	r1, r2, r2
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	415b      	adcs	r3, r3
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023f8:	4641      	mov	r1, r8
 80023fa:	1851      	adds	r1, r2, r1
 80023fc:	6039      	str	r1, [r7, #0]
 80023fe:	4649      	mov	r1, r9
 8002400:	414b      	adcs	r3, r1
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002410:	4659      	mov	r1, fp
 8002412:	00cb      	lsls	r3, r1, #3
 8002414:	4651      	mov	r1, sl
 8002416:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800241a:	4651      	mov	r1, sl
 800241c:	00ca      	lsls	r2, r1, #3
 800241e:	4610      	mov	r0, r2
 8002420:	4619      	mov	r1, r3
 8002422:	4603      	mov	r3, r0
 8002424:	4642      	mov	r2, r8
 8002426:	189b      	adds	r3, r3, r2
 8002428:	66bb      	str	r3, [r7, #104]	@ 0x68
 800242a:	464b      	mov	r3, r9
 800242c:	460a      	mov	r2, r1
 800242e:	eb42 0303 	adc.w	r3, r2, r3
 8002432:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	663b      	str	r3, [r7, #96]	@ 0x60
 800243e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800244c:	4649      	mov	r1, r9
 800244e:	008b      	lsls	r3, r1, #2
 8002450:	4641      	mov	r1, r8
 8002452:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002456:	4641      	mov	r1, r8
 8002458:	008a      	lsls	r2, r1, #2
 800245a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800245e:	f7fd ff2f 	bl	80002c0 <__aeabi_uldivmod>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4b0d      	ldr	r3, [pc, #52]	@ (800249c <UART_SetConfig+0x4e4>)
 8002468:	fba3 1302 	umull	r1, r3, r3, r2
 800246c:	095b      	lsrs	r3, r3, #5
 800246e:	2164      	movs	r1, #100	@ 0x64
 8002470:	fb01 f303 	mul.w	r3, r1, r3
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	3332      	adds	r3, #50	@ 0x32
 800247a:	4a08      	ldr	r2, [pc, #32]	@ (800249c <UART_SetConfig+0x4e4>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	095b      	lsrs	r3, r3, #5
 8002482:	f003 020f 	and.w	r2, r3, #15
 8002486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4422      	add	r2, r4
 800248e:	609a      	str	r2, [r3, #8]
}
 8002490:	bf00      	nop
 8002492:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002496:	46bd      	mov	sp, r7
 8002498:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800249c:	51eb851f 	.word	0x51eb851f

080024a0 <sniprintf>:
 80024a0:	b40c      	push	{r2, r3}
 80024a2:	b530      	push	{r4, r5, lr}
 80024a4:	4b17      	ldr	r3, [pc, #92]	@ (8002504 <sniprintf+0x64>)
 80024a6:	1e0c      	subs	r4, r1, #0
 80024a8:	681d      	ldr	r5, [r3, #0]
 80024aa:	b09d      	sub	sp, #116	@ 0x74
 80024ac:	da08      	bge.n	80024c0 <sniprintf+0x20>
 80024ae:	238b      	movs	r3, #139	@ 0x8b
 80024b0:	602b      	str	r3, [r5, #0]
 80024b2:	f04f 30ff 	mov.w	r0, #4294967295
 80024b6:	b01d      	add	sp, #116	@ 0x74
 80024b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80024bc:	b002      	add	sp, #8
 80024be:	4770      	bx	lr
 80024c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80024c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80024c8:	bf14      	ite	ne
 80024ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 80024ce:	4623      	moveq	r3, r4
 80024d0:	9304      	str	r3, [sp, #16]
 80024d2:	9307      	str	r3, [sp, #28]
 80024d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024d8:	9002      	str	r0, [sp, #8]
 80024da:	9006      	str	r0, [sp, #24]
 80024dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80024e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80024e2:	ab21      	add	r3, sp, #132	@ 0x84
 80024e4:	a902      	add	r1, sp, #8
 80024e6:	4628      	mov	r0, r5
 80024e8:	9301      	str	r3, [sp, #4]
 80024ea:	f000 f98d 	bl	8002808 <_svfiprintf_r>
 80024ee:	1c43      	adds	r3, r0, #1
 80024f0:	bfbc      	itt	lt
 80024f2:	238b      	movlt	r3, #139	@ 0x8b
 80024f4:	602b      	strlt	r3, [r5, #0]
 80024f6:	2c00      	cmp	r4, #0
 80024f8:	d0dd      	beq.n	80024b6 <sniprintf+0x16>
 80024fa:	9b02      	ldr	r3, [sp, #8]
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	e7d9      	b.n	80024b6 <sniprintf+0x16>
 8002502:	bf00      	nop
 8002504:	2000000c 	.word	0x2000000c

08002508 <__errno>:
 8002508:	4b01      	ldr	r3, [pc, #4]	@ (8002510 <__errno+0x8>)
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	2000000c 	.word	0x2000000c

08002514 <__libc_init_array>:
 8002514:	b570      	push	{r4, r5, r6, lr}
 8002516:	4d0d      	ldr	r5, [pc, #52]	@ (800254c <__libc_init_array+0x38>)
 8002518:	4c0d      	ldr	r4, [pc, #52]	@ (8002550 <__libc_init_array+0x3c>)
 800251a:	1b64      	subs	r4, r4, r5
 800251c:	10a4      	asrs	r4, r4, #2
 800251e:	2600      	movs	r6, #0
 8002520:	42a6      	cmp	r6, r4
 8002522:	d109      	bne.n	8002538 <__libc_init_array+0x24>
 8002524:	4d0b      	ldr	r5, [pc, #44]	@ (8002554 <__libc_init_array+0x40>)
 8002526:	4c0c      	ldr	r4, [pc, #48]	@ (8002558 <__libc_init_array+0x44>)
 8002528:	f000 fc66 	bl	8002df8 <_init>
 800252c:	1b64      	subs	r4, r4, r5
 800252e:	10a4      	asrs	r4, r4, #2
 8002530:	2600      	movs	r6, #0
 8002532:	42a6      	cmp	r6, r4
 8002534:	d105      	bne.n	8002542 <__libc_init_array+0x2e>
 8002536:	bd70      	pop	{r4, r5, r6, pc}
 8002538:	f855 3b04 	ldr.w	r3, [r5], #4
 800253c:	4798      	blx	r3
 800253e:	3601      	adds	r6, #1
 8002540:	e7ee      	b.n	8002520 <__libc_init_array+0xc>
 8002542:	f855 3b04 	ldr.w	r3, [r5], #4
 8002546:	4798      	blx	r3
 8002548:	3601      	adds	r6, #1
 800254a:	e7f2      	b.n	8002532 <__libc_init_array+0x1e>
 800254c:	08002e80 	.word	0x08002e80
 8002550:	08002e80 	.word	0x08002e80
 8002554:	08002e80 	.word	0x08002e80
 8002558:	08002e84 	.word	0x08002e84

0800255c <__retarget_lock_acquire_recursive>:
 800255c:	4770      	bx	lr

0800255e <__retarget_lock_release_recursive>:
 800255e:	4770      	bx	lr

08002560 <_free_r>:
 8002560:	b538      	push	{r3, r4, r5, lr}
 8002562:	4605      	mov	r5, r0
 8002564:	2900      	cmp	r1, #0
 8002566:	d041      	beq.n	80025ec <_free_r+0x8c>
 8002568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800256c:	1f0c      	subs	r4, r1, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	bfb8      	it	lt
 8002572:	18e4      	addlt	r4, r4, r3
 8002574:	f000 f8e0 	bl	8002738 <__malloc_lock>
 8002578:	4a1d      	ldr	r2, [pc, #116]	@ (80025f0 <_free_r+0x90>)
 800257a:	6813      	ldr	r3, [r2, #0]
 800257c:	b933      	cbnz	r3, 800258c <_free_r+0x2c>
 800257e:	6063      	str	r3, [r4, #4]
 8002580:	6014      	str	r4, [r2, #0]
 8002582:	4628      	mov	r0, r5
 8002584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002588:	f000 b8dc 	b.w	8002744 <__malloc_unlock>
 800258c:	42a3      	cmp	r3, r4
 800258e:	d908      	bls.n	80025a2 <_free_r+0x42>
 8002590:	6820      	ldr	r0, [r4, #0]
 8002592:	1821      	adds	r1, r4, r0
 8002594:	428b      	cmp	r3, r1
 8002596:	bf01      	itttt	eq
 8002598:	6819      	ldreq	r1, [r3, #0]
 800259a:	685b      	ldreq	r3, [r3, #4]
 800259c:	1809      	addeq	r1, r1, r0
 800259e:	6021      	streq	r1, [r4, #0]
 80025a0:	e7ed      	b.n	800257e <_free_r+0x1e>
 80025a2:	461a      	mov	r2, r3
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	b10b      	cbz	r3, 80025ac <_free_r+0x4c>
 80025a8:	42a3      	cmp	r3, r4
 80025aa:	d9fa      	bls.n	80025a2 <_free_r+0x42>
 80025ac:	6811      	ldr	r1, [r2, #0]
 80025ae:	1850      	adds	r0, r2, r1
 80025b0:	42a0      	cmp	r0, r4
 80025b2:	d10b      	bne.n	80025cc <_free_r+0x6c>
 80025b4:	6820      	ldr	r0, [r4, #0]
 80025b6:	4401      	add	r1, r0
 80025b8:	1850      	adds	r0, r2, r1
 80025ba:	4283      	cmp	r3, r0
 80025bc:	6011      	str	r1, [r2, #0]
 80025be:	d1e0      	bne.n	8002582 <_free_r+0x22>
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	6053      	str	r3, [r2, #4]
 80025c6:	4408      	add	r0, r1
 80025c8:	6010      	str	r0, [r2, #0]
 80025ca:	e7da      	b.n	8002582 <_free_r+0x22>
 80025cc:	d902      	bls.n	80025d4 <_free_r+0x74>
 80025ce:	230c      	movs	r3, #12
 80025d0:	602b      	str	r3, [r5, #0]
 80025d2:	e7d6      	b.n	8002582 <_free_r+0x22>
 80025d4:	6820      	ldr	r0, [r4, #0]
 80025d6:	1821      	adds	r1, r4, r0
 80025d8:	428b      	cmp	r3, r1
 80025da:	bf04      	itt	eq
 80025dc:	6819      	ldreq	r1, [r3, #0]
 80025de:	685b      	ldreq	r3, [r3, #4]
 80025e0:	6063      	str	r3, [r4, #4]
 80025e2:	bf04      	itt	eq
 80025e4:	1809      	addeq	r1, r1, r0
 80025e6:	6021      	streq	r1, [r4, #0]
 80025e8:	6054      	str	r4, [r2, #4]
 80025ea:	e7ca      	b.n	8002582 <_free_r+0x22>
 80025ec:	bd38      	pop	{r3, r4, r5, pc}
 80025ee:	bf00      	nop
 80025f0:	20000270 	.word	0x20000270

080025f4 <sbrk_aligned>:
 80025f4:	b570      	push	{r4, r5, r6, lr}
 80025f6:	4e0f      	ldr	r6, [pc, #60]	@ (8002634 <sbrk_aligned+0x40>)
 80025f8:	460c      	mov	r4, r1
 80025fa:	6831      	ldr	r1, [r6, #0]
 80025fc:	4605      	mov	r5, r0
 80025fe:	b911      	cbnz	r1, 8002606 <sbrk_aligned+0x12>
 8002600:	f000 fba6 	bl	8002d50 <_sbrk_r>
 8002604:	6030      	str	r0, [r6, #0]
 8002606:	4621      	mov	r1, r4
 8002608:	4628      	mov	r0, r5
 800260a:	f000 fba1 	bl	8002d50 <_sbrk_r>
 800260e:	1c43      	adds	r3, r0, #1
 8002610:	d103      	bne.n	800261a <sbrk_aligned+0x26>
 8002612:	f04f 34ff 	mov.w	r4, #4294967295
 8002616:	4620      	mov	r0, r4
 8002618:	bd70      	pop	{r4, r5, r6, pc}
 800261a:	1cc4      	adds	r4, r0, #3
 800261c:	f024 0403 	bic.w	r4, r4, #3
 8002620:	42a0      	cmp	r0, r4
 8002622:	d0f8      	beq.n	8002616 <sbrk_aligned+0x22>
 8002624:	1a21      	subs	r1, r4, r0
 8002626:	4628      	mov	r0, r5
 8002628:	f000 fb92 	bl	8002d50 <_sbrk_r>
 800262c:	3001      	adds	r0, #1
 800262e:	d1f2      	bne.n	8002616 <sbrk_aligned+0x22>
 8002630:	e7ef      	b.n	8002612 <sbrk_aligned+0x1e>
 8002632:	bf00      	nop
 8002634:	2000026c 	.word	0x2000026c

08002638 <_malloc_r>:
 8002638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800263c:	1ccd      	adds	r5, r1, #3
 800263e:	f025 0503 	bic.w	r5, r5, #3
 8002642:	3508      	adds	r5, #8
 8002644:	2d0c      	cmp	r5, #12
 8002646:	bf38      	it	cc
 8002648:	250c      	movcc	r5, #12
 800264a:	2d00      	cmp	r5, #0
 800264c:	4606      	mov	r6, r0
 800264e:	db01      	blt.n	8002654 <_malloc_r+0x1c>
 8002650:	42a9      	cmp	r1, r5
 8002652:	d904      	bls.n	800265e <_malloc_r+0x26>
 8002654:	230c      	movs	r3, #12
 8002656:	6033      	str	r3, [r6, #0]
 8002658:	2000      	movs	r0, #0
 800265a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800265e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002734 <_malloc_r+0xfc>
 8002662:	f000 f869 	bl	8002738 <__malloc_lock>
 8002666:	f8d8 3000 	ldr.w	r3, [r8]
 800266a:	461c      	mov	r4, r3
 800266c:	bb44      	cbnz	r4, 80026c0 <_malloc_r+0x88>
 800266e:	4629      	mov	r1, r5
 8002670:	4630      	mov	r0, r6
 8002672:	f7ff ffbf 	bl	80025f4 <sbrk_aligned>
 8002676:	1c43      	adds	r3, r0, #1
 8002678:	4604      	mov	r4, r0
 800267a:	d158      	bne.n	800272e <_malloc_r+0xf6>
 800267c:	f8d8 4000 	ldr.w	r4, [r8]
 8002680:	4627      	mov	r7, r4
 8002682:	2f00      	cmp	r7, #0
 8002684:	d143      	bne.n	800270e <_malloc_r+0xd6>
 8002686:	2c00      	cmp	r4, #0
 8002688:	d04b      	beq.n	8002722 <_malloc_r+0xea>
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	4639      	mov	r1, r7
 800268e:	4630      	mov	r0, r6
 8002690:	eb04 0903 	add.w	r9, r4, r3
 8002694:	f000 fb5c 	bl	8002d50 <_sbrk_r>
 8002698:	4581      	cmp	r9, r0
 800269a:	d142      	bne.n	8002722 <_malloc_r+0xea>
 800269c:	6821      	ldr	r1, [r4, #0]
 800269e:	1a6d      	subs	r5, r5, r1
 80026a0:	4629      	mov	r1, r5
 80026a2:	4630      	mov	r0, r6
 80026a4:	f7ff ffa6 	bl	80025f4 <sbrk_aligned>
 80026a8:	3001      	adds	r0, #1
 80026aa:	d03a      	beq.n	8002722 <_malloc_r+0xea>
 80026ac:	6823      	ldr	r3, [r4, #0]
 80026ae:	442b      	add	r3, r5
 80026b0:	6023      	str	r3, [r4, #0]
 80026b2:	f8d8 3000 	ldr.w	r3, [r8]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	bb62      	cbnz	r2, 8002714 <_malloc_r+0xdc>
 80026ba:	f8c8 7000 	str.w	r7, [r8]
 80026be:	e00f      	b.n	80026e0 <_malloc_r+0xa8>
 80026c0:	6822      	ldr	r2, [r4, #0]
 80026c2:	1b52      	subs	r2, r2, r5
 80026c4:	d420      	bmi.n	8002708 <_malloc_r+0xd0>
 80026c6:	2a0b      	cmp	r2, #11
 80026c8:	d917      	bls.n	80026fa <_malloc_r+0xc2>
 80026ca:	1961      	adds	r1, r4, r5
 80026cc:	42a3      	cmp	r3, r4
 80026ce:	6025      	str	r5, [r4, #0]
 80026d0:	bf18      	it	ne
 80026d2:	6059      	strne	r1, [r3, #4]
 80026d4:	6863      	ldr	r3, [r4, #4]
 80026d6:	bf08      	it	eq
 80026d8:	f8c8 1000 	streq.w	r1, [r8]
 80026dc:	5162      	str	r2, [r4, r5]
 80026de:	604b      	str	r3, [r1, #4]
 80026e0:	4630      	mov	r0, r6
 80026e2:	f000 f82f 	bl	8002744 <__malloc_unlock>
 80026e6:	f104 000b 	add.w	r0, r4, #11
 80026ea:	1d23      	adds	r3, r4, #4
 80026ec:	f020 0007 	bic.w	r0, r0, #7
 80026f0:	1ac2      	subs	r2, r0, r3
 80026f2:	bf1c      	itt	ne
 80026f4:	1a1b      	subne	r3, r3, r0
 80026f6:	50a3      	strne	r3, [r4, r2]
 80026f8:	e7af      	b.n	800265a <_malloc_r+0x22>
 80026fa:	6862      	ldr	r2, [r4, #4]
 80026fc:	42a3      	cmp	r3, r4
 80026fe:	bf0c      	ite	eq
 8002700:	f8c8 2000 	streq.w	r2, [r8]
 8002704:	605a      	strne	r2, [r3, #4]
 8002706:	e7eb      	b.n	80026e0 <_malloc_r+0xa8>
 8002708:	4623      	mov	r3, r4
 800270a:	6864      	ldr	r4, [r4, #4]
 800270c:	e7ae      	b.n	800266c <_malloc_r+0x34>
 800270e:	463c      	mov	r4, r7
 8002710:	687f      	ldr	r7, [r7, #4]
 8002712:	e7b6      	b.n	8002682 <_malloc_r+0x4a>
 8002714:	461a      	mov	r2, r3
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	42a3      	cmp	r3, r4
 800271a:	d1fb      	bne.n	8002714 <_malloc_r+0xdc>
 800271c:	2300      	movs	r3, #0
 800271e:	6053      	str	r3, [r2, #4]
 8002720:	e7de      	b.n	80026e0 <_malloc_r+0xa8>
 8002722:	230c      	movs	r3, #12
 8002724:	6033      	str	r3, [r6, #0]
 8002726:	4630      	mov	r0, r6
 8002728:	f000 f80c 	bl	8002744 <__malloc_unlock>
 800272c:	e794      	b.n	8002658 <_malloc_r+0x20>
 800272e:	6005      	str	r5, [r0, #0]
 8002730:	e7d6      	b.n	80026e0 <_malloc_r+0xa8>
 8002732:	bf00      	nop
 8002734:	20000270 	.word	0x20000270

08002738 <__malloc_lock>:
 8002738:	4801      	ldr	r0, [pc, #4]	@ (8002740 <__malloc_lock+0x8>)
 800273a:	f7ff bf0f 	b.w	800255c <__retarget_lock_acquire_recursive>
 800273e:	bf00      	nop
 8002740:	20000268 	.word	0x20000268

08002744 <__malloc_unlock>:
 8002744:	4801      	ldr	r0, [pc, #4]	@ (800274c <__malloc_unlock+0x8>)
 8002746:	f7ff bf0a 	b.w	800255e <__retarget_lock_release_recursive>
 800274a:	bf00      	nop
 800274c:	20000268 	.word	0x20000268

08002750 <__ssputs_r>:
 8002750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002754:	688e      	ldr	r6, [r1, #8]
 8002756:	461f      	mov	r7, r3
 8002758:	42be      	cmp	r6, r7
 800275a:	680b      	ldr	r3, [r1, #0]
 800275c:	4682      	mov	sl, r0
 800275e:	460c      	mov	r4, r1
 8002760:	4690      	mov	r8, r2
 8002762:	d82d      	bhi.n	80027c0 <__ssputs_r+0x70>
 8002764:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002768:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800276c:	d026      	beq.n	80027bc <__ssputs_r+0x6c>
 800276e:	6965      	ldr	r5, [r4, #20]
 8002770:	6909      	ldr	r1, [r1, #16]
 8002772:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002776:	eba3 0901 	sub.w	r9, r3, r1
 800277a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800277e:	1c7b      	adds	r3, r7, #1
 8002780:	444b      	add	r3, r9
 8002782:	106d      	asrs	r5, r5, #1
 8002784:	429d      	cmp	r5, r3
 8002786:	bf38      	it	cc
 8002788:	461d      	movcc	r5, r3
 800278a:	0553      	lsls	r3, r2, #21
 800278c:	d527      	bpl.n	80027de <__ssputs_r+0x8e>
 800278e:	4629      	mov	r1, r5
 8002790:	f7ff ff52 	bl	8002638 <_malloc_r>
 8002794:	4606      	mov	r6, r0
 8002796:	b360      	cbz	r0, 80027f2 <__ssputs_r+0xa2>
 8002798:	6921      	ldr	r1, [r4, #16]
 800279a:	464a      	mov	r2, r9
 800279c:	f000 fae8 	bl	8002d70 <memcpy>
 80027a0:	89a3      	ldrh	r3, [r4, #12]
 80027a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80027a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027aa:	81a3      	strh	r3, [r4, #12]
 80027ac:	6126      	str	r6, [r4, #16]
 80027ae:	6165      	str	r5, [r4, #20]
 80027b0:	444e      	add	r6, r9
 80027b2:	eba5 0509 	sub.w	r5, r5, r9
 80027b6:	6026      	str	r6, [r4, #0]
 80027b8:	60a5      	str	r5, [r4, #8]
 80027ba:	463e      	mov	r6, r7
 80027bc:	42be      	cmp	r6, r7
 80027be:	d900      	bls.n	80027c2 <__ssputs_r+0x72>
 80027c0:	463e      	mov	r6, r7
 80027c2:	6820      	ldr	r0, [r4, #0]
 80027c4:	4632      	mov	r2, r6
 80027c6:	4641      	mov	r1, r8
 80027c8:	f000 faa8 	bl	8002d1c <memmove>
 80027cc:	68a3      	ldr	r3, [r4, #8]
 80027ce:	1b9b      	subs	r3, r3, r6
 80027d0:	60a3      	str	r3, [r4, #8]
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	4433      	add	r3, r6
 80027d6:	6023      	str	r3, [r4, #0]
 80027d8:	2000      	movs	r0, #0
 80027da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027de:	462a      	mov	r2, r5
 80027e0:	f000 fad4 	bl	8002d8c <_realloc_r>
 80027e4:	4606      	mov	r6, r0
 80027e6:	2800      	cmp	r0, #0
 80027e8:	d1e0      	bne.n	80027ac <__ssputs_r+0x5c>
 80027ea:	6921      	ldr	r1, [r4, #16]
 80027ec:	4650      	mov	r0, sl
 80027ee:	f7ff feb7 	bl	8002560 <_free_r>
 80027f2:	230c      	movs	r3, #12
 80027f4:	f8ca 3000 	str.w	r3, [sl]
 80027f8:	89a3      	ldrh	r3, [r4, #12]
 80027fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027fe:	81a3      	strh	r3, [r4, #12]
 8002800:	f04f 30ff 	mov.w	r0, #4294967295
 8002804:	e7e9      	b.n	80027da <__ssputs_r+0x8a>
	...

08002808 <_svfiprintf_r>:
 8002808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800280c:	4698      	mov	r8, r3
 800280e:	898b      	ldrh	r3, [r1, #12]
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	b09d      	sub	sp, #116	@ 0x74
 8002814:	4607      	mov	r7, r0
 8002816:	460d      	mov	r5, r1
 8002818:	4614      	mov	r4, r2
 800281a:	d510      	bpl.n	800283e <_svfiprintf_r+0x36>
 800281c:	690b      	ldr	r3, [r1, #16]
 800281e:	b973      	cbnz	r3, 800283e <_svfiprintf_r+0x36>
 8002820:	2140      	movs	r1, #64	@ 0x40
 8002822:	f7ff ff09 	bl	8002638 <_malloc_r>
 8002826:	6028      	str	r0, [r5, #0]
 8002828:	6128      	str	r0, [r5, #16]
 800282a:	b930      	cbnz	r0, 800283a <_svfiprintf_r+0x32>
 800282c:	230c      	movs	r3, #12
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	f04f 30ff 	mov.w	r0, #4294967295
 8002834:	b01d      	add	sp, #116	@ 0x74
 8002836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800283a:	2340      	movs	r3, #64	@ 0x40
 800283c:	616b      	str	r3, [r5, #20]
 800283e:	2300      	movs	r3, #0
 8002840:	9309      	str	r3, [sp, #36]	@ 0x24
 8002842:	2320      	movs	r3, #32
 8002844:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002848:	f8cd 800c 	str.w	r8, [sp, #12]
 800284c:	2330      	movs	r3, #48	@ 0x30
 800284e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80029ec <_svfiprintf_r+0x1e4>
 8002852:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002856:	f04f 0901 	mov.w	r9, #1
 800285a:	4623      	mov	r3, r4
 800285c:	469a      	mov	sl, r3
 800285e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002862:	b10a      	cbz	r2, 8002868 <_svfiprintf_r+0x60>
 8002864:	2a25      	cmp	r2, #37	@ 0x25
 8002866:	d1f9      	bne.n	800285c <_svfiprintf_r+0x54>
 8002868:	ebba 0b04 	subs.w	fp, sl, r4
 800286c:	d00b      	beq.n	8002886 <_svfiprintf_r+0x7e>
 800286e:	465b      	mov	r3, fp
 8002870:	4622      	mov	r2, r4
 8002872:	4629      	mov	r1, r5
 8002874:	4638      	mov	r0, r7
 8002876:	f7ff ff6b 	bl	8002750 <__ssputs_r>
 800287a:	3001      	adds	r0, #1
 800287c:	f000 80a7 	beq.w	80029ce <_svfiprintf_r+0x1c6>
 8002880:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002882:	445a      	add	r2, fp
 8002884:	9209      	str	r2, [sp, #36]	@ 0x24
 8002886:	f89a 3000 	ldrb.w	r3, [sl]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 809f 	beq.w	80029ce <_svfiprintf_r+0x1c6>
 8002890:	2300      	movs	r3, #0
 8002892:	f04f 32ff 	mov.w	r2, #4294967295
 8002896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800289a:	f10a 0a01 	add.w	sl, sl, #1
 800289e:	9304      	str	r3, [sp, #16]
 80028a0:	9307      	str	r3, [sp, #28]
 80028a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80028a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80028a8:	4654      	mov	r4, sl
 80028aa:	2205      	movs	r2, #5
 80028ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028b0:	484e      	ldr	r0, [pc, #312]	@ (80029ec <_svfiprintf_r+0x1e4>)
 80028b2:	f7fd fcb5 	bl	8000220 <memchr>
 80028b6:	9a04      	ldr	r2, [sp, #16]
 80028b8:	b9d8      	cbnz	r0, 80028f2 <_svfiprintf_r+0xea>
 80028ba:	06d0      	lsls	r0, r2, #27
 80028bc:	bf44      	itt	mi
 80028be:	2320      	movmi	r3, #32
 80028c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80028c4:	0711      	lsls	r1, r2, #28
 80028c6:	bf44      	itt	mi
 80028c8:	232b      	movmi	r3, #43	@ 0x2b
 80028ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80028ce:	f89a 3000 	ldrb.w	r3, [sl]
 80028d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80028d4:	d015      	beq.n	8002902 <_svfiprintf_r+0xfa>
 80028d6:	9a07      	ldr	r2, [sp, #28]
 80028d8:	4654      	mov	r4, sl
 80028da:	2000      	movs	r0, #0
 80028dc:	f04f 0c0a 	mov.w	ip, #10
 80028e0:	4621      	mov	r1, r4
 80028e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028e6:	3b30      	subs	r3, #48	@ 0x30
 80028e8:	2b09      	cmp	r3, #9
 80028ea:	d94b      	bls.n	8002984 <_svfiprintf_r+0x17c>
 80028ec:	b1b0      	cbz	r0, 800291c <_svfiprintf_r+0x114>
 80028ee:	9207      	str	r2, [sp, #28]
 80028f0:	e014      	b.n	800291c <_svfiprintf_r+0x114>
 80028f2:	eba0 0308 	sub.w	r3, r0, r8
 80028f6:	fa09 f303 	lsl.w	r3, r9, r3
 80028fa:	4313      	orrs	r3, r2
 80028fc:	9304      	str	r3, [sp, #16]
 80028fe:	46a2      	mov	sl, r4
 8002900:	e7d2      	b.n	80028a8 <_svfiprintf_r+0xa0>
 8002902:	9b03      	ldr	r3, [sp, #12]
 8002904:	1d19      	adds	r1, r3, #4
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	9103      	str	r1, [sp, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	bfbb      	ittet	lt
 800290e:	425b      	neglt	r3, r3
 8002910:	f042 0202 	orrlt.w	r2, r2, #2
 8002914:	9307      	strge	r3, [sp, #28]
 8002916:	9307      	strlt	r3, [sp, #28]
 8002918:	bfb8      	it	lt
 800291a:	9204      	strlt	r2, [sp, #16]
 800291c:	7823      	ldrb	r3, [r4, #0]
 800291e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002920:	d10a      	bne.n	8002938 <_svfiprintf_r+0x130>
 8002922:	7863      	ldrb	r3, [r4, #1]
 8002924:	2b2a      	cmp	r3, #42	@ 0x2a
 8002926:	d132      	bne.n	800298e <_svfiprintf_r+0x186>
 8002928:	9b03      	ldr	r3, [sp, #12]
 800292a:	1d1a      	adds	r2, r3, #4
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	9203      	str	r2, [sp, #12]
 8002930:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002934:	3402      	adds	r4, #2
 8002936:	9305      	str	r3, [sp, #20]
 8002938:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80029fc <_svfiprintf_r+0x1f4>
 800293c:	7821      	ldrb	r1, [r4, #0]
 800293e:	2203      	movs	r2, #3
 8002940:	4650      	mov	r0, sl
 8002942:	f7fd fc6d 	bl	8000220 <memchr>
 8002946:	b138      	cbz	r0, 8002958 <_svfiprintf_r+0x150>
 8002948:	9b04      	ldr	r3, [sp, #16]
 800294a:	eba0 000a 	sub.w	r0, r0, sl
 800294e:	2240      	movs	r2, #64	@ 0x40
 8002950:	4082      	lsls	r2, r0
 8002952:	4313      	orrs	r3, r2
 8002954:	3401      	adds	r4, #1
 8002956:	9304      	str	r3, [sp, #16]
 8002958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800295c:	4824      	ldr	r0, [pc, #144]	@ (80029f0 <_svfiprintf_r+0x1e8>)
 800295e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002962:	2206      	movs	r2, #6
 8002964:	f7fd fc5c 	bl	8000220 <memchr>
 8002968:	2800      	cmp	r0, #0
 800296a:	d036      	beq.n	80029da <_svfiprintf_r+0x1d2>
 800296c:	4b21      	ldr	r3, [pc, #132]	@ (80029f4 <_svfiprintf_r+0x1ec>)
 800296e:	bb1b      	cbnz	r3, 80029b8 <_svfiprintf_r+0x1b0>
 8002970:	9b03      	ldr	r3, [sp, #12]
 8002972:	3307      	adds	r3, #7
 8002974:	f023 0307 	bic.w	r3, r3, #7
 8002978:	3308      	adds	r3, #8
 800297a:	9303      	str	r3, [sp, #12]
 800297c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800297e:	4433      	add	r3, r6
 8002980:	9309      	str	r3, [sp, #36]	@ 0x24
 8002982:	e76a      	b.n	800285a <_svfiprintf_r+0x52>
 8002984:	fb0c 3202 	mla	r2, ip, r2, r3
 8002988:	460c      	mov	r4, r1
 800298a:	2001      	movs	r0, #1
 800298c:	e7a8      	b.n	80028e0 <_svfiprintf_r+0xd8>
 800298e:	2300      	movs	r3, #0
 8002990:	3401      	adds	r4, #1
 8002992:	9305      	str	r3, [sp, #20]
 8002994:	4619      	mov	r1, r3
 8002996:	f04f 0c0a 	mov.w	ip, #10
 800299a:	4620      	mov	r0, r4
 800299c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029a0:	3a30      	subs	r2, #48	@ 0x30
 80029a2:	2a09      	cmp	r2, #9
 80029a4:	d903      	bls.n	80029ae <_svfiprintf_r+0x1a6>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0c6      	beq.n	8002938 <_svfiprintf_r+0x130>
 80029aa:	9105      	str	r1, [sp, #20]
 80029ac:	e7c4      	b.n	8002938 <_svfiprintf_r+0x130>
 80029ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80029b2:	4604      	mov	r4, r0
 80029b4:	2301      	movs	r3, #1
 80029b6:	e7f0      	b.n	800299a <_svfiprintf_r+0x192>
 80029b8:	ab03      	add	r3, sp, #12
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	462a      	mov	r2, r5
 80029be:	4b0e      	ldr	r3, [pc, #56]	@ (80029f8 <_svfiprintf_r+0x1f0>)
 80029c0:	a904      	add	r1, sp, #16
 80029c2:	4638      	mov	r0, r7
 80029c4:	f3af 8000 	nop.w
 80029c8:	1c42      	adds	r2, r0, #1
 80029ca:	4606      	mov	r6, r0
 80029cc:	d1d6      	bne.n	800297c <_svfiprintf_r+0x174>
 80029ce:	89ab      	ldrh	r3, [r5, #12]
 80029d0:	065b      	lsls	r3, r3, #25
 80029d2:	f53f af2d 	bmi.w	8002830 <_svfiprintf_r+0x28>
 80029d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80029d8:	e72c      	b.n	8002834 <_svfiprintf_r+0x2c>
 80029da:	ab03      	add	r3, sp, #12
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	462a      	mov	r2, r5
 80029e0:	4b05      	ldr	r3, [pc, #20]	@ (80029f8 <_svfiprintf_r+0x1f0>)
 80029e2:	a904      	add	r1, sp, #16
 80029e4:	4638      	mov	r0, r7
 80029e6:	f000 f879 	bl	8002adc <_printf_i>
 80029ea:	e7ed      	b.n	80029c8 <_svfiprintf_r+0x1c0>
 80029ec:	08002e44 	.word	0x08002e44
 80029f0:	08002e4e 	.word	0x08002e4e
 80029f4:	00000000 	.word	0x00000000
 80029f8:	08002751 	.word	0x08002751
 80029fc:	08002e4a 	.word	0x08002e4a

08002a00 <_printf_common>:
 8002a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a04:	4616      	mov	r6, r2
 8002a06:	4698      	mov	r8, r3
 8002a08:	688a      	ldr	r2, [r1, #8]
 8002a0a:	690b      	ldr	r3, [r1, #16]
 8002a0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002a10:	4293      	cmp	r3, r2
 8002a12:	bfb8      	it	lt
 8002a14:	4613      	movlt	r3, r2
 8002a16:	6033      	str	r3, [r6, #0]
 8002a18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002a1c:	4607      	mov	r7, r0
 8002a1e:	460c      	mov	r4, r1
 8002a20:	b10a      	cbz	r2, 8002a26 <_printf_common+0x26>
 8002a22:	3301      	adds	r3, #1
 8002a24:	6033      	str	r3, [r6, #0]
 8002a26:	6823      	ldr	r3, [r4, #0]
 8002a28:	0699      	lsls	r1, r3, #26
 8002a2a:	bf42      	ittt	mi
 8002a2c:	6833      	ldrmi	r3, [r6, #0]
 8002a2e:	3302      	addmi	r3, #2
 8002a30:	6033      	strmi	r3, [r6, #0]
 8002a32:	6825      	ldr	r5, [r4, #0]
 8002a34:	f015 0506 	ands.w	r5, r5, #6
 8002a38:	d106      	bne.n	8002a48 <_printf_common+0x48>
 8002a3a:	f104 0a19 	add.w	sl, r4, #25
 8002a3e:	68e3      	ldr	r3, [r4, #12]
 8002a40:	6832      	ldr	r2, [r6, #0]
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	42ab      	cmp	r3, r5
 8002a46:	dc26      	bgt.n	8002a96 <_printf_common+0x96>
 8002a48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002a4c:	6822      	ldr	r2, [r4, #0]
 8002a4e:	3b00      	subs	r3, #0
 8002a50:	bf18      	it	ne
 8002a52:	2301      	movne	r3, #1
 8002a54:	0692      	lsls	r2, r2, #26
 8002a56:	d42b      	bmi.n	8002ab0 <_printf_common+0xb0>
 8002a58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002a5c:	4641      	mov	r1, r8
 8002a5e:	4638      	mov	r0, r7
 8002a60:	47c8      	blx	r9
 8002a62:	3001      	adds	r0, #1
 8002a64:	d01e      	beq.n	8002aa4 <_printf_common+0xa4>
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	6922      	ldr	r2, [r4, #16]
 8002a6a:	f003 0306 	and.w	r3, r3, #6
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	bf02      	ittt	eq
 8002a72:	68e5      	ldreq	r5, [r4, #12]
 8002a74:	6833      	ldreq	r3, [r6, #0]
 8002a76:	1aed      	subeq	r5, r5, r3
 8002a78:	68a3      	ldr	r3, [r4, #8]
 8002a7a:	bf0c      	ite	eq
 8002a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a80:	2500      	movne	r5, #0
 8002a82:	4293      	cmp	r3, r2
 8002a84:	bfc4      	itt	gt
 8002a86:	1a9b      	subgt	r3, r3, r2
 8002a88:	18ed      	addgt	r5, r5, r3
 8002a8a:	2600      	movs	r6, #0
 8002a8c:	341a      	adds	r4, #26
 8002a8e:	42b5      	cmp	r5, r6
 8002a90:	d11a      	bne.n	8002ac8 <_printf_common+0xc8>
 8002a92:	2000      	movs	r0, #0
 8002a94:	e008      	b.n	8002aa8 <_printf_common+0xa8>
 8002a96:	2301      	movs	r3, #1
 8002a98:	4652      	mov	r2, sl
 8002a9a:	4641      	mov	r1, r8
 8002a9c:	4638      	mov	r0, r7
 8002a9e:	47c8      	blx	r9
 8002aa0:	3001      	adds	r0, #1
 8002aa2:	d103      	bne.n	8002aac <_printf_common+0xac>
 8002aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aac:	3501      	adds	r5, #1
 8002aae:	e7c6      	b.n	8002a3e <_printf_common+0x3e>
 8002ab0:	18e1      	adds	r1, r4, r3
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	2030      	movs	r0, #48	@ 0x30
 8002ab6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002aba:	4422      	add	r2, r4
 8002abc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002ac0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002ac4:	3302      	adds	r3, #2
 8002ac6:	e7c7      	b.n	8002a58 <_printf_common+0x58>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	4622      	mov	r2, r4
 8002acc:	4641      	mov	r1, r8
 8002ace:	4638      	mov	r0, r7
 8002ad0:	47c8      	blx	r9
 8002ad2:	3001      	adds	r0, #1
 8002ad4:	d0e6      	beq.n	8002aa4 <_printf_common+0xa4>
 8002ad6:	3601      	adds	r6, #1
 8002ad8:	e7d9      	b.n	8002a8e <_printf_common+0x8e>
	...

08002adc <_printf_i>:
 8002adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ae0:	7e0f      	ldrb	r7, [r1, #24]
 8002ae2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002ae4:	2f78      	cmp	r7, #120	@ 0x78
 8002ae6:	4691      	mov	r9, r2
 8002ae8:	4680      	mov	r8, r0
 8002aea:	460c      	mov	r4, r1
 8002aec:	469a      	mov	sl, r3
 8002aee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002af2:	d807      	bhi.n	8002b04 <_printf_i+0x28>
 8002af4:	2f62      	cmp	r7, #98	@ 0x62
 8002af6:	d80a      	bhi.n	8002b0e <_printf_i+0x32>
 8002af8:	2f00      	cmp	r7, #0
 8002afa:	f000 80d2 	beq.w	8002ca2 <_printf_i+0x1c6>
 8002afe:	2f58      	cmp	r7, #88	@ 0x58
 8002b00:	f000 80b9 	beq.w	8002c76 <_printf_i+0x19a>
 8002b04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002b0c:	e03a      	b.n	8002b84 <_printf_i+0xa8>
 8002b0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002b12:	2b15      	cmp	r3, #21
 8002b14:	d8f6      	bhi.n	8002b04 <_printf_i+0x28>
 8002b16:	a101      	add	r1, pc, #4	@ (adr r1, 8002b1c <_printf_i+0x40>)
 8002b18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b1c:	08002b75 	.word	0x08002b75
 8002b20:	08002b89 	.word	0x08002b89
 8002b24:	08002b05 	.word	0x08002b05
 8002b28:	08002b05 	.word	0x08002b05
 8002b2c:	08002b05 	.word	0x08002b05
 8002b30:	08002b05 	.word	0x08002b05
 8002b34:	08002b89 	.word	0x08002b89
 8002b38:	08002b05 	.word	0x08002b05
 8002b3c:	08002b05 	.word	0x08002b05
 8002b40:	08002b05 	.word	0x08002b05
 8002b44:	08002b05 	.word	0x08002b05
 8002b48:	08002c89 	.word	0x08002c89
 8002b4c:	08002bb3 	.word	0x08002bb3
 8002b50:	08002c43 	.word	0x08002c43
 8002b54:	08002b05 	.word	0x08002b05
 8002b58:	08002b05 	.word	0x08002b05
 8002b5c:	08002cab 	.word	0x08002cab
 8002b60:	08002b05 	.word	0x08002b05
 8002b64:	08002bb3 	.word	0x08002bb3
 8002b68:	08002b05 	.word	0x08002b05
 8002b6c:	08002b05 	.word	0x08002b05
 8002b70:	08002c4b 	.word	0x08002c4b
 8002b74:	6833      	ldr	r3, [r6, #0]
 8002b76:	1d1a      	adds	r2, r3, #4
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6032      	str	r2, [r6, #0]
 8002b7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b84:	2301      	movs	r3, #1
 8002b86:	e09d      	b.n	8002cc4 <_printf_i+0x1e8>
 8002b88:	6833      	ldr	r3, [r6, #0]
 8002b8a:	6820      	ldr	r0, [r4, #0]
 8002b8c:	1d19      	adds	r1, r3, #4
 8002b8e:	6031      	str	r1, [r6, #0]
 8002b90:	0606      	lsls	r6, r0, #24
 8002b92:	d501      	bpl.n	8002b98 <_printf_i+0xbc>
 8002b94:	681d      	ldr	r5, [r3, #0]
 8002b96:	e003      	b.n	8002ba0 <_printf_i+0xc4>
 8002b98:	0645      	lsls	r5, r0, #25
 8002b9a:	d5fb      	bpl.n	8002b94 <_printf_i+0xb8>
 8002b9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002ba0:	2d00      	cmp	r5, #0
 8002ba2:	da03      	bge.n	8002bac <_printf_i+0xd0>
 8002ba4:	232d      	movs	r3, #45	@ 0x2d
 8002ba6:	426d      	negs	r5, r5
 8002ba8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002bac:	4859      	ldr	r0, [pc, #356]	@ (8002d14 <_printf_i+0x238>)
 8002bae:	230a      	movs	r3, #10
 8002bb0:	e011      	b.n	8002bd6 <_printf_i+0xfa>
 8002bb2:	6821      	ldr	r1, [r4, #0]
 8002bb4:	6833      	ldr	r3, [r6, #0]
 8002bb6:	0608      	lsls	r0, r1, #24
 8002bb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8002bbc:	d402      	bmi.n	8002bc4 <_printf_i+0xe8>
 8002bbe:	0649      	lsls	r1, r1, #25
 8002bc0:	bf48      	it	mi
 8002bc2:	b2ad      	uxthmi	r5, r5
 8002bc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8002bc6:	4853      	ldr	r0, [pc, #332]	@ (8002d14 <_printf_i+0x238>)
 8002bc8:	6033      	str	r3, [r6, #0]
 8002bca:	bf14      	ite	ne
 8002bcc:	230a      	movne	r3, #10
 8002bce:	2308      	moveq	r3, #8
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002bd6:	6866      	ldr	r6, [r4, #4]
 8002bd8:	60a6      	str	r6, [r4, #8]
 8002bda:	2e00      	cmp	r6, #0
 8002bdc:	bfa2      	ittt	ge
 8002bde:	6821      	ldrge	r1, [r4, #0]
 8002be0:	f021 0104 	bicge.w	r1, r1, #4
 8002be4:	6021      	strge	r1, [r4, #0]
 8002be6:	b90d      	cbnz	r5, 8002bec <_printf_i+0x110>
 8002be8:	2e00      	cmp	r6, #0
 8002bea:	d04b      	beq.n	8002c84 <_printf_i+0x1a8>
 8002bec:	4616      	mov	r6, r2
 8002bee:	fbb5 f1f3 	udiv	r1, r5, r3
 8002bf2:	fb03 5711 	mls	r7, r3, r1, r5
 8002bf6:	5dc7      	ldrb	r7, [r0, r7]
 8002bf8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002bfc:	462f      	mov	r7, r5
 8002bfe:	42bb      	cmp	r3, r7
 8002c00:	460d      	mov	r5, r1
 8002c02:	d9f4      	bls.n	8002bee <_printf_i+0x112>
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d10b      	bne.n	8002c20 <_printf_i+0x144>
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	07df      	lsls	r7, r3, #31
 8002c0c:	d508      	bpl.n	8002c20 <_printf_i+0x144>
 8002c0e:	6923      	ldr	r3, [r4, #16]
 8002c10:	6861      	ldr	r1, [r4, #4]
 8002c12:	4299      	cmp	r1, r3
 8002c14:	bfde      	ittt	le
 8002c16:	2330      	movle	r3, #48	@ 0x30
 8002c18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c20:	1b92      	subs	r2, r2, r6
 8002c22:	6122      	str	r2, [r4, #16]
 8002c24:	f8cd a000 	str.w	sl, [sp]
 8002c28:	464b      	mov	r3, r9
 8002c2a:	aa03      	add	r2, sp, #12
 8002c2c:	4621      	mov	r1, r4
 8002c2e:	4640      	mov	r0, r8
 8002c30:	f7ff fee6 	bl	8002a00 <_printf_common>
 8002c34:	3001      	adds	r0, #1
 8002c36:	d14a      	bne.n	8002cce <_printf_i+0x1f2>
 8002c38:	f04f 30ff 	mov.w	r0, #4294967295
 8002c3c:	b004      	add	sp, #16
 8002c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	f043 0320 	orr.w	r3, r3, #32
 8002c48:	6023      	str	r3, [r4, #0]
 8002c4a:	4833      	ldr	r0, [pc, #204]	@ (8002d18 <_printf_i+0x23c>)
 8002c4c:	2778      	movs	r7, #120	@ 0x78
 8002c4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	6831      	ldr	r1, [r6, #0]
 8002c56:	061f      	lsls	r7, r3, #24
 8002c58:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c5c:	d402      	bmi.n	8002c64 <_printf_i+0x188>
 8002c5e:	065f      	lsls	r7, r3, #25
 8002c60:	bf48      	it	mi
 8002c62:	b2ad      	uxthmi	r5, r5
 8002c64:	6031      	str	r1, [r6, #0]
 8002c66:	07d9      	lsls	r1, r3, #31
 8002c68:	bf44      	itt	mi
 8002c6a:	f043 0320 	orrmi.w	r3, r3, #32
 8002c6e:	6023      	strmi	r3, [r4, #0]
 8002c70:	b11d      	cbz	r5, 8002c7a <_printf_i+0x19e>
 8002c72:	2310      	movs	r3, #16
 8002c74:	e7ac      	b.n	8002bd0 <_printf_i+0xf4>
 8002c76:	4827      	ldr	r0, [pc, #156]	@ (8002d14 <_printf_i+0x238>)
 8002c78:	e7e9      	b.n	8002c4e <_printf_i+0x172>
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	f023 0320 	bic.w	r3, r3, #32
 8002c80:	6023      	str	r3, [r4, #0]
 8002c82:	e7f6      	b.n	8002c72 <_printf_i+0x196>
 8002c84:	4616      	mov	r6, r2
 8002c86:	e7bd      	b.n	8002c04 <_printf_i+0x128>
 8002c88:	6833      	ldr	r3, [r6, #0]
 8002c8a:	6825      	ldr	r5, [r4, #0]
 8002c8c:	6961      	ldr	r1, [r4, #20]
 8002c8e:	1d18      	adds	r0, r3, #4
 8002c90:	6030      	str	r0, [r6, #0]
 8002c92:	062e      	lsls	r6, r5, #24
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	d501      	bpl.n	8002c9c <_printf_i+0x1c0>
 8002c98:	6019      	str	r1, [r3, #0]
 8002c9a:	e002      	b.n	8002ca2 <_printf_i+0x1c6>
 8002c9c:	0668      	lsls	r0, r5, #25
 8002c9e:	d5fb      	bpl.n	8002c98 <_printf_i+0x1bc>
 8002ca0:	8019      	strh	r1, [r3, #0]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	6123      	str	r3, [r4, #16]
 8002ca6:	4616      	mov	r6, r2
 8002ca8:	e7bc      	b.n	8002c24 <_printf_i+0x148>
 8002caa:	6833      	ldr	r3, [r6, #0]
 8002cac:	1d1a      	adds	r2, r3, #4
 8002cae:	6032      	str	r2, [r6, #0]
 8002cb0:	681e      	ldr	r6, [r3, #0]
 8002cb2:	6862      	ldr	r2, [r4, #4]
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4630      	mov	r0, r6
 8002cb8:	f7fd fab2 	bl	8000220 <memchr>
 8002cbc:	b108      	cbz	r0, 8002cc2 <_printf_i+0x1e6>
 8002cbe:	1b80      	subs	r0, r0, r6
 8002cc0:	6060      	str	r0, [r4, #4]
 8002cc2:	6863      	ldr	r3, [r4, #4]
 8002cc4:	6123      	str	r3, [r4, #16]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ccc:	e7aa      	b.n	8002c24 <_printf_i+0x148>
 8002cce:	6923      	ldr	r3, [r4, #16]
 8002cd0:	4632      	mov	r2, r6
 8002cd2:	4649      	mov	r1, r9
 8002cd4:	4640      	mov	r0, r8
 8002cd6:	47d0      	blx	sl
 8002cd8:	3001      	adds	r0, #1
 8002cda:	d0ad      	beq.n	8002c38 <_printf_i+0x15c>
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	079b      	lsls	r3, r3, #30
 8002ce0:	d413      	bmi.n	8002d0a <_printf_i+0x22e>
 8002ce2:	68e0      	ldr	r0, [r4, #12]
 8002ce4:	9b03      	ldr	r3, [sp, #12]
 8002ce6:	4298      	cmp	r0, r3
 8002ce8:	bfb8      	it	lt
 8002cea:	4618      	movlt	r0, r3
 8002cec:	e7a6      	b.n	8002c3c <_printf_i+0x160>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	4632      	mov	r2, r6
 8002cf2:	4649      	mov	r1, r9
 8002cf4:	4640      	mov	r0, r8
 8002cf6:	47d0      	blx	sl
 8002cf8:	3001      	adds	r0, #1
 8002cfa:	d09d      	beq.n	8002c38 <_printf_i+0x15c>
 8002cfc:	3501      	adds	r5, #1
 8002cfe:	68e3      	ldr	r3, [r4, #12]
 8002d00:	9903      	ldr	r1, [sp, #12]
 8002d02:	1a5b      	subs	r3, r3, r1
 8002d04:	42ab      	cmp	r3, r5
 8002d06:	dcf2      	bgt.n	8002cee <_printf_i+0x212>
 8002d08:	e7eb      	b.n	8002ce2 <_printf_i+0x206>
 8002d0a:	2500      	movs	r5, #0
 8002d0c:	f104 0619 	add.w	r6, r4, #25
 8002d10:	e7f5      	b.n	8002cfe <_printf_i+0x222>
 8002d12:	bf00      	nop
 8002d14:	08002e55 	.word	0x08002e55
 8002d18:	08002e66 	.word	0x08002e66

08002d1c <memmove>:
 8002d1c:	4288      	cmp	r0, r1
 8002d1e:	b510      	push	{r4, lr}
 8002d20:	eb01 0402 	add.w	r4, r1, r2
 8002d24:	d902      	bls.n	8002d2c <memmove+0x10>
 8002d26:	4284      	cmp	r4, r0
 8002d28:	4623      	mov	r3, r4
 8002d2a:	d807      	bhi.n	8002d3c <memmove+0x20>
 8002d2c:	1e43      	subs	r3, r0, #1
 8002d2e:	42a1      	cmp	r1, r4
 8002d30:	d008      	beq.n	8002d44 <memmove+0x28>
 8002d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d3a:	e7f8      	b.n	8002d2e <memmove+0x12>
 8002d3c:	4402      	add	r2, r0
 8002d3e:	4601      	mov	r1, r0
 8002d40:	428a      	cmp	r2, r1
 8002d42:	d100      	bne.n	8002d46 <memmove+0x2a>
 8002d44:	bd10      	pop	{r4, pc}
 8002d46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d4e:	e7f7      	b.n	8002d40 <memmove+0x24>

08002d50 <_sbrk_r>:
 8002d50:	b538      	push	{r3, r4, r5, lr}
 8002d52:	4d06      	ldr	r5, [pc, #24]	@ (8002d6c <_sbrk_r+0x1c>)
 8002d54:	2300      	movs	r3, #0
 8002d56:	4604      	mov	r4, r0
 8002d58:	4608      	mov	r0, r1
 8002d5a:	602b      	str	r3, [r5, #0]
 8002d5c:	f7fd fe7a 	bl	8000a54 <_sbrk>
 8002d60:	1c43      	adds	r3, r0, #1
 8002d62:	d102      	bne.n	8002d6a <_sbrk_r+0x1a>
 8002d64:	682b      	ldr	r3, [r5, #0]
 8002d66:	b103      	cbz	r3, 8002d6a <_sbrk_r+0x1a>
 8002d68:	6023      	str	r3, [r4, #0]
 8002d6a:	bd38      	pop	{r3, r4, r5, pc}
 8002d6c:	20000264 	.word	0x20000264

08002d70 <memcpy>:
 8002d70:	440a      	add	r2, r1
 8002d72:	4291      	cmp	r1, r2
 8002d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d78:	d100      	bne.n	8002d7c <memcpy+0xc>
 8002d7a:	4770      	bx	lr
 8002d7c:	b510      	push	{r4, lr}
 8002d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d86:	4291      	cmp	r1, r2
 8002d88:	d1f9      	bne.n	8002d7e <memcpy+0xe>
 8002d8a:	bd10      	pop	{r4, pc}

08002d8c <_realloc_r>:
 8002d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d90:	4680      	mov	r8, r0
 8002d92:	4615      	mov	r5, r2
 8002d94:	460c      	mov	r4, r1
 8002d96:	b921      	cbnz	r1, 8002da2 <_realloc_r+0x16>
 8002d98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	f7ff bc4b 	b.w	8002638 <_malloc_r>
 8002da2:	b92a      	cbnz	r2, 8002db0 <_realloc_r+0x24>
 8002da4:	f7ff fbdc 	bl	8002560 <_free_r>
 8002da8:	2400      	movs	r4, #0
 8002daa:	4620      	mov	r0, r4
 8002dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002db0:	f000 f81a 	bl	8002de8 <_malloc_usable_size_r>
 8002db4:	4285      	cmp	r5, r0
 8002db6:	4606      	mov	r6, r0
 8002db8:	d802      	bhi.n	8002dc0 <_realloc_r+0x34>
 8002dba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002dbe:	d8f4      	bhi.n	8002daa <_realloc_r+0x1e>
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	4640      	mov	r0, r8
 8002dc4:	f7ff fc38 	bl	8002638 <_malloc_r>
 8002dc8:	4607      	mov	r7, r0
 8002dca:	2800      	cmp	r0, #0
 8002dcc:	d0ec      	beq.n	8002da8 <_realloc_r+0x1c>
 8002dce:	42b5      	cmp	r5, r6
 8002dd0:	462a      	mov	r2, r5
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	bf28      	it	cs
 8002dd6:	4632      	movcs	r2, r6
 8002dd8:	f7ff ffca 	bl	8002d70 <memcpy>
 8002ddc:	4621      	mov	r1, r4
 8002dde:	4640      	mov	r0, r8
 8002de0:	f7ff fbbe 	bl	8002560 <_free_r>
 8002de4:	463c      	mov	r4, r7
 8002de6:	e7e0      	b.n	8002daa <_realloc_r+0x1e>

08002de8 <_malloc_usable_size_r>:
 8002de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dec:	1f18      	subs	r0, r3, #4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	bfbc      	itt	lt
 8002df2:	580b      	ldrlt	r3, [r1, r0]
 8002df4:	18c0      	addlt	r0, r0, r3
 8002df6:	4770      	bx	lr

08002df8 <_init>:
 8002df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfa:	bf00      	nop
 8002dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dfe:	bc08      	pop	{r3}
 8002e00:	469e      	mov	lr, r3
 8002e02:	4770      	bx	lr

08002e04 <_fini>:
 8002e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e06:	bf00      	nop
 8002e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e0a:	bc08      	pop	{r3}
 8002e0c:	469e      	mov	lr, r3
 8002e0e:	4770      	bx	lr
